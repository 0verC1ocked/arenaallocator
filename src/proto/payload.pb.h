// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payload_2eproto;
namespace PAYLOAD {
class AttributeBoosts;
class AttributeBoostsDefaultTypeInternal;
extern AttributeBoostsDefaultTypeInternal _AttributeBoosts_default_instance_;
class CurrentBall;
class CurrentBallDefaultTypeInternal;
extern CurrentBallDefaultTypeInternal _CurrentBall_default_instance_;
class EquipmentInfo;
class EquipmentInfoDefaultTypeInternal;
extern EquipmentInfoDefaultTypeInternal _EquipmentInfo_default_instance_;
class Inning;
class InningDefaultTypeInternal;
extern InningDefaultTypeInternal _Inning_default_instance_;
class Match;
class MatchDefaultTypeInternal;
extern MatchDefaultTypeInternal _Match_default_instance_;
class PassiveInfo;
class PassiveInfoDefaultTypeInternal;
extern PassiveInfoDefaultTypeInternal _PassiveInfo_default_instance_;
class Payload;
class PayloadDefaultTypeInternal;
extern PayloadDefaultTypeInternal _Payload_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerInfo;
class PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class ShotsPossible;
class ShotsPossibleDefaultTypeInternal;
extern ShotsPossibleDefaultTypeInternal _ShotsPossible_default_instance_;
class TBall;
class TBallDefaultTypeInternal;
extern TBallDefaultTypeInternal _TBall_default_instance_;
class TResult;
class TResultDefaultTypeInternal;
extern TResultDefaultTypeInternal _TResult_default_instance_;
class TSaInfo;
class TSaInfoDefaultTypeInternal;
extern TSaInfoDefaultTypeInternal _TSaInfo_default_instance_;
class TShot;
class TShotDefaultTypeInternal;
extern TShotDefaultTypeInternal _TShot_default_instance_;
class UserData;
class UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace PAYLOAD
PROTOBUF_NAMESPACE_OPEN
template<> ::PAYLOAD::AttributeBoosts* Arena::CreateMaybeMessage<::PAYLOAD::AttributeBoosts>(Arena*);
template<> ::PAYLOAD::CurrentBall* Arena::CreateMaybeMessage<::PAYLOAD::CurrentBall>(Arena*);
template<> ::PAYLOAD::EquipmentInfo* Arena::CreateMaybeMessage<::PAYLOAD::EquipmentInfo>(Arena*);
template<> ::PAYLOAD::Inning* Arena::CreateMaybeMessage<::PAYLOAD::Inning>(Arena*);
template<> ::PAYLOAD::Match* Arena::CreateMaybeMessage<::PAYLOAD::Match>(Arena*);
template<> ::PAYLOAD::PassiveInfo* Arena::CreateMaybeMessage<::PAYLOAD::PassiveInfo>(Arena*);
template<> ::PAYLOAD::Payload* Arena::CreateMaybeMessage<::PAYLOAD::Payload>(Arena*);
template<> ::PAYLOAD::Player* Arena::CreateMaybeMessage<::PAYLOAD::Player>(Arena*);
template<> ::PAYLOAD::PlayerInfo* Arena::CreateMaybeMessage<::PAYLOAD::PlayerInfo>(Arena*);
template<> ::PAYLOAD::ShotsPossible* Arena::CreateMaybeMessage<::PAYLOAD::ShotsPossible>(Arena*);
template<> ::PAYLOAD::TBall* Arena::CreateMaybeMessage<::PAYLOAD::TBall>(Arena*);
template<> ::PAYLOAD::TResult* Arena::CreateMaybeMessage<::PAYLOAD::TResult>(Arena*);
template<> ::PAYLOAD::TSaInfo* Arena::CreateMaybeMessage<::PAYLOAD::TSaInfo>(Arena*);
template<> ::PAYLOAD::TShot* Arena::CreateMaybeMessage<::PAYLOAD::TShot>(Arena*);
template<> ::PAYLOAD::UserData* Arena::CreateMaybeMessage<::PAYLOAD::UserData>(Arena*);
template<> ::PAYLOAD::UserInfo* Arena::CreateMaybeMessage<::PAYLOAD::UserInfo>(Arena*);
template<> ::PAYLOAD::Version* Arena::CreateMaybeMessage<::PAYLOAD::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PAYLOAD {

enum MatchStates : int {
  NoState = 0,
  WaitingForUsers = 1,
  WaitingForMatchReady = 2,
  StartInnings = 3,
  PlayerSelection = 4,
  StartBall = 5,
  BallSelection = 6,
  ShotSelection = 7,
  StateOutcome = 8,
  StateEndBall = 9,
  EndOver = 10,
  StateEndInnings = 11,
  MatchEnded = 12,
  StateReconnecting = 13,
  MatchStates_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MatchStates_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MatchStates_IsValid(int value);
constexpr MatchStates MatchStates_MIN = NoState;
constexpr MatchStates MatchStates_MAX = StateReconnecting;
constexpr int MatchStates_ARRAYSIZE = MatchStates_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchStates_descriptor();
template<typename T>
inline const std::string& MatchStates_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchStates>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchStates_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchStates_descriptor(), enum_t_value);
}
inline bool MatchStates_Parse(
    const std::string& name, MatchStates* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchStates>(
    MatchStates_descriptor(), name, value);
}
enum TurnState : int {
  BATTING_TURN = 0,
  BOWLING_TURN = 1,
  BOTH_USERS_TURN = 2,
  NO_TURN = 3,
  TurnState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TurnState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TurnState_IsValid(int value);
constexpr TurnState TurnState_MIN = BATTING_TURN;
constexpr TurnState TurnState_MAX = NO_TURN;
constexpr int TurnState_ARRAYSIZE = TurnState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnState_descriptor();
template<typename T>
inline const std::string& TurnState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TurnState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TurnState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TurnState_descriptor(), enum_t_value);
}
inline bool TurnState_Parse(
    const std::string& name, TurnState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TurnState>(
    TurnState_descriptor(), name, value);
}
enum UserPlayState : int {
  UPSNone = 0,
  UPSOnStrike = 1,
  UPSOffStrike = 2,
  UPSBowling = 3,
  UserPlayState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserPlayState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserPlayState_IsValid(int value);
constexpr UserPlayState UserPlayState_MIN = UPSNone;
constexpr UserPlayState UserPlayState_MAX = UPSBowling;
constexpr int UserPlayState_ARRAYSIZE = UserPlayState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserPlayState_descriptor();
template<typename T>
inline const std::string& UserPlayState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserPlayState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserPlayState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserPlayState_descriptor(), enum_t_value);
}
inline bool UserPlayState_Parse(
    const std::string& name, UserPlayState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserPlayState>(
    UserPlayState_descriptor(), name, value);
}
enum TeamPosition : int {
  TEAM_POSITION_NONE = 0,
  HOME_TEAM = 1,
  AWAY_TEAM = 2,
  TeamPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TeamPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TeamPosition_IsValid(int value);
constexpr TeamPosition TeamPosition_MIN = TEAM_POSITION_NONE;
constexpr TeamPosition TeamPosition_MAX = AWAY_TEAM;
constexpr int TeamPosition_ARRAYSIZE = TeamPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamPosition_descriptor();
template<typename T>
inline const std::string& TeamPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeamPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeamPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeamPosition_descriptor(), enum_t_value);
}
inline bool TeamPosition_Parse(
    const std::string& name, TeamPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeamPosition>(
    TeamPosition_descriptor(), name, value);
}
enum MatchResult : int {
  NoResult = 0,
  Vicotry = 1,
  Defeat = 2,
  Draw = 3,
  MatchResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MatchResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MatchResult_IsValid(int value);
constexpr MatchResult MatchResult_MIN = NoResult;
constexpr MatchResult MatchResult_MAX = Draw;
constexpr int MatchResult_ARRAYSIZE = MatchResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchResult_descriptor();
template<typename T>
inline const std::string& MatchResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchResult_descriptor(), enum_t_value);
}
inline bool MatchResult_Parse(
    const std::string& name, MatchResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchResult>(
    MatchResult_descriptor(), name, value);
}
enum DeadShotStatus : int {
  NoStatus = 0,
  Inactive = 1,
  Success = 2,
  Failed = 3,
  DeadShotStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeadShotStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeadShotStatus_IsValid(int value);
constexpr DeadShotStatus DeadShotStatus_MIN = NoStatus;
constexpr DeadShotStatus DeadShotStatus_MAX = Failed;
constexpr int DeadShotStatus_ARRAYSIZE = DeadShotStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeadShotStatus_descriptor();
template<typename T>
inline const std::string& DeadShotStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeadShotStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeadShotStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeadShotStatus_descriptor(), enum_t_value);
}
inline bool DeadShotStatus_Parse(
    const std::string& name, DeadShotStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeadShotStatus>(
    DeadShotStatus_descriptor(), name, value);
}
enum WicketType : int {
  Invalid = 0,
  Bowled = 1,
  Catch = 2,
  WicketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WicketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WicketType_IsValid(int value);
constexpr WicketType WicketType_MIN = Invalid;
constexpr WicketType WicketType_MAX = Catch;
constexpr int WicketType_ARRAYSIZE = WicketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WicketType_descriptor();
template<typename T>
inline const std::string& WicketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WicketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WicketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WicketType_descriptor(), enum_t_value);
}
inline bool WicketType_Parse(
    const std::string& name, WicketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WicketType>(
    WicketType_descriptor(), name, value);
}
enum AnticipationType : int {
  NoType = 0,
  HighProbabilitySixSuccess = 1,
  HighProbabilitySixMiss = 2,
  HighProbabilityFourOut = 3,
  HighProbabilityFourMiss = 4,
  AnticipationOut = 5,
  AnticipationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnticipationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnticipationType_IsValid(int value);
constexpr AnticipationType AnticipationType_MIN = NoType;
constexpr AnticipationType AnticipationType_MAX = AnticipationOut;
constexpr int AnticipationType_ARRAYSIZE = AnticipationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnticipationType_descriptor();
template<typename T>
inline const std::string& AnticipationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnticipationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnticipationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnticipationType_descriptor(), enum_t_value);
}
inline bool AnticipationType_Parse(
    const std::string& name, AnticipationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnticipationType>(
    AnticipationType_descriptor(), name, value);
}
enum ShotOutcomes : int {
  NoOutcome = 0,
  Hit = 1,
  Miss = 2,
  Wicket = 3,
  ShotOutcomes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShotOutcomes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShotOutcomes_IsValid(int value);
constexpr ShotOutcomes ShotOutcomes_MIN = NoOutcome;
constexpr ShotOutcomes ShotOutcomes_MAX = Wicket;
constexpr int ShotOutcomes_ARRAYSIZE = ShotOutcomes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShotOutcomes_descriptor();
template<typename T>
inline const std::string& ShotOutcomes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShotOutcomes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShotOutcomes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShotOutcomes_descriptor(), enum_t_value);
}
inline bool ShotOutcomes_Parse(
    const std::string& name, ShotOutcomes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShotOutcomes>(
    ShotOutcomes_descriptor(), name, value);
}
enum Emoji : int {
  NoEmote = 0,
  EmoteHappy = 1,
  EmoteCool = 2,
  EmoteAngry = 3,
  EmoteYawn = 4,
  EmoteSix = 5,
  EmoteWicket = 6,
  Emoji_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Emoji_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Emoji_IsValid(int value);
constexpr Emoji Emoji_MIN = NoEmote;
constexpr Emoji Emoji_MAX = EmoteWicket;
constexpr int Emoji_ARRAYSIZE = Emoji_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Emoji_descriptor();
template<typename T>
inline const std::string& Emoji_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Emoji>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Emoji_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Emoji_descriptor(), enum_t_value);
}
inline bool Emoji_Parse(
    const std::string& name, Emoji* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Emoji>(
    Emoji_descriptor(), name, value);
}
enum Messaging : int {
  NoMessage = 0,
  MessageGG = 1,
  MessageWow = 2,
  MessageNice = 3,
  MessageHaha = 4,
  MessageThanks = 5,
  MessageGL = 6,
  Messaging_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Messaging_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Messaging_IsValid(int value);
constexpr Messaging Messaging_MIN = NoMessage;
constexpr Messaging Messaging_MAX = MessageGL;
constexpr int Messaging_ARRAYSIZE = Messaging_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Messaging_descriptor();
template<typename T>
inline const std::string& Messaging_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Messaging>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Messaging_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Messaging_descriptor(), enum_t_value);
}
inline bool Messaging_Parse(
    const std::string& name, Messaging* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Messaging>(
    Messaging_descriptor(), name, value);
}
enum PlayStates : int {
  NoPlay = 0,
  Batting = 1,
  Bowling = 2,
  ForFeit = 3,
  PlayStates_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayStates_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayStates_IsValid(int value);
constexpr PlayStates PlayStates_MIN = NoPlay;
constexpr PlayStates PlayStates_MAX = ForFeit;
constexpr int PlayStates_ARRAYSIZE = PlayStates_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayStates_descriptor();
template<typename T>
inline const std::string& PlayStates_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayStates>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayStates_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayStates_descriptor(), enum_t_value);
}
inline bool PlayStates_Parse(
    const std::string& name, PlayStates* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayStates>(
    PlayStates_descriptor(), name, value);
}
enum rarity : int {
  NoRarity = 0,
  Common = 1,
  Reliable = 2,
  Brilliant = 3,
  WorldClass = 4,
  rarity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  rarity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool rarity_IsValid(int value);
constexpr rarity rarity_MIN = NoRarity;
constexpr rarity rarity_MAX = WorldClass;
constexpr int rarity_ARRAYSIZE = rarity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rarity_descriptor();
template<typename T>
inline const std::string& rarity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, rarity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function rarity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    rarity_descriptor(), enum_t_value);
}
inline bool rarity_Parse(
    const std::string& name, rarity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<rarity>(
    rarity_descriptor(), name, value);
}
enum classification : int {
  NoClass = 0,
  Batsman = 1,
  Bowler = 2,
  classification_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  classification_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool classification_IsValid(int value);
constexpr classification classification_MIN = NoClass;
constexpr classification classification_MAX = Bowler;
constexpr int classification_ARRAYSIZE = classification_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* classification_descriptor();
template<typename T>
inline const std::string& classification_Name(T enum_t_value) {
  static_assert(::std::is_same<T, classification>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function classification_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    classification_descriptor(), enum_t_value);
}
inline bool classification_Parse(
    const std::string& name, classification* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<classification>(
    classification_descriptor(), name, value);
}
enum gender : int {
  NonBinary = 0,
  Male = 1,
  Female = 2,
  gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool gender_IsValid(int value);
constexpr gender gender_MIN = NonBinary;
constexpr gender gender_MAX = Female;
constexpr int gender_ARRAYSIZE = gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* gender_descriptor();
template<typename T>
inline const std::string& gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    gender_descriptor(), enum_t_value);
}
inline bool gender_Parse(
    const std::string& name, gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<gender>(
    gender_descriptor(), name, value);
}
enum batting_style : int {
  RightHand = 0,
  LeftHand = 1,
  batting_style_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  batting_style_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool batting_style_IsValid(int value);
constexpr batting_style batting_style_MIN = RightHand;
constexpr batting_style batting_style_MAX = LeftHand;
constexpr int batting_style_ARRAYSIZE = batting_style_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* batting_style_descriptor();
template<typename T>
inline const std::string& batting_style_Name(T enum_t_value) {
  static_assert(::std::is_same<T, batting_style>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function batting_style_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    batting_style_descriptor(), enum_t_value);
}
inline bool batting_style_Parse(
    const std::string& name, batting_style* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<batting_style>(
    batting_style_descriptor(), name, value);
}
enum bowling_style : int {
  Fast = 0,
  Spin = 1,
  NoBowlingStyle = 3,
  bowling_style_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  bowling_style_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool bowling_style_IsValid(int value);
constexpr bowling_style bowling_style_MIN = Fast;
constexpr bowling_style bowling_style_MAX = NoBowlingStyle;
constexpr int bowling_style_ARRAYSIZE = bowling_style_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* bowling_style_descriptor();
template<typename T>
inline const std::string& bowling_style_Name(T enum_t_value) {
  static_assert(::std::is_same<T, bowling_style>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function bowling_style_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    bowling_style_descriptor(), enum_t_value);
}
inline bool bowling_style_Parse(
    const std::string& name, bowling_style* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<bowling_style>(
    bowling_style_descriptor(), name, value);
}
enum Innings : int {
  FIRST = 0,
  SECOND = 1,
  Innings_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Innings_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Innings_IsValid(int value);
constexpr Innings Innings_MIN = FIRST;
constexpr Innings Innings_MAX = SECOND;
constexpr int Innings_ARRAYSIZE = Innings_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Innings_descriptor();
template<typename T>
inline const std::string& Innings_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Innings>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Innings_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Innings_descriptor(), enum_t_value);
}
inline bool Innings_Parse(
    const std::string& name, Innings* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Innings>(
    Innings_descriptor(), name, value);
}
enum Events : int {
  NONE = 0,
  OPP_JOINED = 1,
  MATCH_READY = 2,
  MATCH_CREATE_FAILED = 3,
  JOINED_MATCH = 4,
  MATCH_STARTED = 5,
  MATCH_SCENE_LOADED = 6,
  TOSS_START = 7,
  TOSS_ACK = 8,
  TOSS_RESULT = 9,
  BAT_BALL_SELECTION = 10,
  MATCH_INNINGS_DETAILS = 11,
  INNINGS_INTRO = 12,
  INNINGS_INTO_ACK = 13,
  SERVER_INNINGS_READY = 14,
  OPENERS_SELECTED = 15,
  CLIENT_INNINGS_READY = 16,
  INNINGS_START = 17,
  INNINGS_START_ACK = 18,
  START_CURRENT_OVER = 19,
  START_BALL_EVENT = 20,
  DELIVEIRES_DATA_CREATAED = 21,
  DELIVERY_SELECTED = 22,
  SHOTS_DATA = 23,
  BRACKET_SELECTED = 24,
  SHOT_RESULT = 25,
  OUTCOME_UPDATED_DATA = 26,
  SHOT_ANIMATIONS_FINISHED = 27,
  END_CURRENT_BALL_EVENT = 28,
  NEXT_BATSMAN_SELECTED = 29,
  END_CURRENT_BALL_EVENT_ACK = 30,
  END_CURRENT_OVER = 31,
  NEXT_BOWLER_SELECTED = 32,
  END_OVER_ACK = 33,
  PASSIVES_DATA = 34,
  UPDATE_LOCAL_PLAYER_STRENGTHS = 35,
  ACTIVATE_BATSMAN_SA = 36,
  BATSMAN_SA_ACTIVATED = 37,
  ACTIVATE_BOWLER_SA = 38,
  BOWLER_SA_ACTIVATED = 39,
  BATSMAN_INSTANT_SA_ACTIVATE = 40,
  BOWLER_INSTANT_SA_ACTIVATE = 41,
  MATCH_MISSION_UPDATED = 42,
  MATCH_ARENAS_UPDATED = 43,
  END_FIRST_INNINGS = 44,
  END_FIRST_INNINGS_ACK = 45,
  END_MATCH = 46,
  ABORT_MATCH = 47,
  FORFIET_MATCH = 48,
  REMATCH_JOIN = 49,
  REMATCH_START = 50,
  TURN_START = 51,
  TURN_END = 52,
  TURN_MISS = 53,
  DISCONNECT_TIMER_DATA = 54,
  CHAT_EMOJI = 55,
  PING = 56,
  BATSMAN_INSTANT_SA_INACTIVATE = 57,
  BOWLER_INSTANT_SA_INACTIVATE = 68,
  FIELDING_MODE_CHANGED = 59,
  DATA_UPDATE = 60,
  SPECTATOR_JOINED = 61,
  SPECTATOR_JOIN_ACK = 62,
  FAST_MODE_SPEED_UP = 63,
  FAST_MODE_SPEED_UP_ACK = 64,
  THREAD_EXIT = 65,
  MESSAGE = 66,
  INNINGS_READY = 67,
  START_BALL_EVENT_ACK = 69,
  RECONNECT = 70,
  CONNECT = 71,
  CONNECT_ACK = 72,
  CONNECTED = 73,
  PONG = 74,
  RECONNECTED = 75,
  DISCONNECT = 76,
  CREATE_MATCH = 77,
  EVENT_HISTORY = 78,
  MATCH_SCENE_LOADED_ACK = 79,
  MATCH_NOT_FOUND = 80,
  UNSUPPORTED_VERSION = 81,
  REPLAY_SYNC = 82,
  REPLAY_SYNC_ACK = 83,
  REPLAY_CONNECT = 84,
  REPLAY_CONNECT_ACK = 85,
  REPLAY_RESYNC = 86,
  Events_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Events_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Events_IsValid(int value);
constexpr Events Events_MIN = NONE;
constexpr Events Events_MAX = REPLAY_RESYNC;
constexpr int Events_ARRAYSIZE = Events_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Events_descriptor();
template<typename T>
inline const std::string& Events_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Events>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Events_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Events_descriptor(), enum_t_value);
}
inline bool Events_Parse(
    const std::string& name, Events* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Events>(
    Events_descriptor(), name, value);
}
// ===================================================================

class Payload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.Payload) */ {
 public:
  inline Payload() : Payload(nullptr) {};
  virtual ~Payload();

  Payload(const Payload& from);
  Payload(Payload&& from) noexcept
    : Payload() {
    *this = ::std::move(from);
  }

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payload& operator=(Payload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payload* internal_default_instance() {
    return reinterpret_cast<const Payload*>(
               &_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Payload& a, Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(Payload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payload* New() const final {
    return CreateMaybeMessage<Payload>(nullptr);
  }

  Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.Payload";
  }
  protected:
  explicit Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMatchStateFieldNumber = 4,
    kVersionFieldNumber = 7,
    kEventFieldNumber = 1,
    kTurnFieldNumber = 3,
    kEmojiFieldNumber = 5,
    kMessageFieldNumber = 6,
    kForTeamFieldNumber = 8,
  };
  // .PAYLOAD.UserData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PAYLOAD::UserData& data() const;
  ::PAYLOAD::UserData* release_data();
  ::PAYLOAD::UserData* mutable_data();
  void set_allocated_data(::PAYLOAD::UserData* data);
  private:
  const ::PAYLOAD::UserData& _internal_data() const;
  ::PAYLOAD::UserData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PAYLOAD::UserData* data);
  ::PAYLOAD::UserData* unsafe_arena_release_data();

  // .PAYLOAD.Match match_state = 4;
  bool has_match_state() const;
  private:
  bool _internal_has_match_state() const;
  public:
  void clear_match_state();
  const ::PAYLOAD::Match& match_state() const;
  ::PAYLOAD::Match* release_match_state();
  ::PAYLOAD::Match* mutable_match_state();
  void set_allocated_match_state(::PAYLOAD::Match* match_state);
  private:
  const ::PAYLOAD::Match& _internal_match_state() const;
  ::PAYLOAD::Match* _internal_mutable_match_state();
  public:
  void unsafe_arena_set_allocated_match_state(
      ::PAYLOAD::Match* match_state);
  ::PAYLOAD::Match* unsafe_arena_release_match_state();

  // .PAYLOAD.Version version = 7;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::PAYLOAD::Version& version() const;
  ::PAYLOAD::Version* release_version();
  ::PAYLOAD::Version* mutable_version();
  void set_allocated_version(::PAYLOAD::Version* version);
  private:
  const ::PAYLOAD::Version& _internal_version() const;
  ::PAYLOAD::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::PAYLOAD::Version* version);
  ::PAYLOAD::Version* unsafe_arena_release_version();

  // .PAYLOAD.Events event = 1;
  void clear_event();
  ::PAYLOAD::Events event() const;
  void set_event(::PAYLOAD::Events value);
  private:
  ::PAYLOAD::Events _internal_event() const;
  void _internal_set_event(::PAYLOAD::Events value);
  public:

  // .PAYLOAD.TurnState turn = 3;
  void clear_turn();
  ::PAYLOAD::TurnState turn() const;
  void set_turn(::PAYLOAD::TurnState value);
  private:
  ::PAYLOAD::TurnState _internal_turn() const;
  void _internal_set_turn(::PAYLOAD::TurnState value);
  public:

  // .PAYLOAD.Emoji emoji = 5;
  void clear_emoji();
  ::PAYLOAD::Emoji emoji() const;
  void set_emoji(::PAYLOAD::Emoji value);
  private:
  ::PAYLOAD::Emoji _internal_emoji() const;
  void _internal_set_emoji(::PAYLOAD::Emoji value);
  public:

  // .PAYLOAD.Messaging message = 6;
  void clear_message();
  ::PAYLOAD::Messaging message() const;
  void set_message(::PAYLOAD::Messaging value);
  private:
  ::PAYLOAD::Messaging _internal_message() const;
  void _internal_set_message(::PAYLOAD::Messaging value);
  public:

  // .PAYLOAD.TeamPosition for_team = 8;
  void clear_for_team();
  ::PAYLOAD::TeamPosition for_team() const;
  void set_for_team(::PAYLOAD::TeamPosition value);
  private:
  ::PAYLOAD::TeamPosition _internal_for_team() const;
  void _internal_set_for_team(::PAYLOAD::TeamPosition value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.Payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PAYLOAD::UserData* data_;
  ::PAYLOAD::Match* match_state_;
  ::PAYLOAD::Version* version_;
  int event_;
  int turn_;
  int emoji_;
  int message_;
  int for_team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class Version PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.Version) */ {
 public:
  inline Version() : Version(nullptr) {};
  virtual ~Version();

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(nullptr);
  }

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // int32 major = 1;
  void clear_major();
  ::PROTOBUF_NAMESPACE_ID::int32 major() const;
  void set_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_major() const;
  void _internal_set_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minor = 2;
  void clear_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 minor() const;
  void set_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minor() const;
  void _internal_set_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 patch = 3;
  void clear_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 patch() const;
  void set_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch() const;
  void _internal_set_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 major_;
  ::PROTOBUF_NAMESPACE_ID::int32 minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class UserData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {};
  virtual ~UserData();

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const final {
    return CreateMaybeMessage<UserData>(nullptr);
  }

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeLineupFieldNumber = 5,
    kAwayLineupFieldNumber = 6,
    kBatsmanSelectedFieldNumber = 8,
    kBallsFieldNumber = 10,
    kShotsFieldNumber = 11,
    kOnstrikePassivesInfoFieldNumber = 26,
    kOffstrikePassivesInfoFieldNumber = 27,
    kBowlerPassivesInfoFieldNumber = 28,
    kAppliedEquipmentsFieldNumber = 29,
    kUserIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kOpponentIdFieldNumber = 3,
    kMsgFieldNumber = 4,
    kResultFieldNumber = 16,
    kBowlerAttributeBoostsFieldNumber = 30,
    kOnstrikeAttributeBoostsFieldNumber = 31,
    kOffstrikeAttributeBoostsFieldNumber = 32,
    kPlayStateFieldNumber = 7,
    kBowlerSelectedFieldNumber = 9,
    kIdFieldNumber = 12,
    kSelectedOnstrikeBatsmanIdFieldNumber = 13,
    kSelectedOffstrikeBatsmanIdFieldNumber = 14,
    kSelectedBowlerIdFieldNumber = 15,
    kSelectionTimeoutFieldNumber = 17,
    kPlayerSelectionTimeoutFieldNumber = 18,
    kBufferForSelectionTimeoutFieldNumber = 19,
    kPingPongTimeoutFieldNumber = 20,
    kBatsmanManaFilledFieldNumber = 21,
    kBowlerManaFilledFieldNumber = 22,
    kActivatedSaFieldNumber = 23,
    kSaDurationFieldNumber = 24,
    kSelectionTimeRemainingFieldNumber = 33,
    kIsRpsActiveFieldNumber = 25,
    kSelectionMissedFieldNumber = 37,
    kOppnentSelectionMissedFieldNumber = 38,
    kMaxSelectionMissesFieldNumber = 34,
    kSelectionMissesFieldNumber = 35,
    kOppnentSelectionMissesFieldNumber = 36,
    kStartInningsTimeoutSecondsFieldNumber = 39,
    kStartInningsTimeRemainingFieldNumber = 40,
    kMatchResultFieldNumber = 41,
  };
  // repeated .PAYLOAD.Player home_lineup = 5;
  int home_lineup_size() const;
  private:
  int _internal_home_lineup_size() const;
  public:
  void clear_home_lineup();
  ::PAYLOAD::Player* mutable_home_lineup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
      mutable_home_lineup();
  private:
  const ::PAYLOAD::Player& _internal_home_lineup(int index) const;
  ::PAYLOAD::Player* _internal_add_home_lineup();
  public:
  const ::PAYLOAD::Player& home_lineup(int index) const;
  ::PAYLOAD::Player* add_home_lineup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
      home_lineup() const;

  // repeated .PAYLOAD.Player away_lineup = 6;
  int away_lineup_size() const;
  private:
  int _internal_away_lineup_size() const;
  public:
  void clear_away_lineup();
  ::PAYLOAD::Player* mutable_away_lineup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
      mutable_away_lineup();
  private:
  const ::PAYLOAD::Player& _internal_away_lineup(int index) const;
  ::PAYLOAD::Player* _internal_add_away_lineup();
  public:
  const ::PAYLOAD::Player& away_lineup(int index) const;
  ::PAYLOAD::Player* add_away_lineup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
      away_lineup() const;

  // repeated int32 batsman_selected = 8;
  int batsman_selected_size() const;
  private:
  int _internal_batsman_selected_size() const;
  public:
  void clear_batsman_selected();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batsman_selected(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_batsman_selected() const;
  void _internal_add_batsman_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_batsman_selected();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 batsman_selected(int index) const;
  void set_batsman_selected(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_batsman_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      batsman_selected() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_batsman_selected();

  // repeated .PAYLOAD.TBall balls = 10;
  int balls_size() const;
  private:
  int _internal_balls_size() const;
  public:
  void clear_balls();
  ::PAYLOAD::TBall* mutable_balls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >*
      mutable_balls();
  private:
  const ::PAYLOAD::TBall& _internal_balls(int index) const;
  ::PAYLOAD::TBall* _internal_add_balls();
  public:
  const ::PAYLOAD::TBall& balls(int index) const;
  ::PAYLOAD::TBall* add_balls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >&
      balls() const;

  // repeated .PAYLOAD.TShot shots = 11;
  int shots_size() const;
  private:
  int _internal_shots_size() const;
  public:
  void clear_shots();
  ::PAYLOAD::TShot* mutable_shots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >*
      mutable_shots();
  private:
  const ::PAYLOAD::TShot& _internal_shots(int index) const;
  ::PAYLOAD::TShot* _internal_add_shots();
  public:
  const ::PAYLOAD::TShot& shots(int index) const;
  ::PAYLOAD::TShot* add_shots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >&
      shots() const;

  // repeated .PAYLOAD.PassiveInfo onstrike_passives_info = 26;
  int onstrike_passives_info_size() const;
  private:
  int _internal_onstrike_passives_info_size() const;
  public:
  void clear_onstrike_passives_info();
  ::PAYLOAD::PassiveInfo* mutable_onstrike_passives_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >*
      mutable_onstrike_passives_info();
  private:
  const ::PAYLOAD::PassiveInfo& _internal_onstrike_passives_info(int index) const;
  ::PAYLOAD::PassiveInfo* _internal_add_onstrike_passives_info();
  public:
  const ::PAYLOAD::PassiveInfo& onstrike_passives_info(int index) const;
  ::PAYLOAD::PassiveInfo* add_onstrike_passives_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >&
      onstrike_passives_info() const;

  // repeated .PAYLOAD.PassiveInfo offstrike_passives_info = 27;
  int offstrike_passives_info_size() const;
  private:
  int _internal_offstrike_passives_info_size() const;
  public:
  void clear_offstrike_passives_info();
  ::PAYLOAD::PassiveInfo* mutable_offstrike_passives_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >*
      mutable_offstrike_passives_info();
  private:
  const ::PAYLOAD::PassiveInfo& _internal_offstrike_passives_info(int index) const;
  ::PAYLOAD::PassiveInfo* _internal_add_offstrike_passives_info();
  public:
  const ::PAYLOAD::PassiveInfo& offstrike_passives_info(int index) const;
  ::PAYLOAD::PassiveInfo* add_offstrike_passives_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >&
      offstrike_passives_info() const;

  // repeated .PAYLOAD.PassiveInfo bowler_passives_info = 28;
  int bowler_passives_info_size() const;
  private:
  int _internal_bowler_passives_info_size() const;
  public:
  void clear_bowler_passives_info();
  ::PAYLOAD::PassiveInfo* mutable_bowler_passives_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >*
      mutable_bowler_passives_info();
  private:
  const ::PAYLOAD::PassiveInfo& _internal_bowler_passives_info(int index) const;
  ::PAYLOAD::PassiveInfo* _internal_add_bowler_passives_info();
  public:
  const ::PAYLOAD::PassiveInfo& bowler_passives_info(int index) const;
  ::PAYLOAD::PassiveInfo* add_bowler_passives_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >&
      bowler_passives_info() const;

  // repeated .PAYLOAD.EquipmentInfo applied_equipments = 29;
  int applied_equipments_size() const;
  private:
  int _internal_applied_equipments_size() const;
  public:
  void clear_applied_equipments();
  ::PAYLOAD::EquipmentInfo* mutable_applied_equipments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::EquipmentInfo >*
      mutable_applied_equipments();
  private:
  const ::PAYLOAD::EquipmentInfo& _internal_applied_equipments(int index) const;
  ::PAYLOAD::EquipmentInfo* _internal_add_applied_equipments();
  public:
  const ::PAYLOAD::EquipmentInfo& applied_equipments(int index) const;
  ::PAYLOAD::EquipmentInfo* add_applied_equipments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::EquipmentInfo >&
      applied_equipments() const;

  // string userId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string roomId = 2;
  void clear_roomid();
  const std::string& roomid() const;
  void set_roomid(const std::string& value);
  void set_roomid(std::string&& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  std::string* mutable_roomid();
  std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomid(
      std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // string opponentId = 3;
  void clear_opponentid();
  const std::string& opponentid() const;
  void set_opponentid(const std::string& value);
  void set_opponentid(std::string&& value);
  void set_opponentid(const char* value);
  void set_opponentid(const char* value, size_t size);
  std::string* mutable_opponentid();
  std::string* release_opponentid();
  void set_allocated_opponentid(std::string* opponentid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_opponentid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_opponentid(
      std::string* opponentid);
  private:
  const std::string& _internal_opponentid() const;
  void _internal_set_opponentid(const std::string& value);
  std::string* _internal_mutable_opponentid();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .PAYLOAD.TResult result = 16;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::PAYLOAD::TResult& result() const;
  ::PAYLOAD::TResult* release_result();
  ::PAYLOAD::TResult* mutable_result();
  void set_allocated_result(::PAYLOAD::TResult* result);
  private:
  const ::PAYLOAD::TResult& _internal_result() const;
  ::PAYLOAD::TResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::PAYLOAD::TResult* result);
  ::PAYLOAD::TResult* unsafe_arena_release_result();

  // .PAYLOAD.AttributeBoosts bowler_attribute_boosts = 30;
  bool has_bowler_attribute_boosts() const;
  private:
  bool _internal_has_bowler_attribute_boosts() const;
  public:
  void clear_bowler_attribute_boosts();
  const ::PAYLOAD::AttributeBoosts& bowler_attribute_boosts() const;
  ::PAYLOAD::AttributeBoosts* release_bowler_attribute_boosts();
  ::PAYLOAD::AttributeBoosts* mutable_bowler_attribute_boosts();
  void set_allocated_bowler_attribute_boosts(::PAYLOAD::AttributeBoosts* bowler_attribute_boosts);
  private:
  const ::PAYLOAD::AttributeBoosts& _internal_bowler_attribute_boosts() const;
  ::PAYLOAD::AttributeBoosts* _internal_mutable_bowler_attribute_boosts();
  public:
  void unsafe_arena_set_allocated_bowler_attribute_boosts(
      ::PAYLOAD::AttributeBoosts* bowler_attribute_boosts);
  ::PAYLOAD::AttributeBoosts* unsafe_arena_release_bowler_attribute_boosts();

  // .PAYLOAD.AttributeBoosts onstrike_attribute_boosts = 31;
  bool has_onstrike_attribute_boosts() const;
  private:
  bool _internal_has_onstrike_attribute_boosts() const;
  public:
  void clear_onstrike_attribute_boosts();
  const ::PAYLOAD::AttributeBoosts& onstrike_attribute_boosts() const;
  ::PAYLOAD::AttributeBoosts* release_onstrike_attribute_boosts();
  ::PAYLOAD::AttributeBoosts* mutable_onstrike_attribute_boosts();
  void set_allocated_onstrike_attribute_boosts(::PAYLOAD::AttributeBoosts* onstrike_attribute_boosts);
  private:
  const ::PAYLOAD::AttributeBoosts& _internal_onstrike_attribute_boosts() const;
  ::PAYLOAD::AttributeBoosts* _internal_mutable_onstrike_attribute_boosts();
  public:
  void unsafe_arena_set_allocated_onstrike_attribute_boosts(
      ::PAYLOAD::AttributeBoosts* onstrike_attribute_boosts);
  ::PAYLOAD::AttributeBoosts* unsafe_arena_release_onstrike_attribute_boosts();

  // .PAYLOAD.AttributeBoosts offstrike_attribute_boosts = 32;
  bool has_offstrike_attribute_boosts() const;
  private:
  bool _internal_has_offstrike_attribute_boosts() const;
  public:
  void clear_offstrike_attribute_boosts();
  const ::PAYLOAD::AttributeBoosts& offstrike_attribute_boosts() const;
  ::PAYLOAD::AttributeBoosts* release_offstrike_attribute_boosts();
  ::PAYLOAD::AttributeBoosts* mutable_offstrike_attribute_boosts();
  void set_allocated_offstrike_attribute_boosts(::PAYLOAD::AttributeBoosts* offstrike_attribute_boosts);
  private:
  const ::PAYLOAD::AttributeBoosts& _internal_offstrike_attribute_boosts() const;
  ::PAYLOAD::AttributeBoosts* _internal_mutable_offstrike_attribute_boosts();
  public:
  void unsafe_arena_set_allocated_offstrike_attribute_boosts(
      ::PAYLOAD::AttributeBoosts* offstrike_attribute_boosts);
  ::PAYLOAD::AttributeBoosts* unsafe_arena_release_offstrike_attribute_boosts();

  // .PAYLOAD.PlayStates playState = 7;
  void clear_playstate();
  ::PAYLOAD::PlayStates playstate() const;
  void set_playstate(::PAYLOAD::PlayStates value);
  private:
  ::PAYLOAD::PlayStates _internal_playstate() const;
  void _internal_set_playstate(::PAYLOAD::PlayStates value);
  public:

  // int32 bowler_selected = 9;
  void clear_bowler_selected();
  ::PROTOBUF_NAMESPACE_ID::int32 bowler_selected() const;
  void set_bowler_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bowler_selected() const;
  void _internal_set_bowler_selected(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 12;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selected_onstrike_batsman_id = 13;
  void clear_selected_onstrike_batsman_id();
  ::PROTOBUF_NAMESPACE_ID::int32 selected_onstrike_batsman_id() const;
  void set_selected_onstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selected_onstrike_batsman_id() const;
  void _internal_set_selected_onstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selected_offstrike_batsman_id = 14;
  void clear_selected_offstrike_batsman_id();
  ::PROTOBUF_NAMESPACE_ID::int32 selected_offstrike_batsman_id() const;
  void set_selected_offstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selected_offstrike_batsman_id() const;
  void _internal_set_selected_offstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selected_bowler_id = 15;
  void clear_selected_bowler_id();
  ::PROTOBUF_NAMESPACE_ID::int32 selected_bowler_id() const;
  void set_selected_bowler_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selected_bowler_id() const;
  void _internal_set_selected_bowler_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selection_timeout = 17;
  void clear_selection_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 selection_timeout() const;
  void set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selection_timeout() const;
  void _internal_set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_selection_timeout = 18;
  void clear_player_selection_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 player_selection_timeout() const;
  void set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_selection_timeout() const;
  void _internal_set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buffer_for_selection_timeout = 19;
  void clear_buffer_for_selection_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_for_selection_timeout() const;
  void set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_for_selection_timeout() const;
  void _internal_set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ping_pong_timeout = 20;
  void clear_ping_pong_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 ping_pong_timeout() const;
  void set_ping_pong_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping_pong_timeout() const;
  void _internal_set_ping_pong_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 batsman_mana_filled = 21;
  void clear_batsman_mana_filled();
  ::PROTOBUF_NAMESPACE_ID::int32 batsman_mana_filled() const;
  void set_batsman_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batsman_mana_filled() const;
  void _internal_set_batsman_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bowler_mana_filled = 22;
  void clear_bowler_mana_filled();
  ::PROTOBUF_NAMESPACE_ID::int32 bowler_mana_filled() const;
  void set_bowler_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bowler_mana_filled() const;
  void _internal_set_bowler_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activated_sa = 23;
  void clear_activated_sa();
  ::PROTOBUF_NAMESPACE_ID::int32 activated_sa() const;
  void set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated_sa() const;
  void _internal_set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sa_duration = 24;
  void clear_sa_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 sa_duration() const;
  void set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sa_duration() const;
  void _internal_set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selection_time_remaining = 33;
  void clear_selection_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 selection_time_remaining() const;
  void set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selection_time_remaining() const;
  void _internal_set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_rps_active = 25;
  void clear_is_rps_active();
  bool is_rps_active() const;
  void set_is_rps_active(bool value);
  private:
  bool _internal_is_rps_active() const;
  void _internal_set_is_rps_active(bool value);
  public:

  // bool selection_missed = 37;
  void clear_selection_missed();
  bool selection_missed() const;
  void set_selection_missed(bool value);
  private:
  bool _internal_selection_missed() const;
  void _internal_set_selection_missed(bool value);
  public:

  // bool oppnent_selection_missed = 38;
  void clear_oppnent_selection_missed();
  bool oppnent_selection_missed() const;
  void set_oppnent_selection_missed(bool value);
  private:
  bool _internal_oppnent_selection_missed() const;
  void _internal_set_oppnent_selection_missed(bool value);
  public:

  // int32 max_selection_misses = 34;
  void clear_max_selection_misses();
  ::PROTOBUF_NAMESPACE_ID::int32 max_selection_misses() const;
  void set_max_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_selection_misses() const;
  void _internal_set_max_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selection_misses = 35;
  void clear_selection_misses();
  ::PROTOBUF_NAMESPACE_ID::int32 selection_misses() const;
  void set_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selection_misses() const;
  void _internal_set_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oppnent_selection_misses = 36;
  void clear_oppnent_selection_misses();
  ::PROTOBUF_NAMESPACE_ID::int32 oppnent_selection_misses() const;
  void set_oppnent_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oppnent_selection_misses() const;
  void _internal_set_oppnent_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_innings_timeout_seconds = 39;
  void clear_start_innings_timeout_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 start_innings_timeout_seconds() const;
  void set_start_innings_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_innings_timeout_seconds() const;
  void _internal_set_start_innings_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 start_innings_time_remaining = 40;
  void clear_start_innings_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 start_innings_time_remaining() const;
  void set_start_innings_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_innings_time_remaining() const;
  void _internal_set_start_innings_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.MatchResult match_result = 41;
  void clear_match_result();
  ::PAYLOAD::MatchResult match_result() const;
  void set_match_result(::PAYLOAD::MatchResult value);
  private:
  ::PAYLOAD::MatchResult _internal_match_result() const;
  void _internal_set_match_result(::PAYLOAD::MatchResult value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player > home_lineup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player > away_lineup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > batsman_selected_;
  mutable std::atomic<int> _batsman_selected_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall > balls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot > shots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo > onstrike_passives_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo > offstrike_passives_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo > bowler_passives_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::EquipmentInfo > applied_equipments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opponentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PAYLOAD::TResult* result_;
  ::PAYLOAD::AttributeBoosts* bowler_attribute_boosts_;
  ::PAYLOAD::AttributeBoosts* onstrike_attribute_boosts_;
  ::PAYLOAD::AttributeBoosts* offstrike_attribute_boosts_;
  int playstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 bowler_selected_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 selected_onstrike_batsman_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 selected_offstrike_batsman_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 selected_bowler_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 selection_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_selection_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_for_selection_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_pong_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 batsman_mana_filled_;
  ::PROTOBUF_NAMESPACE_ID::int32 bowler_mana_filled_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_sa_;
  ::PROTOBUF_NAMESPACE_ID::int32 sa_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 selection_time_remaining_;
  bool is_rps_active_;
  bool selection_missed_;
  bool oppnent_selection_missed_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_selection_misses_;
  ::PROTOBUF_NAMESPACE_ID::int32 selection_misses_;
  ::PROTOBUF_NAMESPACE_ID::int32 oppnent_selection_misses_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_innings_timeout_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_innings_time_remaining_;
  int match_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class PassiveInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.PassiveInfo) */ {
 public:
  inline PassiveInfo() : PassiveInfo(nullptr) {};
  virtual ~PassiveInfo();

  PassiveInfo(const PassiveInfo& from);
  PassiveInfo(PassiveInfo&& from) noexcept
    : PassiveInfo() {
    *this = ::std::move(from);
  }

  inline PassiveInfo& operator=(const PassiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassiveInfo& operator=(PassiveInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PassiveInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassiveInfo* internal_default_instance() {
    return reinterpret_cast<const PassiveInfo*>(
               &_PassiveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PassiveInfo& a, PassiveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PassiveInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassiveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PassiveInfo* New() const final {
    return CreateMaybeMessage<PassiveInfo>(nullptr);
  }

  PassiveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PassiveInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PassiveInfo& from);
  void MergeFrom(const PassiveInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassiveInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.PassiveInfo";
  }
  protected:
  explicit PassiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIsActiveFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_active = 2;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.PassiveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class EquipmentInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.EquipmentInfo) */ {
 public:
  inline EquipmentInfo() : EquipmentInfo(nullptr) {};
  virtual ~EquipmentInfo();

  EquipmentInfo(const EquipmentInfo& from);
  EquipmentInfo(EquipmentInfo&& from) noexcept
    : EquipmentInfo() {
    *this = ::std::move(from);
  }

  inline EquipmentInfo& operator=(const EquipmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipmentInfo& operator=(EquipmentInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EquipmentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EquipmentInfo* internal_default_instance() {
    return reinterpret_cast<const EquipmentInfo*>(
               &_EquipmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EquipmentInfo& a, EquipmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipmentInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EquipmentInfo* New() const final {
    return CreateMaybeMessage<EquipmentInfo>(nullptr);
  }

  EquipmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EquipmentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EquipmentInfo& from);
  void MergeFrom(const EquipmentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipmentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.EquipmentInfo";
  }
  protected:
  explicit EquipmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBracketFieldNumber = 2,
    kClassificationFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bracket = 2;
  void clear_bracket();
  ::PROTOBUF_NAMESPACE_ID::int32 bracket() const;
  void set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bracket() const;
  void _internal_set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.classification classification = 3;
  void clear_classification();
  ::PAYLOAD::classification classification() const;
  void set_classification(::PAYLOAD::classification value);
  private:
  ::PAYLOAD::classification _internal_classification() const;
  void _internal_set_classification(::PAYLOAD::classification value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.EquipmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 bracket_;
  int classification_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class AttributeBoosts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.AttributeBoosts) */ {
 public:
  inline AttributeBoosts() : AttributeBoosts(nullptr) {};
  virtual ~AttributeBoosts();

  AttributeBoosts(const AttributeBoosts& from);
  AttributeBoosts(AttributeBoosts&& from) noexcept
    : AttributeBoosts() {
    *this = ::std::move(from);
  }

  inline AttributeBoosts& operator=(const AttributeBoosts& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeBoosts& operator=(AttributeBoosts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeBoosts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeBoosts* internal_default_instance() {
    return reinterpret_cast<const AttributeBoosts*>(
               &_AttributeBoosts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AttributeBoosts& a, AttributeBoosts& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeBoosts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeBoosts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeBoosts* New() const final {
    return CreateMaybeMessage<AttributeBoosts>(nullptr);
  }

  AttributeBoosts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeBoosts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeBoosts& from);
  void MergeFrom(const AttributeBoosts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeBoosts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.AttributeBoosts";
  }
  protected:
  explicit AttributeBoosts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLbRhbDebuffFieldNumber = 1,
    kConfidenceBoostFieldNumber = 2,
    kPassiveBoostFieldNumber = 3,
    kPropsBoostFieldNumber = 4,
  };
  // double lb_rhb_debuff = 1;
  void clear_lb_rhb_debuff();
  double lb_rhb_debuff() const;
  void set_lb_rhb_debuff(double value);
  private:
  double _internal_lb_rhb_debuff() const;
  void _internal_set_lb_rhb_debuff(double value);
  public:

  // double confidence_boost = 2;
  void clear_confidence_boost();
  double confidence_boost() const;
  void set_confidence_boost(double value);
  private:
  double _internal_confidence_boost() const;
  void _internal_set_confidence_boost(double value);
  public:

  // double passive_boost = 3;
  void clear_passive_boost();
  double passive_boost() const;
  void set_passive_boost(double value);
  private:
  double _internal_passive_boost() const;
  void _internal_set_passive_boost(double value);
  public:

  // double props_boost = 4;
  void clear_props_boost();
  double props_boost() const;
  void set_props_boost(double value);
  private:
  double _internal_props_boost() const;
  void _internal_set_props_boost(double value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.AttributeBoosts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lb_rhb_debuff_;
  double confidence_boost_;
  double passive_boost_;
  double props_boost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class TShot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.TShot) */ {
 public:
  inline TShot() : TShot(nullptr) {};
  virtual ~TShot();

  TShot(const TShot& from);
  TShot(TShot&& from) noexcept
    : TShot() {
    *this = ::std::move(from);
  }

  inline TShot& operator=(const TShot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TShot& operator=(TShot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TShot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TShot* internal_default_instance() {
    return reinterpret_cast<const TShot*>(
               &_TShot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TShot& a, TShot& b) {
    a.Swap(&b);
  }
  inline void Swap(TShot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TShot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TShot* New() const final {
    return CreateMaybeMessage<TShot>(nullptr);
  }

  TShot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TShot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TShot& from);
  void MergeFrom(const TShot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TShot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.TShot";
  }
  protected:
  explicit TShot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kRunFieldNumber = 3,
    kProbabilityFieldNumber = 5,
    kBracketFieldNumber = 4,
    kLockedFieldNumber = 6,
    kShotHiddenFieldNumber = 7,
    kProbabilityHiddenFieldNumber = 8,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 run = 3;
  void clear_run();
  ::PROTOBUF_NAMESPACE_ID::int32 run() const;
  void set_run(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_run() const;
  void _internal_set_run(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double probability = 5;
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // int32 bracket = 4;
  void clear_bracket();
  ::PROTOBUF_NAMESPACE_ID::int32 bracket() const;
  void set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bracket() const;
  void _internal_set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool locked = 6;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // bool shot_hidden = 7;
  void clear_shot_hidden();
  bool shot_hidden() const;
  void set_shot_hidden(bool value);
  private:
  bool _internal_shot_hidden() const;
  void _internal_set_shot_hidden(bool value);
  public:

  // bool probability_hidden = 8;
  void clear_probability_hidden();
  bool probability_hidden() const;
  void set_probability_hidden(bool value);
  private:
  bool _internal_probability_hidden() const;
  void _internal_set_probability_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.TShot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 run_;
  double probability_;
  ::PROTOBUF_NAMESPACE_ID::int32 bracket_;
  bool locked_;
  bool shot_hidden_;
  bool probability_hidden_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class TSaInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.TSaInfo) */ {
 public:
  inline TSaInfo() : TSaInfo(nullptr) {};
  virtual ~TSaInfo();

  TSaInfo(const TSaInfo& from);
  TSaInfo(TSaInfo&& from) noexcept
    : TSaInfo() {
    *this = ::std::move(from);
  }

  inline TSaInfo& operator=(const TSaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSaInfo& operator=(TSaInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSaInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TSaInfo* internal_default_instance() {
    return reinterpret_cast<const TSaInfo*>(
               &_TSaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TSaInfo& a, TSaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TSaInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSaInfo* New() const final {
    return CreateMaybeMessage<TSaInfo>(nullptr);
  }

  TSaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSaInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSaInfo& from);
  void MergeFrom(const TSaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.TSaInfo";
  }
  protected:
  explicit TSaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeadShotStatusFieldNumber = 1,
    kBatsmanActiveSaFieldNumber = 2,
    kBowlerActiveSaFieldNumber = 3,
    kImmortalWicketButMissFieldNumber = 4,
  };
  // .PAYLOAD.DeadShotStatus dead_shot_status = 1;
  void clear_dead_shot_status();
  ::PAYLOAD::DeadShotStatus dead_shot_status() const;
  void set_dead_shot_status(::PAYLOAD::DeadShotStatus value);
  private:
  ::PAYLOAD::DeadShotStatus _internal_dead_shot_status() const;
  void _internal_set_dead_shot_status(::PAYLOAD::DeadShotStatus value);
  public:

  // int32 batsman_active_sa = 2;
  void clear_batsman_active_sa();
  ::PROTOBUF_NAMESPACE_ID::int32 batsman_active_sa() const;
  void set_batsman_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batsman_active_sa() const;
  void _internal_set_batsman_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bowler_active_sa = 3;
  void clear_bowler_active_sa();
  ::PROTOBUF_NAMESPACE_ID::int32 bowler_active_sa() const;
  void set_bowler_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bowler_active_sa() const;
  void _internal_set_bowler_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool immortal_wicket_but_miss = 4;
  void clear_immortal_wicket_but_miss();
  bool immortal_wicket_but_miss() const;
  void set_immortal_wicket_but_miss(bool value);
  private:
  bool _internal_immortal_wicket_but_miss() const;
  void _internal_set_immortal_wicket_but_miss(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.TSaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int dead_shot_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 batsman_active_sa_;
  ::PROTOBUF_NAMESPACE_ID::int32 bowler_active_sa_;
  bool immortal_wicket_but_miss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class TResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.TResult) */ {
 public:
  inline TResult() : TResult(nullptr) {};
  virtual ~TResult();

  TResult(const TResult& from);
  TResult(TResult&& from) noexcept
    : TResult() {
    *this = ::std::move(from);
  }

  inline TResult& operator=(const TResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TResult& operator=(TResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TResult* internal_default_instance() {
    return reinterpret_cast<const TResult*>(
               &_TResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TResult& a, TResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TResult* New() const final {
    return CreateMaybeMessage<TResult>(nullptr);
  }

  TResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TResult& from);
  void MergeFrom(const TResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.TResult";
  }
  protected:
  explicit TResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaInfoFieldNumber = 13,
    kTotalRunsFieldNumber = 1,
    kTotalBallsFieldNumber = 2,
    kTotalWicketTakenFieldNumber = 3,
    kRunsScoredFieldNumber = 4,
    kOriginalRunsScoredFieldNumber = 5,
    kOverBallNumberFieldNumber = 6,
    kOverNumberFieldNumber = 7,
    kBracketIdFieldNumber = 8,
    kOutcomeFieldNumber = 9,
    kTypeFieldNumber = 10,
    kAnticipationTypeFieldNumber = 11,
    kInningFieldNumber = 12,
  };
  // .PAYLOAD.TSaInfo sa_info = 13;
  bool has_sa_info() const;
  private:
  bool _internal_has_sa_info() const;
  public:
  void clear_sa_info();
  const ::PAYLOAD::TSaInfo& sa_info() const;
  ::PAYLOAD::TSaInfo* release_sa_info();
  ::PAYLOAD::TSaInfo* mutable_sa_info();
  void set_allocated_sa_info(::PAYLOAD::TSaInfo* sa_info);
  private:
  const ::PAYLOAD::TSaInfo& _internal_sa_info() const;
  ::PAYLOAD::TSaInfo* _internal_mutable_sa_info();
  public:
  void unsafe_arena_set_allocated_sa_info(
      ::PAYLOAD::TSaInfo* sa_info);
  ::PAYLOAD::TSaInfo* unsafe_arena_release_sa_info();

  // int32 total_runs = 1;
  void clear_total_runs();
  ::PROTOBUF_NAMESPACE_ID::int32 total_runs() const;
  void set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_runs() const;
  void _internal_set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_balls = 2;
  void clear_total_balls();
  ::PROTOBUF_NAMESPACE_ID::int32 total_balls() const;
  void set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_balls() const;
  void _internal_set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_wicket_taken = 3;
  void clear_total_wicket_taken();
  ::PROTOBUF_NAMESPACE_ID::int32 total_wicket_taken() const;
  void set_total_wicket_taken(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_wicket_taken() const;
  void _internal_set_total_wicket_taken(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 runs_scored = 4;
  void clear_runs_scored();
  ::PROTOBUF_NAMESPACE_ID::int32 runs_scored() const;
  void set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runs_scored() const;
  void _internal_set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 original_runs_scored = 5;
  void clear_original_runs_scored();
  ::PROTOBUF_NAMESPACE_ID::int32 original_runs_scored() const;
  void set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_runs_scored() const;
  void _internal_set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 over_ball_number = 6;
  void clear_over_ball_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number() const;
  void set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_ball_number() const;
  void _internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 over_number = 7;
  void clear_over_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_number() const;
  void set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_number() const;
  void _internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bracket_id = 8;
  void clear_bracket_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bracket_id() const;
  void set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bracket_id() const;
  void _internal_set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.ShotOutcomes outcome = 9;
  void clear_outcome();
  ::PAYLOAD::ShotOutcomes outcome() const;
  void set_outcome(::PAYLOAD::ShotOutcomes value);
  private:
  ::PAYLOAD::ShotOutcomes _internal_outcome() const;
  void _internal_set_outcome(::PAYLOAD::ShotOutcomes value);
  public:

  // .PAYLOAD.WicketType type = 10;
  void clear_type();
  ::PAYLOAD::WicketType type() const;
  void set_type(::PAYLOAD::WicketType value);
  private:
  ::PAYLOAD::WicketType _internal_type() const;
  void _internal_set_type(::PAYLOAD::WicketType value);
  public:

  // .PAYLOAD.AnticipationType anticipation_type = 11;
  void clear_anticipation_type();
  ::PAYLOAD::AnticipationType anticipation_type() const;
  void set_anticipation_type(::PAYLOAD::AnticipationType value);
  private:
  ::PAYLOAD::AnticipationType _internal_anticipation_type() const;
  void _internal_set_anticipation_type(::PAYLOAD::AnticipationType value);
  public:

  // .PAYLOAD.Innings inning = 12;
  void clear_inning();
  ::PAYLOAD::Innings inning() const;
  void set_inning(::PAYLOAD::Innings value);
  private:
  ::PAYLOAD::Innings _internal_inning() const;
  void _internal_set_inning(::PAYLOAD::Innings value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.TResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PAYLOAD::TSaInfo* sa_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_runs_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_balls_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_wicket_taken_;
  ::PROTOBUF_NAMESPACE_ID::int32 runs_scored_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_runs_scored_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 bracket_id_;
  int outcome_;
  int type_;
  int anticipation_type_;
  int inning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class ShotsPossible PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.ShotsPossible) */ {
 public:
  inline ShotsPossible() : ShotsPossible(nullptr) {};
  virtual ~ShotsPossible();

  ShotsPossible(const ShotsPossible& from);
  ShotsPossible(ShotsPossible&& from) noexcept
    : ShotsPossible() {
    *this = ::std::move(from);
  }

  inline ShotsPossible& operator=(const ShotsPossible& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShotsPossible& operator=(ShotsPossible&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShotsPossible& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShotsPossible* internal_default_instance() {
    return reinterpret_cast<const ShotsPossible*>(
               &_ShotsPossible_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ShotsPossible& a, ShotsPossible& b) {
    a.Swap(&b);
  }
  inline void Swap(ShotsPossible* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShotsPossible* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShotsPossible* New() const final {
    return CreateMaybeMessage<ShotsPossible>(nullptr);
  }

  ShotsPossible* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShotsPossible>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShotsPossible& from);
  void MergeFrom(const ShotsPossible& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShotsPossible* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.ShotsPossible";
  }
  protected:
  explicit ShotsPossible(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBracketIdFieldNumber = 1,
    kShotIdFieldNumber = 2,
  };
  // int32 bracket_id = 1;
  void clear_bracket_id();
  ::PROTOBUF_NAMESPACE_ID::int32 bracket_id() const;
  void set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bracket_id() const;
  void _internal_set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shot_id = 2;
  void clear_shot_id();
  ::PROTOBUF_NAMESPACE_ID::int32 shot_id() const;
  void set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shot_id() const;
  void _internal_set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.ShotsPossible)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bracket_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 shot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class TBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.TBall) */ {
 public:
  inline TBall() : TBall(nullptr) {};
  virtual ~TBall();

  TBall(const TBall& from);
  TBall(TBall&& from) noexcept
    : TBall() {
    *this = ::std::move(from);
  }

  inline TBall& operator=(const TBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline TBall& operator=(TBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TBall* internal_default_instance() {
    return reinterpret_cast<const TBall*>(
               &_TBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TBall& a, TBall& b) {
    a.Swap(&b);
  }
  inline void Swap(TBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TBall* New() const final {
    return CreateMaybeMessage<TBall>(nullptr);
  }

  TBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TBall& from);
  void MergeFrom(const TBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.TBall";
  }
  protected:
  explicit TBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShotsPossibleFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kSkullsFieldNumber = 4,
    kValueFieldNumber = 3,
  };
  // repeated .PAYLOAD.ShotsPossible shots_possible = 5;
  int shots_possible_size() const;
  private:
  int _internal_shots_possible_size() const;
  public:
  void clear_shots_possible();
  ::PAYLOAD::ShotsPossible* mutable_shots_possible(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::ShotsPossible >*
      mutable_shots_possible();
  private:
  const ::PAYLOAD::ShotsPossible& _internal_shots_possible(int index) const;
  ::PAYLOAD::ShotsPossible* _internal_add_shots_possible();
  public:
  const ::PAYLOAD::ShotsPossible& shots_possible(int index) const;
  ::PAYLOAD::ShotsPossible* add_shots_possible();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::ShotsPossible >&
      shots_possible() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 skulls = 4;
  void clear_skulls();
  ::PROTOBUF_NAMESPACE_ID::int32 skulls() const;
  void set_skulls(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skulls() const;
  void _internal_set_skulls(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double value = 3;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.TBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::ShotsPossible > shots_possible_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 skulls_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.Player) */ {
 public:
  inline Player() : Player(nullptr) {};
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentSlotsFieldNumber = 13,
    kPropsFieldNumber = 14,
    kPassivesFieldNumber = 15,
    kNicknameFieldNumber = 2,
    kCharacterIdFieldNumber = 1,
    kRarityFieldNumber = 3,
    kImageNumberFieldNumber = 4,
    kClassificationFieldNumber = 5,
    kGenderFieldNumber = 6,
    kPowerFieldNumber = 7,
    kBattingStyleFieldNumber = 8,
    kBowlingStyleFieldNumber = 9,
    kLevelFieldNumber = 10,
    kLineupNumberFieldNumber = 11,
    kIsOutFieldNumber = 12,
  };
  // repeated int32 equipment_slots = 13;
  int equipment_slots_size() const;
  private:
  int _internal_equipment_slots_size() const;
  public:
  void clear_equipment_slots();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_equipment_slots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_equipment_slots() const;
  void _internal_add_equipment_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_equipment_slots();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 equipment_slots(int index) const;
  void set_equipment_slots(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_equipment_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      equipment_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_equipment_slots();

  // repeated int32 props = 14;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_props(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_props() const;
  void _internal_add_props(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_props();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 props(int index) const;
  void set_props(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_props(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      props() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_props();

  // repeated int32 passives = 15;
  int passives_size() const;
  private:
  int _internal_passives_size() const;
  public:
  void clear_passives();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passives(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_passives() const;
  void _internal_add_passives(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_passives();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 passives(int index) const;
  void set_passives(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_passives(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      passives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_passives();

  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nickname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nickname(
      std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 character_id = 1;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int32 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.rarity rarity = 3;
  void clear_rarity();
  ::PAYLOAD::rarity rarity() const;
  void set_rarity(::PAYLOAD::rarity value);
  private:
  ::PAYLOAD::rarity _internal_rarity() const;
  void _internal_set_rarity(::PAYLOAD::rarity value);
  public:

  // int32 image_number = 4;
  void clear_image_number();
  ::PROTOBUF_NAMESPACE_ID::int32 image_number() const;
  void set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_number() const;
  void _internal_set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.classification classification = 5;
  void clear_classification();
  ::PAYLOAD::classification classification() const;
  void set_classification(::PAYLOAD::classification value);
  private:
  ::PAYLOAD::classification _internal_classification() const;
  void _internal_set_classification(::PAYLOAD::classification value);
  public:

  // .PAYLOAD.gender gender = 6;
  void clear_gender();
  ::PAYLOAD::gender gender() const;
  void set_gender(::PAYLOAD::gender value);
  private:
  ::PAYLOAD::gender _internal_gender() const;
  void _internal_set_gender(::PAYLOAD::gender value);
  public:

  // int32 power = 7;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.batting_style batting_style = 8;
  void clear_batting_style();
  ::PAYLOAD::batting_style batting_style() const;
  void set_batting_style(::PAYLOAD::batting_style value);
  private:
  ::PAYLOAD::batting_style _internal_batting_style() const;
  void _internal_set_batting_style(::PAYLOAD::batting_style value);
  public:

  // .PAYLOAD.bowling_style bowling_style = 9;
  void clear_bowling_style();
  ::PAYLOAD::bowling_style bowling_style() const;
  void set_bowling_style(::PAYLOAD::bowling_style value);
  private:
  ::PAYLOAD::bowling_style _internal_bowling_style() const;
  void _internal_set_bowling_style(::PAYLOAD::bowling_style value);
  public:

  // int32 level = 10;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lineup_number = 11;
  void clear_lineup_number();
  ::PROTOBUF_NAMESPACE_ID::int32 lineup_number() const;
  void set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lineup_number() const;
  void _internal_set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_out = 12;
  void clear_is_out();
  bool is_out() const;
  void set_is_out(bool value);
  private:
  bool _internal_is_out() const;
  void _internal_set_is_out(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > equipment_slots_;
  mutable std::atomic<int> _equipment_slots_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > props_;
  mutable std::atomic<int> _props_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > passives_;
  mutable std::atomic<int> _passives_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 character_id_;
  int rarity_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_number_;
  int classification_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  int batting_style_;
  int bowling_style_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 lineup_number_;
  bool is_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class Inning PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.Inning) */ {
 public:
  inline Inning() : Inning(nullptr) {};
  virtual ~Inning();

  Inning(const Inning& from);
  Inning(Inning&& from) noexcept
    : Inning() {
    *this = ::std::move(from);
  }

  inline Inning& operator=(const Inning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inning& operator=(Inning&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Inning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inning* internal_default_instance() {
    return reinterpret_cast<const Inning*>(
               &_Inning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Inning& a, Inning& b) {
    a.Swap(&b);
  }
  inline void Swap(Inning* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inning* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Inning* New() const final {
    return CreateMaybeMessage<Inning>(nullptr);
  }

  Inning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Inning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Inning& from);
  void MergeFrom(const Inning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.Inning";
  }
  protected:
  explicit Inning(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInningFieldNumber = 1,
    kRunsFieldNumber = 2,
    kBallsFieldNumber = 3,
    kWicketsFieldNumber = 4,
    kOverNumberFieldNumber = 5,
  };
  // .PAYLOAD.Innings inning = 1;
  void clear_inning();
  ::PAYLOAD::Innings inning() const;
  void set_inning(::PAYLOAD::Innings value);
  private:
  ::PAYLOAD::Innings _internal_inning() const;
  void _internal_set_inning(::PAYLOAD::Innings value);
  public:

  // int32 runs = 2;
  void clear_runs();
  ::PROTOBUF_NAMESPACE_ID::int32 runs() const;
  void set_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runs() const;
  void _internal_set_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 balls = 3;
  void clear_balls();
  ::PROTOBUF_NAMESPACE_ID::int32 balls() const;
  void set_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_balls() const;
  void _internal_set_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wickets = 4;
  void clear_wickets();
  ::PROTOBUF_NAMESPACE_ID::int32 wickets() const;
  void set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wickets() const;
  void _internal_set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 over_number = 5;
  void clear_over_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_number() const;
  void set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_number() const;
  void _internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.Inning)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int inning_;
  ::PROTOBUF_NAMESPACE_ID::int32 runs_;
  ::PROTOBUF_NAMESPACE_ID::int32 balls_;
  ::PROTOBUF_NAMESPACE_ID::int32 wickets_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class Match PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.Match) */ {
 public:
  inline Match() : Match(nullptr) {};
  virtual ~Match();

  Match(const Match& from);
  Match(Match&& from) noexcept
    : Match() {
    *this = ::std::move(from);
  }

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match& operator=(Match&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Match& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Match* internal_default_instance() {
    return reinterpret_cast<const Match*>(
               &_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Match& a, Match& b) {
    a.Swap(&b);
  }
  inline void Swap(Match* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Match* New() const final {
    return CreateMaybeMessage<Match>(nullptr);
  }

  Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Match>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.Match";
  }
  protected:
  explicit Match(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersInfoFieldNumber = 2,
    kMissedResultsFieldNumber = 12,
    kMatchIdFieldNumber = 1,
    kWinnerTeamFieldNumber = 18,
    kCurrentInningFieldNumber = 3,
    kPreviousInningFieldNumber = 4,
    kCurrentBallFieldNumber = 5,
    kOnStrikeFieldNumber = 6,
    kOffStrikeFieldNumber = 7,
    kBowlerFieldNumber = 8,
    kPreviousEventFieldNumber = 9,
    kActiveBowlerSaFieldNumber = 10,
    kActiveBatsmanSaFieldNumber = 11,
    kCurrentStateFieldNumber = 13,
    kExpectedEventFieldNumber = 14,
    kSelectionTimeoutFieldNumber = 15,
    kPlayerSelectionTimeoutFieldNumber = 16,
    kBufferForSelectionTimeoutFieldNumber = 17,
    kSelectionTimeRemainingFieldNumber = 19,
    kReconnectionCountFieldNumber = 20,
  };
  // repeated .PAYLOAD.UserInfo usersInfo = 2;
  int usersinfo_size() const;
  private:
  int _internal_usersinfo_size() const;
  public:
  void clear_usersinfo();
  ::PAYLOAD::UserInfo* mutable_usersinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::UserInfo >*
      mutable_usersinfo();
  private:
  const ::PAYLOAD::UserInfo& _internal_usersinfo(int index) const;
  ::PAYLOAD::UserInfo* _internal_add_usersinfo();
  public:
  const ::PAYLOAD::UserInfo& usersinfo(int index) const;
  ::PAYLOAD::UserInfo* add_usersinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::UserInfo >&
      usersinfo() const;

  // repeated .PAYLOAD.TResult missed_results = 12;
  int missed_results_size() const;
  private:
  int _internal_missed_results_size() const;
  public:
  void clear_missed_results();
  ::PAYLOAD::TResult* mutable_missed_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TResult >*
      mutable_missed_results();
  private:
  const ::PAYLOAD::TResult& _internal_missed_results(int index) const;
  ::PAYLOAD::TResult* _internal_add_missed_results();
  public:
  const ::PAYLOAD::TResult& missed_results(int index) const;
  ::PAYLOAD::TResult* add_missed_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TResult >&
      missed_results() const;

  // string matchId = 1;
  void clear_matchid();
  const std::string& matchid() const;
  void set_matchid(const std::string& value);
  void set_matchid(std::string&& value);
  void set_matchid(const char* value);
  void set_matchid(const char* value, size_t size);
  std::string* mutable_matchid();
  std::string* release_matchid();
  void set_allocated_matchid(std::string* matchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_matchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_matchid(
      std::string* matchid);
  private:
  const std::string& _internal_matchid() const;
  void _internal_set_matchid(const std::string& value);
  std::string* _internal_mutable_matchid();
  public:

  // string winner_team = 18;
  void clear_winner_team();
  const std::string& winner_team() const;
  void set_winner_team(const std::string& value);
  void set_winner_team(std::string&& value);
  void set_winner_team(const char* value);
  void set_winner_team(const char* value, size_t size);
  std::string* mutable_winner_team();
  std::string* release_winner_team();
  void set_allocated_winner_team(std::string* winner_team);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_winner_team();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_winner_team(
      std::string* winner_team);
  private:
  const std::string& _internal_winner_team() const;
  void _internal_set_winner_team(const std::string& value);
  std::string* _internal_mutable_winner_team();
  public:

  // .PAYLOAD.Inning currentInning = 3;
  bool has_currentinning() const;
  private:
  bool _internal_has_currentinning() const;
  public:
  void clear_currentinning();
  const ::PAYLOAD::Inning& currentinning() const;
  ::PAYLOAD::Inning* release_currentinning();
  ::PAYLOAD::Inning* mutable_currentinning();
  void set_allocated_currentinning(::PAYLOAD::Inning* currentinning);
  private:
  const ::PAYLOAD::Inning& _internal_currentinning() const;
  ::PAYLOAD::Inning* _internal_mutable_currentinning();
  public:
  void unsafe_arena_set_allocated_currentinning(
      ::PAYLOAD::Inning* currentinning);
  ::PAYLOAD::Inning* unsafe_arena_release_currentinning();

  // .PAYLOAD.Inning previousInning = 4;
  bool has_previousinning() const;
  private:
  bool _internal_has_previousinning() const;
  public:
  void clear_previousinning();
  const ::PAYLOAD::Inning& previousinning() const;
  ::PAYLOAD::Inning* release_previousinning();
  ::PAYLOAD::Inning* mutable_previousinning();
  void set_allocated_previousinning(::PAYLOAD::Inning* previousinning);
  private:
  const ::PAYLOAD::Inning& _internal_previousinning() const;
  ::PAYLOAD::Inning* _internal_mutable_previousinning();
  public:
  void unsafe_arena_set_allocated_previousinning(
      ::PAYLOAD::Inning* previousinning);
  ::PAYLOAD::Inning* unsafe_arena_release_previousinning();

  // .PAYLOAD.CurrentBall current_ball = 5;
  bool has_current_ball() const;
  private:
  bool _internal_has_current_ball() const;
  public:
  void clear_current_ball();
  const ::PAYLOAD::CurrentBall& current_ball() const;
  ::PAYLOAD::CurrentBall* release_current_ball();
  ::PAYLOAD::CurrentBall* mutable_current_ball();
  void set_allocated_current_ball(::PAYLOAD::CurrentBall* current_ball);
  private:
  const ::PAYLOAD::CurrentBall& _internal_current_ball() const;
  ::PAYLOAD::CurrentBall* _internal_mutable_current_ball();
  public:
  void unsafe_arena_set_allocated_current_ball(
      ::PAYLOAD::CurrentBall* current_ball);
  ::PAYLOAD::CurrentBall* unsafe_arena_release_current_ball();

  // int32 on_strike = 6;
  void clear_on_strike();
  ::PROTOBUF_NAMESPACE_ID::int32 on_strike() const;
  void set_on_strike(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_on_strike() const;
  void _internal_set_on_strike(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 off_strike = 7;
  void clear_off_strike();
  ::PROTOBUF_NAMESPACE_ID::int32 off_strike() const;
  void set_off_strike(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_off_strike() const;
  void _internal_set_off_strike(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bowler = 8;
  void clear_bowler();
  ::PROTOBUF_NAMESPACE_ID::int32 bowler() const;
  void set_bowler(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bowler() const;
  void _internal_set_bowler(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.Events previous_event = 9;
  void clear_previous_event();
  ::PAYLOAD::Events previous_event() const;
  void set_previous_event(::PAYLOAD::Events value);
  private:
  ::PAYLOAD::Events _internal_previous_event() const;
  void _internal_set_previous_event(::PAYLOAD::Events value);
  public:

  // int32 active_bowler_sa = 10;
  void clear_active_bowler_sa();
  ::PROTOBUF_NAMESPACE_ID::int32 active_bowler_sa() const;
  void set_active_bowler_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_bowler_sa() const;
  void _internal_set_active_bowler_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 active_batsman_sa = 11;
  void clear_active_batsman_sa();
  ::PROTOBUF_NAMESPACE_ID::int32 active_batsman_sa() const;
  void set_active_batsman_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_batsman_sa() const;
  void _internal_set_active_batsman_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.MatchStates current_state = 13;
  void clear_current_state();
  ::PAYLOAD::MatchStates current_state() const;
  void set_current_state(::PAYLOAD::MatchStates value);
  private:
  ::PAYLOAD::MatchStates _internal_current_state() const;
  void _internal_set_current_state(::PAYLOAD::MatchStates value);
  public:

  // .PAYLOAD.Events expected_event = 14;
  void clear_expected_event();
  ::PAYLOAD::Events expected_event() const;
  void set_expected_event(::PAYLOAD::Events value);
  private:
  ::PAYLOAD::Events _internal_expected_event() const;
  void _internal_set_expected_event(::PAYLOAD::Events value);
  public:

  // int32 selection_timeout = 15;
  void clear_selection_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 selection_timeout() const;
  void set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selection_timeout() const;
  void _internal_set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_selection_timeout = 16;
  void clear_player_selection_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 player_selection_timeout() const;
  void set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_selection_timeout() const;
  void _internal_set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buffer_for_selection_timeout = 17;
  void clear_buffer_for_selection_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_for_selection_timeout() const;
  void set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_for_selection_timeout() const;
  void _internal_set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 selection_time_remaining = 19;
  void clear_selection_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 selection_time_remaining() const;
  void set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_selection_time_remaining() const;
  void _internal_set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reconnection_count = 20;
  void clear_reconnection_count();
  ::PROTOBUF_NAMESPACE_ID::int32 reconnection_count() const;
  void set_reconnection_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reconnection_count() const;
  void _internal_set_reconnection_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.Match)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::UserInfo > usersinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TResult > missed_results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr winner_team_;
  ::PAYLOAD::Inning* currentinning_;
  ::PAYLOAD::Inning* previousinning_;
  ::PAYLOAD::CurrentBall* current_ball_;
  ::PROTOBUF_NAMESPACE_ID::int32 on_strike_;
  ::PROTOBUF_NAMESPACE_ID::int32 off_strike_;
  ::PROTOBUF_NAMESPACE_ID::int32 bowler_;
  int previous_event_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_bowler_sa_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_batsman_sa_;
  int current_state_;
  int expected_event_;
  ::PROTOBUF_NAMESPACE_ID::int32 selection_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_selection_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_for_selection_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 selection_time_remaining_;
  ::PROTOBUF_NAMESPACE_ID::int32 reconnection_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {};
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineupInfoFieldNumber = 3,
    kIdFieldNumber = 1,
    kPlayStateFieldNumber = 2,
    kTotalMissesFieldNumber = 4,
    kActivatedSaFieldNumber = 5,
    kSaDurationFieldNumber = 6,
    kSaTotalDurationFieldNumber = 7,
    kManaFillFieldNumber = 8,
  };
  // repeated .PAYLOAD.PlayerInfo lineup_info = 3;
  int lineup_info_size() const;
  private:
  int _internal_lineup_info_size() const;
  public:
  void clear_lineup_info();
  ::PAYLOAD::PlayerInfo* mutable_lineup_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PlayerInfo >*
      mutable_lineup_info();
  private:
  const ::PAYLOAD::PlayerInfo& _internal_lineup_info(int index) const;
  ::PAYLOAD::PlayerInfo* _internal_add_lineup_info();
  public:
  const ::PAYLOAD::PlayerInfo& lineup_info(int index) const;
  ::PAYLOAD::PlayerInfo* add_lineup_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PlayerInfo >&
      lineup_info() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .PAYLOAD.PlayStates play_state = 2;
  void clear_play_state();
  ::PAYLOAD::PlayStates play_state() const;
  void set_play_state(::PAYLOAD::PlayStates value);
  private:
  ::PAYLOAD::PlayStates _internal_play_state() const;
  void _internal_set_play_state(::PAYLOAD::PlayStates value);
  public:

  // int32 total_misses = 4;
  void clear_total_misses();
  ::PROTOBUF_NAMESPACE_ID::int32 total_misses() const;
  void set_total_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_misses() const;
  void _internal_set_total_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activated_sa = 5;
  void clear_activated_sa();
  ::PROTOBUF_NAMESPACE_ID::int32 activated_sa() const;
  void set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activated_sa() const;
  void _internal_set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sa_duration = 6;
  void clear_sa_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 sa_duration() const;
  void set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sa_duration() const;
  void _internal_set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sa_total_duration = 7;
  void clear_sa_total_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 sa_total_duration() const;
  void set_sa_total_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sa_total_duration() const;
  void _internal_set_sa_total_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mana_fill = 8;
  void clear_mana_fill();
  ::PROTOBUF_NAMESPACE_ID::int32 mana_fill() const;
  void set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mana_fill() const;
  void _internal_set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PlayerInfo > lineup_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int play_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_misses_;
  ::PROTOBUF_NAMESPACE_ID::int32 activated_sa_;
  ::PROTOBUF_NAMESPACE_ID::int32 sa_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 sa_total_duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 mana_fill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {};
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return CreateMaybeMessage<PlayerInfo>(nullptr);
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineupNumberFieldNumber = 1,
    kOutFieldNumber = 2,
    kPlayedFieldNumber = 3,
    kRunsScoredFieldNumber = 4,
    kBallsFacedFieldNumber = 5,
    kWicketsTakenFieldNumber = 6,
    kBallsBowledFieldNumber = 7,
    kRunsConcededFieldNumber = 8,
  };
  // int32 lineup_number = 1;
  void clear_lineup_number();
  ::PROTOBUF_NAMESPACE_ID::int32 lineup_number() const;
  void set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lineup_number() const;
  void _internal_set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool out = 2;
  void clear_out();
  bool out() const;
  void set_out(bool value);
  private:
  bool _internal_out() const;
  void _internal_set_out(bool value);
  public:

  // bool played = 3;
  void clear_played();
  bool played() const;
  void set_played(bool value);
  private:
  bool _internal_played() const;
  void _internal_set_played(bool value);
  public:

  // int32 runs_scored = 4;
  void clear_runs_scored();
  ::PROTOBUF_NAMESPACE_ID::int32 runs_scored() const;
  void set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runs_scored() const;
  void _internal_set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 balls_faced = 5;
  void clear_balls_faced();
  ::PROTOBUF_NAMESPACE_ID::int32 balls_faced() const;
  void set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_balls_faced() const;
  void _internal_set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wickets_taken = 6;
  void clear_wickets_taken();
  ::PROTOBUF_NAMESPACE_ID::int32 wickets_taken() const;
  void set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wickets_taken() const;
  void _internal_set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 balls_bowled = 7;
  void clear_balls_bowled();
  ::PROTOBUF_NAMESPACE_ID::int32 balls_bowled() const;
  void set_balls_bowled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_balls_bowled() const;
  void _internal_set_balls_bowled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 runs_conceded = 8;
  void clear_runs_conceded();
  ::PROTOBUF_NAMESPACE_ID::int32 runs_conceded() const;
  void set_runs_conceded(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runs_conceded() const;
  void _internal_set_runs_conceded(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 lineup_number_;
  bool out_;
  bool played_;
  ::PROTOBUF_NAMESPACE_ID::int32 runs_scored_;
  ::PROTOBUF_NAMESPACE_ID::int32 balls_faced_;
  ::PROTOBUF_NAMESPACE_ID::int32 wickets_taken_;
  ::PROTOBUF_NAMESPACE_ID::int32 balls_bowled_;
  ::PROTOBUF_NAMESPACE_ID::int32 runs_conceded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class CurrentBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PAYLOAD.CurrentBall) */ {
 public:
  inline CurrentBall() : CurrentBall(nullptr) {};
  virtual ~CurrentBall();

  CurrentBall(const CurrentBall& from);
  CurrentBall(CurrentBall&& from) noexcept
    : CurrentBall() {
    *this = ::std::move(from);
  }

  inline CurrentBall& operator=(const CurrentBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentBall& operator=(CurrentBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrentBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentBall* internal_default_instance() {
    return reinterpret_cast<const CurrentBall*>(
               &_CurrentBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CurrentBall& a, CurrentBall& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentBall* New() const final {
    return CreateMaybeMessage<CurrentBall>(nullptr);
  }

  CurrentBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrentBall& from);
  void MergeFrom(const CurrentBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PAYLOAD.CurrentBall";
  }
  protected:
  explicit CurrentBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBallsFieldNumber = 2,
    kShotsFieldNumber = 3,
    kShotSelectedFieldNumber = 5,
    kResultFieldNumber = 6,
    kOverBallNumberFieldNumber = 1,
    kBallIdFieldNumber = 4,
  };
  // repeated .PAYLOAD.TBall balls = 2;
  int balls_size() const;
  private:
  int _internal_balls_size() const;
  public:
  void clear_balls();
  ::PAYLOAD::TBall* mutable_balls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >*
      mutable_balls();
  private:
  const ::PAYLOAD::TBall& _internal_balls(int index) const;
  ::PAYLOAD::TBall* _internal_add_balls();
  public:
  const ::PAYLOAD::TBall& balls(int index) const;
  ::PAYLOAD::TBall* add_balls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >&
      balls() const;

  // repeated .PAYLOAD.TShot shots = 3;
  int shots_size() const;
  private:
  int _internal_shots_size() const;
  public:
  void clear_shots();
  ::PAYLOAD::TShot* mutable_shots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >*
      mutable_shots();
  private:
  const ::PAYLOAD::TShot& _internal_shots(int index) const;
  ::PAYLOAD::TShot* _internal_add_shots();
  public:
  const ::PAYLOAD::TShot& shots(int index) const;
  ::PAYLOAD::TShot* add_shots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >&
      shots() const;

  // .PAYLOAD.TShot shot_selected = 5;
  bool has_shot_selected() const;
  private:
  bool _internal_has_shot_selected() const;
  public:
  void clear_shot_selected();
  const ::PAYLOAD::TShot& shot_selected() const;
  ::PAYLOAD::TShot* release_shot_selected();
  ::PAYLOAD::TShot* mutable_shot_selected();
  void set_allocated_shot_selected(::PAYLOAD::TShot* shot_selected);
  private:
  const ::PAYLOAD::TShot& _internal_shot_selected() const;
  ::PAYLOAD::TShot* _internal_mutable_shot_selected();
  public:
  void unsafe_arena_set_allocated_shot_selected(
      ::PAYLOAD::TShot* shot_selected);
  ::PAYLOAD::TShot* unsafe_arena_release_shot_selected();

  // .PAYLOAD.TResult result = 6;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::PAYLOAD::TResult& result() const;
  ::PAYLOAD::TResult* release_result();
  ::PAYLOAD::TResult* mutable_result();
  void set_allocated_result(::PAYLOAD::TResult* result);
  private:
  const ::PAYLOAD::TResult& _internal_result() const;
  ::PAYLOAD::TResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::PAYLOAD::TResult* result);
  ::PAYLOAD::TResult* unsafe_arena_release_result();

  // int32 over_ball_number = 1;
  void clear_over_ball_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number() const;
  void set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_ball_number() const;
  void _internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ball_id = 4;
  void clear_ball_id();
  ::PROTOBUF_NAMESPACE_ID::int32 ball_id() const;
  void set_ball_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ball_id() const;
  void _internal_set_ball_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PAYLOAD.CurrentBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall > balls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot > shots_;
  ::PAYLOAD::TShot* shot_selected_;
  ::PAYLOAD::TResult* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 ball_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Payload

// .PAYLOAD.Events event = 1;
inline void Payload::clear_event() {
  event_ = 0;
}
inline ::PAYLOAD::Events Payload::_internal_event() const {
  return static_cast< ::PAYLOAD::Events >(event_);
}
inline ::PAYLOAD::Events Payload::event() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.event)
  return _internal_event();
}
inline void Payload::_internal_set_event(::PAYLOAD::Events value) {
  
  event_ = value;
}
inline void Payload::set_event(::PAYLOAD::Events value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Payload.event)
}

// .PAYLOAD.UserData data = 2;
inline bool Payload::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Payload::has_data() const {
  return _internal_has_data();
}
inline void Payload::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::PAYLOAD::UserData& Payload::_internal_data() const {
  const ::PAYLOAD::UserData* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::UserData*>(
      &::PAYLOAD::_UserData_default_instance_);
}
inline const ::PAYLOAD::UserData& Payload::data() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.data)
  return _internal_data();
}
inline void Payload::unsafe_arena_set_allocated_data(
    ::PAYLOAD::UserData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Payload.data)
}
inline ::PAYLOAD::UserData* Payload::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::UserData* Payload::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Payload.data)
  
  ::PAYLOAD::UserData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PAYLOAD::UserData* Payload::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::UserData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::PAYLOAD::UserData* Payload::mutable_data() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Payload.data)
  return _internal_mutable_data();
}
inline void Payload::set_allocated_data(::PAYLOAD::UserData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Payload.data)
}

// .PAYLOAD.TurnState turn = 3;
inline void Payload::clear_turn() {
  turn_ = 0;
}
inline ::PAYLOAD::TurnState Payload::_internal_turn() const {
  return static_cast< ::PAYLOAD::TurnState >(turn_);
}
inline ::PAYLOAD::TurnState Payload::turn() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.turn)
  return _internal_turn();
}
inline void Payload::_internal_set_turn(::PAYLOAD::TurnState value) {
  
  turn_ = value;
}
inline void Payload::set_turn(::PAYLOAD::TurnState value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Payload.turn)
}

// .PAYLOAD.Match match_state = 4;
inline bool Payload::_internal_has_match_state() const {
  return this != internal_default_instance() && match_state_ != nullptr;
}
inline bool Payload::has_match_state() const {
  return _internal_has_match_state();
}
inline void Payload::clear_match_state() {
  if (GetArena() == nullptr && match_state_ != nullptr) {
    delete match_state_;
  }
  match_state_ = nullptr;
}
inline const ::PAYLOAD::Match& Payload::_internal_match_state() const {
  const ::PAYLOAD::Match* p = match_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::Match*>(
      &::PAYLOAD::_Match_default_instance_);
}
inline const ::PAYLOAD::Match& Payload::match_state() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.match_state)
  return _internal_match_state();
}
inline void Payload::unsafe_arena_set_allocated_match_state(
    ::PAYLOAD::Match* match_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_state_);
  }
  match_state_ = match_state;
  if (match_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Payload.match_state)
}
inline ::PAYLOAD::Match* Payload::release_match_state() {
  auto temp = unsafe_arena_release_match_state();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::Match* Payload::unsafe_arena_release_match_state() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Payload.match_state)
  
  ::PAYLOAD::Match* temp = match_state_;
  match_state_ = nullptr;
  return temp;
}
inline ::PAYLOAD::Match* Payload::_internal_mutable_match_state() {
  
  if (match_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::Match>(GetArena());
    match_state_ = p;
  }
  return match_state_;
}
inline ::PAYLOAD::Match* Payload::mutable_match_state() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Payload.match_state)
  return _internal_mutable_match_state();
}
inline void Payload::set_allocated_match_state(::PAYLOAD::Match* match_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete match_state_;
  }
  if (match_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_state);
    if (message_arena != submessage_arena) {
      match_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_state, submessage_arena);
    }
    
  } else {
    
  }
  match_state_ = match_state;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Payload.match_state)
}

// .PAYLOAD.Emoji emoji = 5;
inline void Payload::clear_emoji() {
  emoji_ = 0;
}
inline ::PAYLOAD::Emoji Payload::_internal_emoji() const {
  return static_cast< ::PAYLOAD::Emoji >(emoji_);
}
inline ::PAYLOAD::Emoji Payload::emoji() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.emoji)
  return _internal_emoji();
}
inline void Payload::_internal_set_emoji(::PAYLOAD::Emoji value) {
  
  emoji_ = value;
}
inline void Payload::set_emoji(::PAYLOAD::Emoji value) {
  _internal_set_emoji(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Payload.emoji)
}

// .PAYLOAD.Messaging message = 6;
inline void Payload::clear_message() {
  message_ = 0;
}
inline ::PAYLOAD::Messaging Payload::_internal_message() const {
  return static_cast< ::PAYLOAD::Messaging >(message_);
}
inline ::PAYLOAD::Messaging Payload::message() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.message)
  return _internal_message();
}
inline void Payload::_internal_set_message(::PAYLOAD::Messaging value) {
  
  message_ = value;
}
inline void Payload::set_message(::PAYLOAD::Messaging value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Payload.message)
}

// .PAYLOAD.Version version = 7;
inline bool Payload::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool Payload::has_version() const {
  return _internal_has_version();
}
inline void Payload::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::PAYLOAD::Version& Payload::_internal_version() const {
  const ::PAYLOAD::Version* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::Version*>(
      &::PAYLOAD::_Version_default_instance_);
}
inline const ::PAYLOAD::Version& Payload::version() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.version)
  return _internal_version();
}
inline void Payload::unsafe_arena_set_allocated_version(
    ::PAYLOAD::Version* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Payload.version)
}
inline ::PAYLOAD::Version* Payload::release_version() {
  auto temp = unsafe_arena_release_version();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::Version* Payload::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Payload.version)
  
  ::PAYLOAD::Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::PAYLOAD::Version* Payload::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::Version>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::PAYLOAD::Version* Payload::mutable_version() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Payload.version)
  return _internal_mutable_version();
}
inline void Payload::set_allocated_version(::PAYLOAD::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Payload.version)
}

// .PAYLOAD.TeamPosition for_team = 8;
inline void Payload::clear_for_team() {
  for_team_ = 0;
}
inline ::PAYLOAD::TeamPosition Payload::_internal_for_team() const {
  return static_cast< ::PAYLOAD::TeamPosition >(for_team_);
}
inline ::PAYLOAD::TeamPosition Payload::for_team() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Payload.for_team)
  return _internal_for_team();
}
inline void Payload::_internal_set_for_team(::PAYLOAD::TeamPosition value) {
  
  for_team_ = value;
}
inline void Payload::set_for_team(::PAYLOAD::TeamPosition value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Payload.for_team)
}

// -------------------------------------------------------------------

// Version

// int32 major = 1;
inline void Version::clear_major() {
  major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_major() const {
  return major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::major() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Version.major)
  return _internal_major();
}
inline void Version::_internal_set_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  major_ = value;
}
inline void Version::set_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Version.major)
}

// int32 minor = 2;
inline void Version::clear_minor() {
  minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_minor() const {
  return minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::minor() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Version.minor)
  return _internal_minor();
}
inline void Version::_internal_set_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minor_ = value;
}
inline void Version::set_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Version.minor)
}

// int32 patch = 3;
inline void Version::clear_patch() {
  patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::_internal_patch() const {
  return patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Version::patch() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Version.patch)
  return _internal_patch();
}
inline void Version::_internal_set_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  patch_ = value;
}
inline void Version::set_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Version.patch)
}

// -------------------------------------------------------------------

// UserData

// string userId = 1;
inline void UserData::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserData::userid() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.userId)
  return _internal_userid();
}
inline void UserData::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.userId)
}
inline std::string* UserData::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.userId)
  return _internal_mutable_userid();
}
inline const std::string& UserData::_internal_userid() const {
  return userid_.Get();
}
inline void UserData::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserData::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.UserData.userId)
}
inline void UserData::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.UserData.userId)
}
inline void UserData::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.UserData.userId)
}
inline std::string* UserData::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserData::release_userid() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.userId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserData::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.userId)
}
inline std::string* UserData::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.UserData.userId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserData::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.userId)
}

// string roomId = 2;
inline void UserData::clear_roomid() {
  roomid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserData::roomid() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.roomId)
  return _internal_roomid();
}
inline void UserData::set_roomid(const std::string& value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.roomId)
}
inline std::string* UserData::mutable_roomid() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.roomId)
  return _internal_mutable_roomid();
}
inline const std::string& UserData::_internal_roomid() const {
  return roomid_.Get();
}
inline void UserData::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserData::set_roomid(std::string&& value) {
  
  roomid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.UserData.roomId)
}
inline void UserData::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.UserData.roomId)
}
inline void UserData::set_roomid(const char* value,
    size_t size) {
  
  roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.UserData.roomId)
}
inline std::string* UserData::_internal_mutable_roomid() {
  
  return roomid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserData::release_roomid() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.roomId)
  return roomid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserData::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.roomId)
}
inline std::string* UserData::unsafe_arena_release_roomid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.UserData.roomId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roomid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserData::unsafe_arena_set_allocated_roomid(
    std::string* roomid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.roomId)
}

// string opponentId = 3;
inline void UserData::clear_opponentid() {
  opponentid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserData::opponentid() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.opponentId)
  return _internal_opponentid();
}
inline void UserData::set_opponentid(const std::string& value) {
  _internal_set_opponentid(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.opponentId)
}
inline std::string* UserData::mutable_opponentid() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.opponentId)
  return _internal_mutable_opponentid();
}
inline const std::string& UserData::_internal_opponentid() const {
  return opponentid_.Get();
}
inline void UserData::_internal_set_opponentid(const std::string& value) {
  
  opponentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserData::set_opponentid(std::string&& value) {
  
  opponentid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.UserData.opponentId)
}
inline void UserData::set_opponentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opponentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.UserData.opponentId)
}
inline void UserData::set_opponentid(const char* value,
    size_t size) {
  
  opponentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.UserData.opponentId)
}
inline std::string* UserData::_internal_mutable_opponentid() {
  
  return opponentid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserData::release_opponentid() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.opponentId)
  return opponentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserData::set_allocated_opponentid(std::string* opponentid) {
  if (opponentid != nullptr) {
    
  } else {
    
  }
  opponentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opponentid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.opponentId)
}
inline std::string* UserData::unsafe_arena_release_opponentid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.UserData.opponentId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return opponentid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserData::unsafe_arena_set_allocated_opponentid(
    std::string* opponentid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (opponentid != nullptr) {
    
  } else {
    
  }
  opponentid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      opponentid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.opponentId)
}

// string msg = 4;
inline void UserData::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserData::msg() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.msg)
  return _internal_msg();
}
inline void UserData::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.msg)
}
inline std::string* UserData::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.msg)
  return _internal_mutable_msg();
}
inline const std::string& UserData::_internal_msg() const {
  return msg_.Get();
}
inline void UserData::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserData::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.UserData.msg)
}
inline void UserData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.UserData.msg)
}
inline void UserData::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.UserData.msg)
}
inline std::string* UserData::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserData::release_msg() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserData::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.msg)
}
inline std::string* UserData::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.UserData.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserData::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.msg)
}

// repeated .PAYLOAD.Player home_lineup = 5;
inline int UserData::_internal_home_lineup_size() const {
  return home_lineup_.size();
}
inline int UserData::home_lineup_size() const {
  return _internal_home_lineup_size();
}
inline void UserData::clear_home_lineup() {
  home_lineup_.Clear();
}
inline ::PAYLOAD::Player* UserData::mutable_home_lineup(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.home_lineup)
  return home_lineup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
UserData::mutable_home_lineup() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.home_lineup)
  return &home_lineup_;
}
inline const ::PAYLOAD::Player& UserData::_internal_home_lineup(int index) const {
  return home_lineup_.Get(index);
}
inline const ::PAYLOAD::Player& UserData::home_lineup(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.home_lineup)
  return _internal_home_lineup(index);
}
inline ::PAYLOAD::Player* UserData::_internal_add_home_lineup() {
  return home_lineup_.Add();
}
inline ::PAYLOAD::Player* UserData::add_home_lineup() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.home_lineup)
  return _internal_add_home_lineup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
UserData::home_lineup() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.home_lineup)
  return home_lineup_;
}

// repeated .PAYLOAD.Player away_lineup = 6;
inline int UserData::_internal_away_lineup_size() const {
  return away_lineup_.size();
}
inline int UserData::away_lineup_size() const {
  return _internal_away_lineup_size();
}
inline void UserData::clear_away_lineup() {
  away_lineup_.Clear();
}
inline ::PAYLOAD::Player* UserData::mutable_away_lineup(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.away_lineup)
  return away_lineup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
UserData::mutable_away_lineup() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.away_lineup)
  return &away_lineup_;
}
inline const ::PAYLOAD::Player& UserData::_internal_away_lineup(int index) const {
  return away_lineup_.Get(index);
}
inline const ::PAYLOAD::Player& UserData::away_lineup(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.away_lineup)
  return _internal_away_lineup(index);
}
inline ::PAYLOAD::Player* UserData::_internal_add_away_lineup() {
  return away_lineup_.Add();
}
inline ::PAYLOAD::Player* UserData::add_away_lineup() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.away_lineup)
  return _internal_add_away_lineup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
UserData::away_lineup() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.away_lineup)
  return away_lineup_;
}

// .PAYLOAD.PlayStates playState = 7;
inline void UserData::clear_playstate() {
  playstate_ = 0;
}
inline ::PAYLOAD::PlayStates UserData::_internal_playstate() const {
  return static_cast< ::PAYLOAD::PlayStates >(playstate_);
}
inline ::PAYLOAD::PlayStates UserData::playstate() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.playState)
  return _internal_playstate();
}
inline void UserData::_internal_set_playstate(::PAYLOAD::PlayStates value) {
  
  playstate_ = value;
}
inline void UserData::set_playstate(::PAYLOAD::PlayStates value) {
  _internal_set_playstate(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.playState)
}

// repeated int32 batsman_selected = 8;
inline int UserData::_internal_batsman_selected_size() const {
  return batsman_selected_.size();
}
inline int UserData::batsman_selected_size() const {
  return _internal_batsman_selected_size();
}
inline void UserData::clear_batsman_selected() {
  batsman_selected_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_batsman_selected(int index) const {
  return batsman_selected_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::batsman_selected(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.batsman_selected)
  return _internal_batsman_selected(index);
}
inline void UserData::set_batsman_selected(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  batsman_selected_.Set(index, value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.batsman_selected)
}
inline void UserData::_internal_add_batsman_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  batsman_selected_.Add(value);
}
inline void UserData::add_batsman_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_batsman_selected(value);
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.batsman_selected)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserData::_internal_batsman_selected() const {
  return batsman_selected_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserData::batsman_selected() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.batsman_selected)
  return _internal_batsman_selected();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserData::_internal_mutable_batsman_selected() {
  return &batsman_selected_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserData::mutable_batsman_selected() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.batsman_selected)
  return _internal_mutable_batsman_selected();
}

// int32 bowler_selected = 9;
inline void UserData::clear_bowler_selected() {
  bowler_selected_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_bowler_selected() const {
  return bowler_selected_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::bowler_selected() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.bowler_selected)
  return _internal_bowler_selected();
}
inline void UserData::_internal_set_bowler_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bowler_selected_ = value;
}
inline void UserData::set_bowler_selected(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bowler_selected(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.bowler_selected)
}

// repeated .PAYLOAD.TBall balls = 10;
inline int UserData::_internal_balls_size() const {
  return balls_.size();
}
inline int UserData::balls_size() const {
  return _internal_balls_size();
}
inline void UserData::clear_balls() {
  balls_.Clear();
}
inline ::PAYLOAD::TBall* UserData::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.balls)
  return balls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >*
UserData::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.balls)
  return &balls_;
}
inline const ::PAYLOAD::TBall& UserData::_internal_balls(int index) const {
  return balls_.Get(index);
}
inline const ::PAYLOAD::TBall& UserData::balls(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.balls)
  return _internal_balls(index);
}
inline ::PAYLOAD::TBall* UserData::_internal_add_balls() {
  return balls_.Add();
}
inline ::PAYLOAD::TBall* UserData::add_balls() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.balls)
  return _internal_add_balls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >&
UserData::balls() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.balls)
  return balls_;
}

// repeated .PAYLOAD.TShot shots = 11;
inline int UserData::_internal_shots_size() const {
  return shots_.size();
}
inline int UserData::shots_size() const {
  return _internal_shots_size();
}
inline void UserData::clear_shots() {
  shots_.Clear();
}
inline ::PAYLOAD::TShot* UserData::mutable_shots(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.shots)
  return shots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >*
UserData::mutable_shots() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.shots)
  return &shots_;
}
inline const ::PAYLOAD::TShot& UserData::_internal_shots(int index) const {
  return shots_.Get(index);
}
inline const ::PAYLOAD::TShot& UserData::shots(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.shots)
  return _internal_shots(index);
}
inline ::PAYLOAD::TShot* UserData::_internal_add_shots() {
  return shots_.Add();
}
inline ::PAYLOAD::TShot* UserData::add_shots() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.shots)
  return _internal_add_shots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >&
UserData::shots() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.shots)
  return shots_;
}

// int32 id = 12;
inline void UserData::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.id)
  return _internal_id();
}
inline void UserData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserData::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.id)
}

// int32 selected_onstrike_batsman_id = 13;
inline void UserData::clear_selected_onstrike_batsman_id() {
  selected_onstrike_batsman_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_selected_onstrike_batsman_id() const {
  return selected_onstrike_batsman_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::selected_onstrike_batsman_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.selected_onstrike_batsman_id)
  return _internal_selected_onstrike_batsman_id();
}
inline void UserData::_internal_set_selected_onstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selected_onstrike_batsman_id_ = value;
}
inline void UserData::set_selected_onstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selected_onstrike_batsman_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.selected_onstrike_batsman_id)
}

// int32 selected_offstrike_batsman_id = 14;
inline void UserData::clear_selected_offstrike_batsman_id() {
  selected_offstrike_batsman_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_selected_offstrike_batsman_id() const {
  return selected_offstrike_batsman_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::selected_offstrike_batsman_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.selected_offstrike_batsman_id)
  return _internal_selected_offstrike_batsman_id();
}
inline void UserData::_internal_set_selected_offstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selected_offstrike_batsman_id_ = value;
}
inline void UserData::set_selected_offstrike_batsman_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selected_offstrike_batsman_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.selected_offstrike_batsman_id)
}

// int32 selected_bowler_id = 15;
inline void UserData::clear_selected_bowler_id() {
  selected_bowler_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_selected_bowler_id() const {
  return selected_bowler_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::selected_bowler_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.selected_bowler_id)
  return _internal_selected_bowler_id();
}
inline void UserData::_internal_set_selected_bowler_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selected_bowler_id_ = value;
}
inline void UserData::set_selected_bowler_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selected_bowler_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.selected_bowler_id)
}

// .PAYLOAD.TResult result = 16;
inline bool UserData::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UserData::has_result() const {
  return _internal_has_result();
}
inline void UserData::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::PAYLOAD::TResult& UserData::_internal_result() const {
  const ::PAYLOAD::TResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::TResult*>(
      &::PAYLOAD::_TResult_default_instance_);
}
inline const ::PAYLOAD::TResult& UserData::result() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.result)
  return _internal_result();
}
inline void UserData::unsafe_arena_set_allocated_result(
    ::PAYLOAD::TResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.result)
}
inline ::PAYLOAD::TResult* UserData::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::TResult* UserData::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.result)
  
  ::PAYLOAD::TResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::PAYLOAD::TResult* UserData::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::TResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::PAYLOAD::TResult* UserData::mutable_result() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.result)
  return _internal_mutable_result();
}
inline void UserData::set_allocated_result(::PAYLOAD::TResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.result)
}

// int32 selection_timeout = 17;
inline void UserData::clear_selection_timeout() {
  selection_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_selection_timeout() const {
  return selection_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::selection_timeout() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.selection_timeout)
  return _internal_selection_timeout();
}
inline void UserData::_internal_set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selection_timeout_ = value;
}
inline void UserData::set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selection_timeout(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.selection_timeout)
}

// int32 player_selection_timeout = 18;
inline void UserData::clear_player_selection_timeout() {
  player_selection_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_player_selection_timeout() const {
  return player_selection_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::player_selection_timeout() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.player_selection_timeout)
  return _internal_player_selection_timeout();
}
inline void UserData::_internal_set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_selection_timeout_ = value;
}
inline void UserData::set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_selection_timeout(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.player_selection_timeout)
}

// int32 buffer_for_selection_timeout = 19;
inline void UserData::clear_buffer_for_selection_timeout() {
  buffer_for_selection_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_buffer_for_selection_timeout() const {
  return buffer_for_selection_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::buffer_for_selection_timeout() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.buffer_for_selection_timeout)
  return _internal_buffer_for_selection_timeout();
}
inline void UserData::_internal_set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffer_for_selection_timeout_ = value;
}
inline void UserData::set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffer_for_selection_timeout(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.buffer_for_selection_timeout)
}

// int32 ping_pong_timeout = 20;
inline void UserData::clear_ping_pong_timeout() {
  ping_pong_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_ping_pong_timeout() const {
  return ping_pong_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::ping_pong_timeout() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.ping_pong_timeout)
  return _internal_ping_pong_timeout();
}
inline void UserData::_internal_set_ping_pong_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ping_pong_timeout_ = value;
}
inline void UserData::set_ping_pong_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping_pong_timeout(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.ping_pong_timeout)
}

// int32 batsman_mana_filled = 21;
inline void UserData::clear_batsman_mana_filled() {
  batsman_mana_filled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_batsman_mana_filled() const {
  return batsman_mana_filled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::batsman_mana_filled() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.batsman_mana_filled)
  return _internal_batsman_mana_filled();
}
inline void UserData::_internal_set_batsman_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batsman_mana_filled_ = value;
}
inline void UserData::set_batsman_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batsman_mana_filled(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.batsman_mana_filled)
}

// int32 bowler_mana_filled = 22;
inline void UserData::clear_bowler_mana_filled() {
  bowler_mana_filled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_bowler_mana_filled() const {
  return bowler_mana_filled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::bowler_mana_filled() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.bowler_mana_filled)
  return _internal_bowler_mana_filled();
}
inline void UserData::_internal_set_bowler_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bowler_mana_filled_ = value;
}
inline void UserData::set_bowler_mana_filled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bowler_mana_filled(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.bowler_mana_filled)
}

// int32 activated_sa = 23;
inline void UserData::clear_activated_sa() {
  activated_sa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_activated_sa() const {
  return activated_sa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::activated_sa() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.activated_sa)
  return _internal_activated_sa();
}
inline void UserData::_internal_set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_sa_ = value;
}
inline void UserData::set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated_sa(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.activated_sa)
}

// int32 sa_duration = 24;
inline void UserData::clear_sa_duration() {
  sa_duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_sa_duration() const {
  return sa_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::sa_duration() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.sa_duration)
  return _internal_sa_duration();
}
inline void UserData::_internal_set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sa_duration_ = value;
}
inline void UserData::set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sa_duration(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.sa_duration)
}

// bool is_rps_active = 25;
inline void UserData::clear_is_rps_active() {
  is_rps_active_ = false;
}
inline bool UserData::_internal_is_rps_active() const {
  return is_rps_active_;
}
inline bool UserData::is_rps_active() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.is_rps_active)
  return _internal_is_rps_active();
}
inline void UserData::_internal_set_is_rps_active(bool value) {
  
  is_rps_active_ = value;
}
inline void UserData::set_is_rps_active(bool value) {
  _internal_set_is_rps_active(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.is_rps_active)
}

// repeated .PAYLOAD.PassiveInfo onstrike_passives_info = 26;
inline int UserData::_internal_onstrike_passives_info_size() const {
  return onstrike_passives_info_.size();
}
inline int UserData::onstrike_passives_info_size() const {
  return _internal_onstrike_passives_info_size();
}
inline void UserData::clear_onstrike_passives_info() {
  onstrike_passives_info_.Clear();
}
inline ::PAYLOAD::PassiveInfo* UserData::mutable_onstrike_passives_info(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.onstrike_passives_info)
  return onstrike_passives_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >*
UserData::mutable_onstrike_passives_info() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.onstrike_passives_info)
  return &onstrike_passives_info_;
}
inline const ::PAYLOAD::PassiveInfo& UserData::_internal_onstrike_passives_info(int index) const {
  return onstrike_passives_info_.Get(index);
}
inline const ::PAYLOAD::PassiveInfo& UserData::onstrike_passives_info(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.onstrike_passives_info)
  return _internal_onstrike_passives_info(index);
}
inline ::PAYLOAD::PassiveInfo* UserData::_internal_add_onstrike_passives_info() {
  return onstrike_passives_info_.Add();
}
inline ::PAYLOAD::PassiveInfo* UserData::add_onstrike_passives_info() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.onstrike_passives_info)
  return _internal_add_onstrike_passives_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >&
UserData::onstrike_passives_info() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.onstrike_passives_info)
  return onstrike_passives_info_;
}

// repeated .PAYLOAD.PassiveInfo offstrike_passives_info = 27;
inline int UserData::_internal_offstrike_passives_info_size() const {
  return offstrike_passives_info_.size();
}
inline int UserData::offstrike_passives_info_size() const {
  return _internal_offstrike_passives_info_size();
}
inline void UserData::clear_offstrike_passives_info() {
  offstrike_passives_info_.Clear();
}
inline ::PAYLOAD::PassiveInfo* UserData::mutable_offstrike_passives_info(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.offstrike_passives_info)
  return offstrike_passives_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >*
UserData::mutable_offstrike_passives_info() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.offstrike_passives_info)
  return &offstrike_passives_info_;
}
inline const ::PAYLOAD::PassiveInfo& UserData::_internal_offstrike_passives_info(int index) const {
  return offstrike_passives_info_.Get(index);
}
inline const ::PAYLOAD::PassiveInfo& UserData::offstrike_passives_info(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.offstrike_passives_info)
  return _internal_offstrike_passives_info(index);
}
inline ::PAYLOAD::PassiveInfo* UserData::_internal_add_offstrike_passives_info() {
  return offstrike_passives_info_.Add();
}
inline ::PAYLOAD::PassiveInfo* UserData::add_offstrike_passives_info() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.offstrike_passives_info)
  return _internal_add_offstrike_passives_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >&
UserData::offstrike_passives_info() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.offstrike_passives_info)
  return offstrike_passives_info_;
}

// repeated .PAYLOAD.PassiveInfo bowler_passives_info = 28;
inline int UserData::_internal_bowler_passives_info_size() const {
  return bowler_passives_info_.size();
}
inline int UserData::bowler_passives_info_size() const {
  return _internal_bowler_passives_info_size();
}
inline void UserData::clear_bowler_passives_info() {
  bowler_passives_info_.Clear();
}
inline ::PAYLOAD::PassiveInfo* UserData::mutable_bowler_passives_info(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.bowler_passives_info)
  return bowler_passives_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >*
UserData::mutable_bowler_passives_info() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.bowler_passives_info)
  return &bowler_passives_info_;
}
inline const ::PAYLOAD::PassiveInfo& UserData::_internal_bowler_passives_info(int index) const {
  return bowler_passives_info_.Get(index);
}
inline const ::PAYLOAD::PassiveInfo& UserData::bowler_passives_info(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.bowler_passives_info)
  return _internal_bowler_passives_info(index);
}
inline ::PAYLOAD::PassiveInfo* UserData::_internal_add_bowler_passives_info() {
  return bowler_passives_info_.Add();
}
inline ::PAYLOAD::PassiveInfo* UserData::add_bowler_passives_info() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.bowler_passives_info)
  return _internal_add_bowler_passives_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PassiveInfo >&
UserData::bowler_passives_info() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.bowler_passives_info)
  return bowler_passives_info_;
}

// repeated .PAYLOAD.EquipmentInfo applied_equipments = 29;
inline int UserData::_internal_applied_equipments_size() const {
  return applied_equipments_.size();
}
inline int UserData::applied_equipments_size() const {
  return _internal_applied_equipments_size();
}
inline void UserData::clear_applied_equipments() {
  applied_equipments_.Clear();
}
inline ::PAYLOAD::EquipmentInfo* UserData::mutable_applied_equipments(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.applied_equipments)
  return applied_equipments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::EquipmentInfo >*
UserData::mutable_applied_equipments() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserData.applied_equipments)
  return &applied_equipments_;
}
inline const ::PAYLOAD::EquipmentInfo& UserData::_internal_applied_equipments(int index) const {
  return applied_equipments_.Get(index);
}
inline const ::PAYLOAD::EquipmentInfo& UserData::applied_equipments(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.applied_equipments)
  return _internal_applied_equipments(index);
}
inline ::PAYLOAD::EquipmentInfo* UserData::_internal_add_applied_equipments() {
  return applied_equipments_.Add();
}
inline ::PAYLOAD::EquipmentInfo* UserData::add_applied_equipments() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserData.applied_equipments)
  return _internal_add_applied_equipments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::EquipmentInfo >&
UserData::applied_equipments() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserData.applied_equipments)
  return applied_equipments_;
}

// .PAYLOAD.AttributeBoosts bowler_attribute_boosts = 30;
inline bool UserData::_internal_has_bowler_attribute_boosts() const {
  return this != internal_default_instance() && bowler_attribute_boosts_ != nullptr;
}
inline bool UserData::has_bowler_attribute_boosts() const {
  return _internal_has_bowler_attribute_boosts();
}
inline void UserData::clear_bowler_attribute_boosts() {
  if (GetArena() == nullptr && bowler_attribute_boosts_ != nullptr) {
    delete bowler_attribute_boosts_;
  }
  bowler_attribute_boosts_ = nullptr;
}
inline const ::PAYLOAD::AttributeBoosts& UserData::_internal_bowler_attribute_boosts() const {
  const ::PAYLOAD::AttributeBoosts* p = bowler_attribute_boosts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::AttributeBoosts*>(
      &::PAYLOAD::_AttributeBoosts_default_instance_);
}
inline const ::PAYLOAD::AttributeBoosts& UserData::bowler_attribute_boosts() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.bowler_attribute_boosts)
  return _internal_bowler_attribute_boosts();
}
inline void UserData::unsafe_arena_set_allocated_bowler_attribute_boosts(
    ::PAYLOAD::AttributeBoosts* bowler_attribute_boosts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bowler_attribute_boosts_);
  }
  bowler_attribute_boosts_ = bowler_attribute_boosts;
  if (bowler_attribute_boosts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.bowler_attribute_boosts)
}
inline ::PAYLOAD::AttributeBoosts* UserData::release_bowler_attribute_boosts() {
  auto temp = unsafe_arena_release_bowler_attribute_boosts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::AttributeBoosts* UserData::unsafe_arena_release_bowler_attribute_boosts() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.bowler_attribute_boosts)
  
  ::PAYLOAD::AttributeBoosts* temp = bowler_attribute_boosts_;
  bowler_attribute_boosts_ = nullptr;
  return temp;
}
inline ::PAYLOAD::AttributeBoosts* UserData::_internal_mutable_bowler_attribute_boosts() {
  
  if (bowler_attribute_boosts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::AttributeBoosts>(GetArena());
    bowler_attribute_boosts_ = p;
  }
  return bowler_attribute_boosts_;
}
inline ::PAYLOAD::AttributeBoosts* UserData::mutable_bowler_attribute_boosts() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.bowler_attribute_boosts)
  return _internal_mutable_bowler_attribute_boosts();
}
inline void UserData::set_allocated_bowler_attribute_boosts(::PAYLOAD::AttributeBoosts* bowler_attribute_boosts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bowler_attribute_boosts_;
  }
  if (bowler_attribute_boosts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bowler_attribute_boosts);
    if (message_arena != submessage_arena) {
      bowler_attribute_boosts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bowler_attribute_boosts, submessage_arena);
    }
    
  } else {
    
  }
  bowler_attribute_boosts_ = bowler_attribute_boosts;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.bowler_attribute_boosts)
}

// .PAYLOAD.AttributeBoosts onstrike_attribute_boosts = 31;
inline bool UserData::_internal_has_onstrike_attribute_boosts() const {
  return this != internal_default_instance() && onstrike_attribute_boosts_ != nullptr;
}
inline bool UserData::has_onstrike_attribute_boosts() const {
  return _internal_has_onstrike_attribute_boosts();
}
inline void UserData::clear_onstrike_attribute_boosts() {
  if (GetArena() == nullptr && onstrike_attribute_boosts_ != nullptr) {
    delete onstrike_attribute_boosts_;
  }
  onstrike_attribute_boosts_ = nullptr;
}
inline const ::PAYLOAD::AttributeBoosts& UserData::_internal_onstrike_attribute_boosts() const {
  const ::PAYLOAD::AttributeBoosts* p = onstrike_attribute_boosts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::AttributeBoosts*>(
      &::PAYLOAD::_AttributeBoosts_default_instance_);
}
inline const ::PAYLOAD::AttributeBoosts& UserData::onstrike_attribute_boosts() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.onstrike_attribute_boosts)
  return _internal_onstrike_attribute_boosts();
}
inline void UserData::unsafe_arena_set_allocated_onstrike_attribute_boosts(
    ::PAYLOAD::AttributeBoosts* onstrike_attribute_boosts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(onstrike_attribute_boosts_);
  }
  onstrike_attribute_boosts_ = onstrike_attribute_boosts;
  if (onstrike_attribute_boosts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.onstrike_attribute_boosts)
}
inline ::PAYLOAD::AttributeBoosts* UserData::release_onstrike_attribute_boosts() {
  auto temp = unsafe_arena_release_onstrike_attribute_boosts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::AttributeBoosts* UserData::unsafe_arena_release_onstrike_attribute_boosts() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.onstrike_attribute_boosts)
  
  ::PAYLOAD::AttributeBoosts* temp = onstrike_attribute_boosts_;
  onstrike_attribute_boosts_ = nullptr;
  return temp;
}
inline ::PAYLOAD::AttributeBoosts* UserData::_internal_mutable_onstrike_attribute_boosts() {
  
  if (onstrike_attribute_boosts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::AttributeBoosts>(GetArena());
    onstrike_attribute_boosts_ = p;
  }
  return onstrike_attribute_boosts_;
}
inline ::PAYLOAD::AttributeBoosts* UserData::mutable_onstrike_attribute_boosts() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.onstrike_attribute_boosts)
  return _internal_mutable_onstrike_attribute_boosts();
}
inline void UserData::set_allocated_onstrike_attribute_boosts(::PAYLOAD::AttributeBoosts* onstrike_attribute_boosts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete onstrike_attribute_boosts_;
  }
  if (onstrike_attribute_boosts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(onstrike_attribute_boosts);
    if (message_arena != submessage_arena) {
      onstrike_attribute_boosts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onstrike_attribute_boosts, submessage_arena);
    }
    
  } else {
    
  }
  onstrike_attribute_boosts_ = onstrike_attribute_boosts;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.onstrike_attribute_boosts)
}

// .PAYLOAD.AttributeBoosts offstrike_attribute_boosts = 32;
inline bool UserData::_internal_has_offstrike_attribute_boosts() const {
  return this != internal_default_instance() && offstrike_attribute_boosts_ != nullptr;
}
inline bool UserData::has_offstrike_attribute_boosts() const {
  return _internal_has_offstrike_attribute_boosts();
}
inline void UserData::clear_offstrike_attribute_boosts() {
  if (GetArena() == nullptr && offstrike_attribute_boosts_ != nullptr) {
    delete offstrike_attribute_boosts_;
  }
  offstrike_attribute_boosts_ = nullptr;
}
inline const ::PAYLOAD::AttributeBoosts& UserData::_internal_offstrike_attribute_boosts() const {
  const ::PAYLOAD::AttributeBoosts* p = offstrike_attribute_boosts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::AttributeBoosts*>(
      &::PAYLOAD::_AttributeBoosts_default_instance_);
}
inline const ::PAYLOAD::AttributeBoosts& UserData::offstrike_attribute_boosts() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.offstrike_attribute_boosts)
  return _internal_offstrike_attribute_boosts();
}
inline void UserData::unsafe_arena_set_allocated_offstrike_attribute_boosts(
    ::PAYLOAD::AttributeBoosts* offstrike_attribute_boosts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offstrike_attribute_boosts_);
  }
  offstrike_attribute_boosts_ = offstrike_attribute_boosts;
  if (offstrike_attribute_boosts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserData.offstrike_attribute_boosts)
}
inline ::PAYLOAD::AttributeBoosts* UserData::release_offstrike_attribute_boosts() {
  auto temp = unsafe_arena_release_offstrike_attribute_boosts();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::AttributeBoosts* UserData::unsafe_arena_release_offstrike_attribute_boosts() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserData.offstrike_attribute_boosts)
  
  ::PAYLOAD::AttributeBoosts* temp = offstrike_attribute_boosts_;
  offstrike_attribute_boosts_ = nullptr;
  return temp;
}
inline ::PAYLOAD::AttributeBoosts* UserData::_internal_mutable_offstrike_attribute_boosts() {
  
  if (offstrike_attribute_boosts_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::AttributeBoosts>(GetArena());
    offstrike_attribute_boosts_ = p;
  }
  return offstrike_attribute_boosts_;
}
inline ::PAYLOAD::AttributeBoosts* UserData::mutable_offstrike_attribute_boosts() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserData.offstrike_attribute_boosts)
  return _internal_mutable_offstrike_attribute_boosts();
}
inline void UserData::set_allocated_offstrike_attribute_boosts(::PAYLOAD::AttributeBoosts* offstrike_attribute_boosts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete offstrike_attribute_boosts_;
  }
  if (offstrike_attribute_boosts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(offstrike_attribute_boosts);
    if (message_arena != submessage_arena) {
      offstrike_attribute_boosts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offstrike_attribute_boosts, submessage_arena);
    }
    
  } else {
    
  }
  offstrike_attribute_boosts_ = offstrike_attribute_boosts;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserData.offstrike_attribute_boosts)
}

// int32 selection_time_remaining = 33;
inline void UserData::clear_selection_time_remaining() {
  selection_time_remaining_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_selection_time_remaining() const {
  return selection_time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::selection_time_remaining() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.selection_time_remaining)
  return _internal_selection_time_remaining();
}
inline void UserData::_internal_set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selection_time_remaining_ = value;
}
inline void UserData::set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selection_time_remaining(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.selection_time_remaining)
}

// int32 max_selection_misses = 34;
inline void UserData::clear_max_selection_misses() {
  max_selection_misses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_max_selection_misses() const {
  return max_selection_misses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::max_selection_misses() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.max_selection_misses)
  return _internal_max_selection_misses();
}
inline void UserData::_internal_set_max_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_selection_misses_ = value;
}
inline void UserData::set_max_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_selection_misses(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.max_selection_misses)
}

// int32 selection_misses = 35;
inline void UserData::clear_selection_misses() {
  selection_misses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_selection_misses() const {
  return selection_misses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::selection_misses() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.selection_misses)
  return _internal_selection_misses();
}
inline void UserData::_internal_set_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selection_misses_ = value;
}
inline void UserData::set_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selection_misses(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.selection_misses)
}

// int32 oppnent_selection_misses = 36;
inline void UserData::clear_oppnent_selection_misses() {
  oppnent_selection_misses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_oppnent_selection_misses() const {
  return oppnent_selection_misses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::oppnent_selection_misses() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.oppnent_selection_misses)
  return _internal_oppnent_selection_misses();
}
inline void UserData::_internal_set_oppnent_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oppnent_selection_misses_ = value;
}
inline void UserData::set_oppnent_selection_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oppnent_selection_misses(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.oppnent_selection_misses)
}

// bool selection_missed = 37;
inline void UserData::clear_selection_missed() {
  selection_missed_ = false;
}
inline bool UserData::_internal_selection_missed() const {
  return selection_missed_;
}
inline bool UserData::selection_missed() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.selection_missed)
  return _internal_selection_missed();
}
inline void UserData::_internal_set_selection_missed(bool value) {
  
  selection_missed_ = value;
}
inline void UserData::set_selection_missed(bool value) {
  _internal_set_selection_missed(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.selection_missed)
}

// bool oppnent_selection_missed = 38;
inline void UserData::clear_oppnent_selection_missed() {
  oppnent_selection_missed_ = false;
}
inline bool UserData::_internal_oppnent_selection_missed() const {
  return oppnent_selection_missed_;
}
inline bool UserData::oppnent_selection_missed() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.oppnent_selection_missed)
  return _internal_oppnent_selection_missed();
}
inline void UserData::_internal_set_oppnent_selection_missed(bool value) {
  
  oppnent_selection_missed_ = value;
}
inline void UserData::set_oppnent_selection_missed(bool value) {
  _internal_set_oppnent_selection_missed(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.oppnent_selection_missed)
}

// int32 start_innings_timeout_seconds = 39;
inline void UserData::clear_start_innings_timeout_seconds() {
  start_innings_timeout_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_start_innings_timeout_seconds() const {
  return start_innings_timeout_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::start_innings_timeout_seconds() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.start_innings_timeout_seconds)
  return _internal_start_innings_timeout_seconds();
}
inline void UserData::_internal_set_start_innings_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_innings_timeout_seconds_ = value;
}
inline void UserData::set_start_innings_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_innings_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.start_innings_timeout_seconds)
}

// int32 start_innings_time_remaining = 40;
inline void UserData::clear_start_innings_time_remaining() {
  start_innings_time_remaining_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::_internal_start_innings_time_remaining() const {
  return start_innings_time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserData::start_innings_time_remaining() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.start_innings_time_remaining)
  return _internal_start_innings_time_remaining();
}
inline void UserData::_internal_set_start_innings_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_innings_time_remaining_ = value;
}
inline void UserData::set_start_innings_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_innings_time_remaining(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.start_innings_time_remaining)
}

// .PAYLOAD.MatchResult match_result = 41;
inline void UserData::clear_match_result() {
  match_result_ = 0;
}
inline ::PAYLOAD::MatchResult UserData::_internal_match_result() const {
  return static_cast< ::PAYLOAD::MatchResult >(match_result_);
}
inline ::PAYLOAD::MatchResult UserData::match_result() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserData.match_result)
  return _internal_match_result();
}
inline void UserData::_internal_set_match_result(::PAYLOAD::MatchResult value) {
  
  match_result_ = value;
}
inline void UserData::set_match_result(::PAYLOAD::MatchResult value) {
  _internal_set_match_result(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserData.match_result)
}

// -------------------------------------------------------------------

// PassiveInfo

// int32 id = 1;
inline void PassiveInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PassiveInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PassiveInfo::id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PassiveInfo.id)
  return _internal_id();
}
inline void PassiveInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PassiveInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PassiveInfo.id)
}

// bool is_active = 2;
inline void PassiveInfo::clear_is_active() {
  is_active_ = false;
}
inline bool PassiveInfo::_internal_is_active() const {
  return is_active_;
}
inline bool PassiveInfo::is_active() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PassiveInfo.is_active)
  return _internal_is_active();
}
inline void PassiveInfo::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void PassiveInfo::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PassiveInfo.is_active)
}

// -------------------------------------------------------------------

// EquipmentInfo

// int32 id = 1;
inline void EquipmentInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EquipmentInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EquipmentInfo::id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.EquipmentInfo.id)
  return _internal_id();
}
inline void EquipmentInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void EquipmentInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.EquipmentInfo.id)
}

// int32 bracket = 2;
inline void EquipmentInfo::clear_bracket() {
  bracket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EquipmentInfo::_internal_bracket() const {
  return bracket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EquipmentInfo::bracket() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.EquipmentInfo.bracket)
  return _internal_bracket();
}
inline void EquipmentInfo::_internal_set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bracket_ = value;
}
inline void EquipmentInfo::set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bracket(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.EquipmentInfo.bracket)
}

// .PAYLOAD.classification classification = 3;
inline void EquipmentInfo::clear_classification() {
  classification_ = 0;
}
inline ::PAYLOAD::classification EquipmentInfo::_internal_classification() const {
  return static_cast< ::PAYLOAD::classification >(classification_);
}
inline ::PAYLOAD::classification EquipmentInfo::classification() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.EquipmentInfo.classification)
  return _internal_classification();
}
inline void EquipmentInfo::_internal_set_classification(::PAYLOAD::classification value) {
  
  classification_ = value;
}
inline void EquipmentInfo::set_classification(::PAYLOAD::classification value) {
  _internal_set_classification(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.EquipmentInfo.classification)
}

// -------------------------------------------------------------------

// AttributeBoosts

// double lb_rhb_debuff = 1;
inline void AttributeBoosts::clear_lb_rhb_debuff() {
  lb_rhb_debuff_ = 0;
}
inline double AttributeBoosts::_internal_lb_rhb_debuff() const {
  return lb_rhb_debuff_;
}
inline double AttributeBoosts::lb_rhb_debuff() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.AttributeBoosts.lb_rhb_debuff)
  return _internal_lb_rhb_debuff();
}
inline void AttributeBoosts::_internal_set_lb_rhb_debuff(double value) {
  
  lb_rhb_debuff_ = value;
}
inline void AttributeBoosts::set_lb_rhb_debuff(double value) {
  _internal_set_lb_rhb_debuff(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.AttributeBoosts.lb_rhb_debuff)
}

// double confidence_boost = 2;
inline void AttributeBoosts::clear_confidence_boost() {
  confidence_boost_ = 0;
}
inline double AttributeBoosts::_internal_confidence_boost() const {
  return confidence_boost_;
}
inline double AttributeBoosts::confidence_boost() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.AttributeBoosts.confidence_boost)
  return _internal_confidence_boost();
}
inline void AttributeBoosts::_internal_set_confidence_boost(double value) {
  
  confidence_boost_ = value;
}
inline void AttributeBoosts::set_confidence_boost(double value) {
  _internal_set_confidence_boost(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.AttributeBoosts.confidence_boost)
}

// double passive_boost = 3;
inline void AttributeBoosts::clear_passive_boost() {
  passive_boost_ = 0;
}
inline double AttributeBoosts::_internal_passive_boost() const {
  return passive_boost_;
}
inline double AttributeBoosts::passive_boost() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.AttributeBoosts.passive_boost)
  return _internal_passive_boost();
}
inline void AttributeBoosts::_internal_set_passive_boost(double value) {
  
  passive_boost_ = value;
}
inline void AttributeBoosts::set_passive_boost(double value) {
  _internal_set_passive_boost(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.AttributeBoosts.passive_boost)
}

// double props_boost = 4;
inline void AttributeBoosts::clear_props_boost() {
  props_boost_ = 0;
}
inline double AttributeBoosts::_internal_props_boost() const {
  return props_boost_;
}
inline double AttributeBoosts::props_boost() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.AttributeBoosts.props_boost)
  return _internal_props_boost();
}
inline void AttributeBoosts::_internal_set_props_boost(double value) {
  
  props_boost_ = value;
}
inline void AttributeBoosts::set_props_boost(double value) {
  _internal_set_props_boost(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.AttributeBoosts.props_boost)
}

// -------------------------------------------------------------------

// TShot

// int32 id = 1;
inline void TShot::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TShot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TShot::id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.id)
  return _internal_id();
}
inline void TShot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TShot::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.id)
}

// string name = 2;
inline void TShot::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TShot::name() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.name)
  return _internal_name();
}
inline void TShot::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.name)
}
inline std::string* TShot::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.TShot.name)
  return _internal_mutable_name();
}
inline const std::string& TShot::_internal_name() const {
  return name_.Get();
}
inline void TShot::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TShot::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.TShot.name)
}
inline void TShot::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.TShot.name)
}
inline void TShot::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.TShot.name)
}
inline std::string* TShot::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TShot::release_name() {
  // @@protoc_insertion_point(field_release:PAYLOAD.TShot.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TShot::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.TShot.name)
}
inline std::string* TShot::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.TShot.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TShot::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.TShot.name)
}

// int32 run = 3;
inline void TShot::clear_run() {
  run_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TShot::_internal_run() const {
  return run_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TShot::run() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.run)
  return _internal_run();
}
inline void TShot::_internal_set_run(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  run_ = value;
}
inline void TShot::set_run(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_run(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.run)
}

// int32 bracket = 4;
inline void TShot::clear_bracket() {
  bracket_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TShot::_internal_bracket() const {
  return bracket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TShot::bracket() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.bracket)
  return _internal_bracket();
}
inline void TShot::_internal_set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bracket_ = value;
}
inline void TShot::set_bracket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bracket(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.bracket)
}

// double probability = 5;
inline void TShot::clear_probability() {
  probability_ = 0;
}
inline double TShot::_internal_probability() const {
  return probability_;
}
inline double TShot::probability() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.probability)
  return _internal_probability();
}
inline void TShot::_internal_set_probability(double value) {
  
  probability_ = value;
}
inline void TShot::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.probability)
}

// bool locked = 6;
inline void TShot::clear_locked() {
  locked_ = false;
}
inline bool TShot::_internal_locked() const {
  return locked_;
}
inline bool TShot::locked() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.locked)
  return _internal_locked();
}
inline void TShot::_internal_set_locked(bool value) {
  
  locked_ = value;
}
inline void TShot::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.locked)
}

// bool shot_hidden = 7;
inline void TShot::clear_shot_hidden() {
  shot_hidden_ = false;
}
inline bool TShot::_internal_shot_hidden() const {
  return shot_hidden_;
}
inline bool TShot::shot_hidden() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.shot_hidden)
  return _internal_shot_hidden();
}
inline void TShot::_internal_set_shot_hidden(bool value) {
  
  shot_hidden_ = value;
}
inline void TShot::set_shot_hidden(bool value) {
  _internal_set_shot_hidden(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.shot_hidden)
}

// bool probability_hidden = 8;
inline void TShot::clear_probability_hidden() {
  probability_hidden_ = false;
}
inline bool TShot::_internal_probability_hidden() const {
  return probability_hidden_;
}
inline bool TShot::probability_hidden() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TShot.probability_hidden)
  return _internal_probability_hidden();
}
inline void TShot::_internal_set_probability_hidden(bool value) {
  
  probability_hidden_ = value;
}
inline void TShot::set_probability_hidden(bool value) {
  _internal_set_probability_hidden(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TShot.probability_hidden)
}

// -------------------------------------------------------------------

// TSaInfo

// .PAYLOAD.DeadShotStatus dead_shot_status = 1;
inline void TSaInfo::clear_dead_shot_status() {
  dead_shot_status_ = 0;
}
inline ::PAYLOAD::DeadShotStatus TSaInfo::_internal_dead_shot_status() const {
  return static_cast< ::PAYLOAD::DeadShotStatus >(dead_shot_status_);
}
inline ::PAYLOAD::DeadShotStatus TSaInfo::dead_shot_status() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TSaInfo.dead_shot_status)
  return _internal_dead_shot_status();
}
inline void TSaInfo::_internal_set_dead_shot_status(::PAYLOAD::DeadShotStatus value) {
  
  dead_shot_status_ = value;
}
inline void TSaInfo::set_dead_shot_status(::PAYLOAD::DeadShotStatus value) {
  _internal_set_dead_shot_status(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TSaInfo.dead_shot_status)
}

// int32 batsman_active_sa = 2;
inline void TSaInfo::clear_batsman_active_sa() {
  batsman_active_sa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSaInfo::_internal_batsman_active_sa() const {
  return batsman_active_sa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSaInfo::batsman_active_sa() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TSaInfo.batsman_active_sa)
  return _internal_batsman_active_sa();
}
inline void TSaInfo::_internal_set_batsman_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batsman_active_sa_ = value;
}
inline void TSaInfo::set_batsman_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batsman_active_sa(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TSaInfo.batsman_active_sa)
}

// int32 bowler_active_sa = 3;
inline void TSaInfo::clear_bowler_active_sa() {
  bowler_active_sa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSaInfo::_internal_bowler_active_sa() const {
  return bowler_active_sa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSaInfo::bowler_active_sa() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TSaInfo.bowler_active_sa)
  return _internal_bowler_active_sa();
}
inline void TSaInfo::_internal_set_bowler_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bowler_active_sa_ = value;
}
inline void TSaInfo::set_bowler_active_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bowler_active_sa(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TSaInfo.bowler_active_sa)
}

// bool immortal_wicket_but_miss = 4;
inline void TSaInfo::clear_immortal_wicket_but_miss() {
  immortal_wicket_but_miss_ = false;
}
inline bool TSaInfo::_internal_immortal_wicket_but_miss() const {
  return immortal_wicket_but_miss_;
}
inline bool TSaInfo::immortal_wicket_but_miss() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TSaInfo.immortal_wicket_but_miss)
  return _internal_immortal_wicket_but_miss();
}
inline void TSaInfo::_internal_set_immortal_wicket_but_miss(bool value) {
  
  immortal_wicket_but_miss_ = value;
}
inline void TSaInfo::set_immortal_wicket_but_miss(bool value) {
  _internal_set_immortal_wicket_but_miss(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TSaInfo.immortal_wicket_but_miss)
}

// -------------------------------------------------------------------

// TResult

// int32 total_runs = 1;
inline void TResult::clear_total_runs() {
  total_runs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_total_runs() const {
  return total_runs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::total_runs() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.total_runs)
  return _internal_total_runs();
}
inline void TResult::_internal_set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_runs_ = value;
}
inline void TResult::set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_runs(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.total_runs)
}

// int32 total_balls = 2;
inline void TResult::clear_total_balls() {
  total_balls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_total_balls() const {
  return total_balls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::total_balls() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.total_balls)
  return _internal_total_balls();
}
inline void TResult::_internal_set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_balls_ = value;
}
inline void TResult::set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_balls(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.total_balls)
}

// int32 total_wicket_taken = 3;
inline void TResult::clear_total_wicket_taken() {
  total_wicket_taken_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_total_wicket_taken() const {
  return total_wicket_taken_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::total_wicket_taken() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.total_wicket_taken)
  return _internal_total_wicket_taken();
}
inline void TResult::_internal_set_total_wicket_taken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_wicket_taken_ = value;
}
inline void TResult::set_total_wicket_taken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_wicket_taken(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.total_wicket_taken)
}

// int32 runs_scored = 4;
inline void TResult::clear_runs_scored() {
  runs_scored_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_runs_scored() const {
  return runs_scored_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::runs_scored() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.runs_scored)
  return _internal_runs_scored();
}
inline void TResult::_internal_set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runs_scored_ = value;
}
inline void TResult::set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runs_scored(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.runs_scored)
}

// int32 original_runs_scored = 5;
inline void TResult::clear_original_runs_scored() {
  original_runs_scored_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_original_runs_scored() const {
  return original_runs_scored_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::original_runs_scored() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.original_runs_scored)
  return _internal_original_runs_scored();
}
inline void TResult::_internal_set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_runs_scored_ = value;
}
inline void TResult::set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_runs_scored(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.original_runs_scored)
}

// int32 over_ball_number = 6;
inline void TResult::clear_over_ball_number() {
  over_ball_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_over_ball_number() const {
  return over_ball_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::over_ball_number() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.over_ball_number)
  return _internal_over_ball_number();
}
inline void TResult::_internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_ball_number_ = value;
}
inline void TResult::set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_ball_number(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.over_ball_number)
}

// int32 over_number = 7;
inline void TResult::clear_over_number() {
  over_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_over_number() const {
  return over_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::over_number() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.over_number)
  return _internal_over_number();
}
inline void TResult::_internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_number_ = value;
}
inline void TResult::set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_number(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.over_number)
}

// int32 bracket_id = 8;
inline void TResult::clear_bracket_id() {
  bracket_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::_internal_bracket_id() const {
  return bracket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TResult::bracket_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.bracket_id)
  return _internal_bracket_id();
}
inline void TResult::_internal_set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bracket_id_ = value;
}
inline void TResult::set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bracket_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.bracket_id)
}

// .PAYLOAD.ShotOutcomes outcome = 9;
inline void TResult::clear_outcome() {
  outcome_ = 0;
}
inline ::PAYLOAD::ShotOutcomes TResult::_internal_outcome() const {
  return static_cast< ::PAYLOAD::ShotOutcomes >(outcome_);
}
inline ::PAYLOAD::ShotOutcomes TResult::outcome() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.outcome)
  return _internal_outcome();
}
inline void TResult::_internal_set_outcome(::PAYLOAD::ShotOutcomes value) {
  
  outcome_ = value;
}
inline void TResult::set_outcome(::PAYLOAD::ShotOutcomes value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.outcome)
}

// .PAYLOAD.WicketType type = 10;
inline void TResult::clear_type() {
  type_ = 0;
}
inline ::PAYLOAD::WicketType TResult::_internal_type() const {
  return static_cast< ::PAYLOAD::WicketType >(type_);
}
inline ::PAYLOAD::WicketType TResult::type() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.type)
  return _internal_type();
}
inline void TResult::_internal_set_type(::PAYLOAD::WicketType value) {
  
  type_ = value;
}
inline void TResult::set_type(::PAYLOAD::WicketType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.type)
}

// .PAYLOAD.AnticipationType anticipation_type = 11;
inline void TResult::clear_anticipation_type() {
  anticipation_type_ = 0;
}
inline ::PAYLOAD::AnticipationType TResult::_internal_anticipation_type() const {
  return static_cast< ::PAYLOAD::AnticipationType >(anticipation_type_);
}
inline ::PAYLOAD::AnticipationType TResult::anticipation_type() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.anticipation_type)
  return _internal_anticipation_type();
}
inline void TResult::_internal_set_anticipation_type(::PAYLOAD::AnticipationType value) {
  
  anticipation_type_ = value;
}
inline void TResult::set_anticipation_type(::PAYLOAD::AnticipationType value) {
  _internal_set_anticipation_type(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.anticipation_type)
}

// .PAYLOAD.Innings inning = 12;
inline void TResult::clear_inning() {
  inning_ = 0;
}
inline ::PAYLOAD::Innings TResult::_internal_inning() const {
  return static_cast< ::PAYLOAD::Innings >(inning_);
}
inline ::PAYLOAD::Innings TResult::inning() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.inning)
  return _internal_inning();
}
inline void TResult::_internal_set_inning(::PAYLOAD::Innings value) {
  
  inning_ = value;
}
inline void TResult::set_inning(::PAYLOAD::Innings value) {
  _internal_set_inning(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TResult.inning)
}

// .PAYLOAD.TSaInfo sa_info = 13;
inline bool TResult::_internal_has_sa_info() const {
  return this != internal_default_instance() && sa_info_ != nullptr;
}
inline bool TResult::has_sa_info() const {
  return _internal_has_sa_info();
}
inline void TResult::clear_sa_info() {
  if (GetArena() == nullptr && sa_info_ != nullptr) {
    delete sa_info_;
  }
  sa_info_ = nullptr;
}
inline const ::PAYLOAD::TSaInfo& TResult::_internal_sa_info() const {
  const ::PAYLOAD::TSaInfo* p = sa_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::TSaInfo*>(
      &::PAYLOAD::_TSaInfo_default_instance_);
}
inline const ::PAYLOAD::TSaInfo& TResult::sa_info() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TResult.sa_info)
  return _internal_sa_info();
}
inline void TResult::unsafe_arena_set_allocated_sa_info(
    ::PAYLOAD::TSaInfo* sa_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sa_info_);
  }
  sa_info_ = sa_info;
  if (sa_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.TResult.sa_info)
}
inline ::PAYLOAD::TSaInfo* TResult::release_sa_info() {
  auto temp = unsafe_arena_release_sa_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::TSaInfo* TResult::unsafe_arena_release_sa_info() {
  // @@protoc_insertion_point(field_release:PAYLOAD.TResult.sa_info)
  
  ::PAYLOAD::TSaInfo* temp = sa_info_;
  sa_info_ = nullptr;
  return temp;
}
inline ::PAYLOAD::TSaInfo* TResult::_internal_mutable_sa_info() {
  
  if (sa_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::TSaInfo>(GetArena());
    sa_info_ = p;
  }
  return sa_info_;
}
inline ::PAYLOAD::TSaInfo* TResult::mutable_sa_info() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.TResult.sa_info)
  return _internal_mutable_sa_info();
}
inline void TResult::set_allocated_sa_info(::PAYLOAD::TSaInfo* sa_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sa_info_;
  }
  if (sa_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sa_info);
    if (message_arena != submessage_arena) {
      sa_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sa_info, submessage_arena);
    }
    
  } else {
    
  }
  sa_info_ = sa_info;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.TResult.sa_info)
}

// -------------------------------------------------------------------

// ShotsPossible

// int32 bracket_id = 1;
inline void ShotsPossible::clear_bracket_id() {
  bracket_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShotsPossible::_internal_bracket_id() const {
  return bracket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShotsPossible::bracket_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.ShotsPossible.bracket_id)
  return _internal_bracket_id();
}
inline void ShotsPossible::_internal_set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bracket_id_ = value;
}
inline void ShotsPossible::set_bracket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bracket_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.ShotsPossible.bracket_id)
}

// int32 shot_id = 2;
inline void ShotsPossible::clear_shot_id() {
  shot_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShotsPossible::_internal_shot_id() const {
  return shot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShotsPossible::shot_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.ShotsPossible.shot_id)
  return _internal_shot_id();
}
inline void ShotsPossible::_internal_set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shot_id_ = value;
}
inline void ShotsPossible::set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shot_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.ShotsPossible.shot_id)
}

// -------------------------------------------------------------------

// TBall

// int32 id = 1;
inline void TBall::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TBall::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TBall::id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TBall.id)
  return _internal_id();
}
inline void TBall::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TBall::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TBall.id)
}

// string name = 2;
inline void TBall::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TBall::name() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TBall.name)
  return _internal_name();
}
inline void TBall::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TBall.name)
}
inline std::string* TBall::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.TBall.name)
  return _internal_mutable_name();
}
inline const std::string& TBall::_internal_name() const {
  return name_.Get();
}
inline void TBall::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TBall::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.TBall.name)
}
inline void TBall::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.TBall.name)
}
inline void TBall::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.TBall.name)
}
inline std::string* TBall::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TBall::release_name() {
  // @@protoc_insertion_point(field_release:PAYLOAD.TBall.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TBall::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.TBall.name)
}
inline std::string* TBall::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.TBall.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TBall::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.TBall.name)
}

// double value = 3;
inline void TBall::clear_value() {
  value_ = 0;
}
inline double TBall::_internal_value() const {
  return value_;
}
inline double TBall::value() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TBall.value)
  return _internal_value();
}
inline void TBall::_internal_set_value(double value) {
  
  value_ = value;
}
inline void TBall::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TBall.value)
}

// int32 skulls = 4;
inline void TBall::clear_skulls() {
  skulls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TBall::_internal_skulls() const {
  return skulls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TBall::skulls() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TBall.skulls)
  return _internal_skulls();
}
inline void TBall::_internal_set_skulls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skulls_ = value;
}
inline void TBall::set_skulls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skulls(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.TBall.skulls)
}

// repeated .PAYLOAD.ShotsPossible shots_possible = 5;
inline int TBall::_internal_shots_possible_size() const {
  return shots_possible_.size();
}
inline int TBall::shots_possible_size() const {
  return _internal_shots_possible_size();
}
inline void TBall::clear_shots_possible() {
  shots_possible_.Clear();
}
inline ::PAYLOAD::ShotsPossible* TBall::mutable_shots_possible(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.TBall.shots_possible)
  return shots_possible_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::ShotsPossible >*
TBall::mutable_shots_possible() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.TBall.shots_possible)
  return &shots_possible_;
}
inline const ::PAYLOAD::ShotsPossible& TBall::_internal_shots_possible(int index) const {
  return shots_possible_.Get(index);
}
inline const ::PAYLOAD::ShotsPossible& TBall::shots_possible(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.TBall.shots_possible)
  return _internal_shots_possible(index);
}
inline ::PAYLOAD::ShotsPossible* TBall::_internal_add_shots_possible() {
  return shots_possible_.Add();
}
inline ::PAYLOAD::ShotsPossible* TBall::add_shots_possible() {
  // @@protoc_insertion_point(field_add:PAYLOAD.TBall.shots_possible)
  return _internal_add_shots_possible();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::ShotsPossible >&
TBall::shots_possible() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.TBall.shots_possible)
  return shots_possible_;
}

// -------------------------------------------------------------------

// Player

// int32 character_id = 1;
inline void Player::clear_character_id() {
  character_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::character_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.character_id)
  return _internal_character_id();
}
inline void Player::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  character_id_ = value;
}
inline void Player::set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.character_id)
}

// string nickname = 2;
inline void Player::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Player::nickname() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.nickname)
  return _internal_nickname();
}
inline void Player::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.nickname)
}
inline std::string* Player::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Player.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& Player::_internal_nickname() const {
  return nickname_.Get();
}
inline void Player::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Player::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.Player.nickname)
}
inline void Player::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.Player.nickname)
}
inline void Player::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.Player.nickname)
}
inline std::string* Player::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Player::release_nickname() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Player.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Player.nickname)
}
inline std::string* Player::unsafe_arena_release_nickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.Player.nickname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nickname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Player::unsafe_arena_set_allocated_nickname(
    std::string* nickname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nickname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Player.nickname)
}

// .PAYLOAD.rarity rarity = 3;
inline void Player::clear_rarity() {
  rarity_ = 0;
}
inline ::PAYLOAD::rarity Player::_internal_rarity() const {
  return static_cast< ::PAYLOAD::rarity >(rarity_);
}
inline ::PAYLOAD::rarity Player::rarity() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.rarity)
  return _internal_rarity();
}
inline void Player::_internal_set_rarity(::PAYLOAD::rarity value) {
  
  rarity_ = value;
}
inline void Player::set_rarity(::PAYLOAD::rarity value) {
  _internal_set_rarity(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.rarity)
}

// int32 image_number = 4;
inline void Player::clear_image_number() {
  image_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_image_number() const {
  return image_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::image_number() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.image_number)
  return _internal_image_number();
}
inline void Player::_internal_set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_number_ = value;
}
inline void Player::set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_number(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.image_number)
}

// .PAYLOAD.classification classification = 5;
inline void Player::clear_classification() {
  classification_ = 0;
}
inline ::PAYLOAD::classification Player::_internal_classification() const {
  return static_cast< ::PAYLOAD::classification >(classification_);
}
inline ::PAYLOAD::classification Player::classification() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.classification)
  return _internal_classification();
}
inline void Player::_internal_set_classification(::PAYLOAD::classification value) {
  
  classification_ = value;
}
inline void Player::set_classification(::PAYLOAD::classification value) {
  _internal_set_classification(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.classification)
}

// .PAYLOAD.gender gender = 6;
inline void Player::clear_gender() {
  gender_ = 0;
}
inline ::PAYLOAD::gender Player::_internal_gender() const {
  return static_cast< ::PAYLOAD::gender >(gender_);
}
inline ::PAYLOAD::gender Player::gender() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.gender)
  return _internal_gender();
}
inline void Player::_internal_set_gender(::PAYLOAD::gender value) {
  
  gender_ = value;
}
inline void Player::set_gender(::PAYLOAD::gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.gender)
}

// int32 power = 7;
inline void Player::clear_power() {
  power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::power() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.power)
  return _internal_power();
}
inline void Player::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_ = value;
}
inline void Player::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.power)
}

// .PAYLOAD.batting_style batting_style = 8;
inline void Player::clear_batting_style() {
  batting_style_ = 0;
}
inline ::PAYLOAD::batting_style Player::_internal_batting_style() const {
  return static_cast< ::PAYLOAD::batting_style >(batting_style_);
}
inline ::PAYLOAD::batting_style Player::batting_style() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.batting_style)
  return _internal_batting_style();
}
inline void Player::_internal_set_batting_style(::PAYLOAD::batting_style value) {
  
  batting_style_ = value;
}
inline void Player::set_batting_style(::PAYLOAD::batting_style value) {
  _internal_set_batting_style(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.batting_style)
}

// .PAYLOAD.bowling_style bowling_style = 9;
inline void Player::clear_bowling_style() {
  bowling_style_ = 0;
}
inline ::PAYLOAD::bowling_style Player::_internal_bowling_style() const {
  return static_cast< ::PAYLOAD::bowling_style >(bowling_style_);
}
inline ::PAYLOAD::bowling_style Player::bowling_style() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.bowling_style)
  return _internal_bowling_style();
}
inline void Player::_internal_set_bowling_style(::PAYLOAD::bowling_style value) {
  
  bowling_style_ = value;
}
inline void Player::set_bowling_style(::PAYLOAD::bowling_style value) {
  _internal_set_bowling_style(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.bowling_style)
}

// int32 level = 10;
inline void Player::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::level() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.level)
  return _internal_level();
}
inline void Player::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void Player::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.level)
}

// int32 lineup_number = 11;
inline void Player::clear_lineup_number() {
  lineup_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_lineup_number() const {
  return lineup_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::lineup_number() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.lineup_number)
  return _internal_lineup_number();
}
inline void Player::_internal_set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lineup_number_ = value;
}
inline void Player::set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lineup_number(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.lineup_number)
}

// bool is_out = 12;
inline void Player::clear_is_out() {
  is_out_ = false;
}
inline bool Player::_internal_is_out() const {
  return is_out_;
}
inline bool Player::is_out() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.is_out)
  return _internal_is_out();
}
inline void Player::_internal_set_is_out(bool value) {
  
  is_out_ = value;
}
inline void Player::set_is_out(bool value) {
  _internal_set_is_out(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.is_out)
}

// repeated int32 equipment_slots = 13;
inline int Player::_internal_equipment_slots_size() const {
  return equipment_slots_.size();
}
inline int Player::equipment_slots_size() const {
  return _internal_equipment_slots_size();
}
inline void Player::clear_equipment_slots() {
  equipment_slots_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_equipment_slots(int index) const {
  return equipment_slots_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::equipment_slots(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.equipment_slots)
  return _internal_equipment_slots(index);
}
inline void Player::set_equipment_slots(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  equipment_slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.equipment_slots)
}
inline void Player::_internal_add_equipment_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  equipment_slots_.Add(value);
}
inline void Player::add_equipment_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_equipment_slots(value);
  // @@protoc_insertion_point(field_add:PAYLOAD.Player.equipment_slots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Player::_internal_equipment_slots() const {
  return equipment_slots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Player::equipment_slots() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.Player.equipment_slots)
  return _internal_equipment_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Player::_internal_mutable_equipment_slots() {
  return &equipment_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Player::mutable_equipment_slots() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.Player.equipment_slots)
  return _internal_mutable_equipment_slots();
}

// repeated int32 props = 14;
inline int Player::_internal_props_size() const {
  return props_.size();
}
inline int Player::props_size() const {
  return _internal_props_size();
}
inline void Player::clear_props() {
  props_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_props(int index) const {
  return props_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::props(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.props)
  return _internal_props(index);
}
inline void Player::set_props(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  props_.Set(index, value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.props)
}
inline void Player::_internal_add_props(::PROTOBUF_NAMESPACE_ID::int32 value) {
  props_.Add(value);
}
inline void Player::add_props(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_props(value);
  // @@protoc_insertion_point(field_add:PAYLOAD.Player.props)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Player::_internal_props() const {
  return props_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Player::props() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.Player.props)
  return _internal_props();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Player::_internal_mutable_props() {
  return &props_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Player::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.Player.props)
  return _internal_mutable_props();
}

// repeated int32 passives = 15;
inline int Player::_internal_passives_size() const {
  return passives_.size();
}
inline int Player::passives_size() const {
  return _internal_passives_size();
}
inline void Player::clear_passives() {
  passives_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_passives(int index) const {
  return passives_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::passives(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Player.passives)
  return _internal_passives(index);
}
inline void Player::set_passives(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  passives_.Set(index, value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Player.passives)
}
inline void Player::_internal_add_passives(::PROTOBUF_NAMESPACE_ID::int32 value) {
  passives_.Add(value);
}
inline void Player::add_passives(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_passives(value);
  // @@protoc_insertion_point(field_add:PAYLOAD.Player.passives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Player::_internal_passives() const {
  return passives_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Player::passives() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.Player.passives)
  return _internal_passives();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Player::_internal_mutable_passives() {
  return &passives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Player::mutable_passives() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.Player.passives)
  return _internal_mutable_passives();
}

// -------------------------------------------------------------------

// Inning

// .PAYLOAD.Innings inning = 1;
inline void Inning::clear_inning() {
  inning_ = 0;
}
inline ::PAYLOAD::Innings Inning::_internal_inning() const {
  return static_cast< ::PAYLOAD::Innings >(inning_);
}
inline ::PAYLOAD::Innings Inning::inning() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Inning.inning)
  return _internal_inning();
}
inline void Inning::_internal_set_inning(::PAYLOAD::Innings value) {
  
  inning_ = value;
}
inline void Inning::set_inning(::PAYLOAD::Innings value) {
  _internal_set_inning(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Inning.inning)
}

// int32 runs = 2;
inline void Inning::clear_runs() {
  runs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::_internal_runs() const {
  return runs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::runs() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Inning.runs)
  return _internal_runs();
}
inline void Inning::_internal_set_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runs_ = value;
}
inline void Inning::set_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runs(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Inning.runs)
}

// int32 balls = 3;
inline void Inning::clear_balls() {
  balls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::_internal_balls() const {
  return balls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::balls() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Inning.balls)
  return _internal_balls();
}
inline void Inning::_internal_set_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  balls_ = value;
}
inline void Inning::set_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_balls(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Inning.balls)
}

// int32 wickets = 4;
inline void Inning::clear_wickets() {
  wickets_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::_internal_wickets() const {
  return wickets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::wickets() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Inning.wickets)
  return _internal_wickets();
}
inline void Inning::_internal_set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wickets_ = value;
}
inline void Inning::set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wickets(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Inning.wickets)
}

// int32 over_number = 5;
inline void Inning::clear_over_number() {
  over_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::_internal_over_number() const {
  return over_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Inning::over_number() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Inning.over_number)
  return _internal_over_number();
}
inline void Inning::_internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_number_ = value;
}
inline void Inning::set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_number(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Inning.over_number)
}

// -------------------------------------------------------------------

// Match

// string matchId = 1;
inline void Match::clear_matchid() {
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Match::matchid() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.matchId)
  return _internal_matchid();
}
inline void Match::set_matchid(const std::string& value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.matchId)
}
inline std::string* Match::mutable_matchid() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Match.matchId)
  return _internal_mutable_matchid();
}
inline const std::string& Match::_internal_matchid() const {
  return matchid_.Get();
}
inline void Match::_internal_set_matchid(const std::string& value) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Match::set_matchid(std::string&& value) {
  
  matchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.Match.matchId)
}
inline void Match::set_matchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.Match.matchId)
}
inline void Match::set_matchid(const char* value,
    size_t size) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.Match.matchId)
}
inline std::string* Match::_internal_mutable_matchid() {
  
  return matchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Match::release_matchid() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Match.matchId)
  return matchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Match::set_allocated_matchid(std::string* matchid) {
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Match.matchId)
}
inline std::string* Match::unsafe_arena_release_matchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.Match.matchId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return matchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Match::unsafe_arena_set_allocated_matchid(
    std::string* matchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      matchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Match.matchId)
}

// repeated .PAYLOAD.UserInfo usersInfo = 2;
inline int Match::_internal_usersinfo_size() const {
  return usersinfo_.size();
}
inline int Match::usersinfo_size() const {
  return _internal_usersinfo_size();
}
inline void Match::clear_usersinfo() {
  usersinfo_.Clear();
}
inline ::PAYLOAD::UserInfo* Match::mutable_usersinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Match.usersInfo)
  return usersinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::UserInfo >*
Match::mutable_usersinfo() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.Match.usersInfo)
  return &usersinfo_;
}
inline const ::PAYLOAD::UserInfo& Match::_internal_usersinfo(int index) const {
  return usersinfo_.Get(index);
}
inline const ::PAYLOAD::UserInfo& Match::usersinfo(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.usersInfo)
  return _internal_usersinfo(index);
}
inline ::PAYLOAD::UserInfo* Match::_internal_add_usersinfo() {
  return usersinfo_.Add();
}
inline ::PAYLOAD::UserInfo* Match::add_usersinfo() {
  // @@protoc_insertion_point(field_add:PAYLOAD.Match.usersInfo)
  return _internal_add_usersinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::UserInfo >&
Match::usersinfo() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.Match.usersInfo)
  return usersinfo_;
}

// .PAYLOAD.Inning currentInning = 3;
inline bool Match::_internal_has_currentinning() const {
  return this != internal_default_instance() && currentinning_ != nullptr;
}
inline bool Match::has_currentinning() const {
  return _internal_has_currentinning();
}
inline void Match::clear_currentinning() {
  if (GetArena() == nullptr && currentinning_ != nullptr) {
    delete currentinning_;
  }
  currentinning_ = nullptr;
}
inline const ::PAYLOAD::Inning& Match::_internal_currentinning() const {
  const ::PAYLOAD::Inning* p = currentinning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::Inning*>(
      &::PAYLOAD::_Inning_default_instance_);
}
inline const ::PAYLOAD::Inning& Match::currentinning() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.currentInning)
  return _internal_currentinning();
}
inline void Match::unsafe_arena_set_allocated_currentinning(
    ::PAYLOAD::Inning* currentinning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentinning_);
  }
  currentinning_ = currentinning;
  if (currentinning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Match.currentInning)
}
inline ::PAYLOAD::Inning* Match::release_currentinning() {
  auto temp = unsafe_arena_release_currentinning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::Inning* Match::unsafe_arena_release_currentinning() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Match.currentInning)
  
  ::PAYLOAD::Inning* temp = currentinning_;
  currentinning_ = nullptr;
  return temp;
}
inline ::PAYLOAD::Inning* Match::_internal_mutable_currentinning() {
  
  if (currentinning_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::Inning>(GetArena());
    currentinning_ = p;
  }
  return currentinning_;
}
inline ::PAYLOAD::Inning* Match::mutable_currentinning() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Match.currentInning)
  return _internal_mutable_currentinning();
}
inline void Match::set_allocated_currentinning(::PAYLOAD::Inning* currentinning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete currentinning_;
  }
  if (currentinning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(currentinning);
    if (message_arena != submessage_arena) {
      currentinning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentinning, submessage_arena);
    }
    
  } else {
    
  }
  currentinning_ = currentinning;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Match.currentInning)
}

// .PAYLOAD.Inning previousInning = 4;
inline bool Match::_internal_has_previousinning() const {
  return this != internal_default_instance() && previousinning_ != nullptr;
}
inline bool Match::has_previousinning() const {
  return _internal_has_previousinning();
}
inline void Match::clear_previousinning() {
  if (GetArena() == nullptr && previousinning_ != nullptr) {
    delete previousinning_;
  }
  previousinning_ = nullptr;
}
inline const ::PAYLOAD::Inning& Match::_internal_previousinning() const {
  const ::PAYLOAD::Inning* p = previousinning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::Inning*>(
      &::PAYLOAD::_Inning_default_instance_);
}
inline const ::PAYLOAD::Inning& Match::previousinning() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.previousInning)
  return _internal_previousinning();
}
inline void Match::unsafe_arena_set_allocated_previousinning(
    ::PAYLOAD::Inning* previousinning) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousinning_);
  }
  previousinning_ = previousinning;
  if (previousinning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Match.previousInning)
}
inline ::PAYLOAD::Inning* Match::release_previousinning() {
  auto temp = unsafe_arena_release_previousinning();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::Inning* Match::unsafe_arena_release_previousinning() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Match.previousInning)
  
  ::PAYLOAD::Inning* temp = previousinning_;
  previousinning_ = nullptr;
  return temp;
}
inline ::PAYLOAD::Inning* Match::_internal_mutable_previousinning() {
  
  if (previousinning_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::Inning>(GetArena());
    previousinning_ = p;
  }
  return previousinning_;
}
inline ::PAYLOAD::Inning* Match::mutable_previousinning() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Match.previousInning)
  return _internal_mutable_previousinning();
}
inline void Match::set_allocated_previousinning(::PAYLOAD::Inning* previousinning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previousinning_;
  }
  if (previousinning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previousinning);
    if (message_arena != submessage_arena) {
      previousinning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previousinning, submessage_arena);
    }
    
  } else {
    
  }
  previousinning_ = previousinning;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Match.previousInning)
}

// .PAYLOAD.CurrentBall current_ball = 5;
inline bool Match::_internal_has_current_ball() const {
  return this != internal_default_instance() && current_ball_ != nullptr;
}
inline bool Match::has_current_ball() const {
  return _internal_has_current_ball();
}
inline void Match::clear_current_ball() {
  if (GetArena() == nullptr && current_ball_ != nullptr) {
    delete current_ball_;
  }
  current_ball_ = nullptr;
}
inline const ::PAYLOAD::CurrentBall& Match::_internal_current_ball() const {
  const ::PAYLOAD::CurrentBall* p = current_ball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::CurrentBall*>(
      &::PAYLOAD::_CurrentBall_default_instance_);
}
inline const ::PAYLOAD::CurrentBall& Match::current_ball() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.current_ball)
  return _internal_current_ball();
}
inline void Match::unsafe_arena_set_allocated_current_ball(
    ::PAYLOAD::CurrentBall* current_ball) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_ball_);
  }
  current_ball_ = current_ball;
  if (current_ball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Match.current_ball)
}
inline ::PAYLOAD::CurrentBall* Match::release_current_ball() {
  auto temp = unsafe_arena_release_current_ball();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::CurrentBall* Match::unsafe_arena_release_current_ball() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Match.current_ball)
  
  ::PAYLOAD::CurrentBall* temp = current_ball_;
  current_ball_ = nullptr;
  return temp;
}
inline ::PAYLOAD::CurrentBall* Match::_internal_mutable_current_ball() {
  
  if (current_ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::CurrentBall>(GetArena());
    current_ball_ = p;
  }
  return current_ball_;
}
inline ::PAYLOAD::CurrentBall* Match::mutable_current_ball() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Match.current_ball)
  return _internal_mutable_current_ball();
}
inline void Match::set_allocated_current_ball(::PAYLOAD::CurrentBall* current_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_ball_;
  }
  if (current_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_ball);
    if (message_arena != submessage_arena) {
      current_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_ball, submessage_arena);
    }
    
  } else {
    
  }
  current_ball_ = current_ball;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Match.current_ball)
}

// int32 on_strike = 6;
inline void Match::clear_on_strike() {
  on_strike_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_on_strike() const {
  return on_strike_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::on_strike() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.on_strike)
  return _internal_on_strike();
}
inline void Match::_internal_set_on_strike(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  on_strike_ = value;
}
inline void Match::set_on_strike(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_on_strike(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.on_strike)
}

// int32 off_strike = 7;
inline void Match::clear_off_strike() {
  off_strike_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_off_strike() const {
  return off_strike_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::off_strike() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.off_strike)
  return _internal_off_strike();
}
inline void Match::_internal_set_off_strike(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  off_strike_ = value;
}
inline void Match::set_off_strike(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_off_strike(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.off_strike)
}

// int32 bowler = 8;
inline void Match::clear_bowler() {
  bowler_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_bowler() const {
  return bowler_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::bowler() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.bowler)
  return _internal_bowler();
}
inline void Match::_internal_set_bowler(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bowler_ = value;
}
inline void Match::set_bowler(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bowler(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.bowler)
}

// .PAYLOAD.Events previous_event = 9;
inline void Match::clear_previous_event() {
  previous_event_ = 0;
}
inline ::PAYLOAD::Events Match::_internal_previous_event() const {
  return static_cast< ::PAYLOAD::Events >(previous_event_);
}
inline ::PAYLOAD::Events Match::previous_event() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.previous_event)
  return _internal_previous_event();
}
inline void Match::_internal_set_previous_event(::PAYLOAD::Events value) {
  
  previous_event_ = value;
}
inline void Match::set_previous_event(::PAYLOAD::Events value) {
  _internal_set_previous_event(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.previous_event)
}

// int32 active_bowler_sa = 10;
inline void Match::clear_active_bowler_sa() {
  active_bowler_sa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_active_bowler_sa() const {
  return active_bowler_sa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::active_bowler_sa() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.active_bowler_sa)
  return _internal_active_bowler_sa();
}
inline void Match::_internal_set_active_bowler_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  active_bowler_sa_ = value;
}
inline void Match::set_active_bowler_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active_bowler_sa(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.active_bowler_sa)
}

// int32 active_batsman_sa = 11;
inline void Match::clear_active_batsman_sa() {
  active_batsman_sa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_active_batsman_sa() const {
  return active_batsman_sa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::active_batsman_sa() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.active_batsman_sa)
  return _internal_active_batsman_sa();
}
inline void Match::_internal_set_active_batsman_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  active_batsman_sa_ = value;
}
inline void Match::set_active_batsman_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active_batsman_sa(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.active_batsman_sa)
}

// repeated .PAYLOAD.TResult missed_results = 12;
inline int Match::_internal_missed_results_size() const {
  return missed_results_.size();
}
inline int Match::missed_results_size() const {
  return _internal_missed_results_size();
}
inline void Match::clear_missed_results() {
  missed_results_.Clear();
}
inline ::PAYLOAD::TResult* Match::mutable_missed_results(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Match.missed_results)
  return missed_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TResult >*
Match::mutable_missed_results() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.Match.missed_results)
  return &missed_results_;
}
inline const ::PAYLOAD::TResult& Match::_internal_missed_results(int index) const {
  return missed_results_.Get(index);
}
inline const ::PAYLOAD::TResult& Match::missed_results(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.missed_results)
  return _internal_missed_results(index);
}
inline ::PAYLOAD::TResult* Match::_internal_add_missed_results() {
  return missed_results_.Add();
}
inline ::PAYLOAD::TResult* Match::add_missed_results() {
  // @@protoc_insertion_point(field_add:PAYLOAD.Match.missed_results)
  return _internal_add_missed_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TResult >&
Match::missed_results() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.Match.missed_results)
  return missed_results_;
}

// .PAYLOAD.MatchStates current_state = 13;
inline void Match::clear_current_state() {
  current_state_ = 0;
}
inline ::PAYLOAD::MatchStates Match::_internal_current_state() const {
  return static_cast< ::PAYLOAD::MatchStates >(current_state_);
}
inline ::PAYLOAD::MatchStates Match::current_state() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.current_state)
  return _internal_current_state();
}
inline void Match::_internal_set_current_state(::PAYLOAD::MatchStates value) {
  
  current_state_ = value;
}
inline void Match::set_current_state(::PAYLOAD::MatchStates value) {
  _internal_set_current_state(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.current_state)
}

// .PAYLOAD.Events expected_event = 14;
inline void Match::clear_expected_event() {
  expected_event_ = 0;
}
inline ::PAYLOAD::Events Match::_internal_expected_event() const {
  return static_cast< ::PAYLOAD::Events >(expected_event_);
}
inline ::PAYLOAD::Events Match::expected_event() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.expected_event)
  return _internal_expected_event();
}
inline void Match::_internal_set_expected_event(::PAYLOAD::Events value) {
  
  expected_event_ = value;
}
inline void Match::set_expected_event(::PAYLOAD::Events value) {
  _internal_set_expected_event(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.expected_event)
}

// int32 selection_timeout = 15;
inline void Match::clear_selection_timeout() {
  selection_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_selection_timeout() const {
  return selection_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::selection_timeout() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.selection_timeout)
  return _internal_selection_timeout();
}
inline void Match::_internal_set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selection_timeout_ = value;
}
inline void Match::set_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selection_timeout(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.selection_timeout)
}

// int32 player_selection_timeout = 16;
inline void Match::clear_player_selection_timeout() {
  player_selection_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_player_selection_timeout() const {
  return player_selection_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::player_selection_timeout() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.player_selection_timeout)
  return _internal_player_selection_timeout();
}
inline void Match::_internal_set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_selection_timeout_ = value;
}
inline void Match::set_player_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_selection_timeout(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.player_selection_timeout)
}

// int32 buffer_for_selection_timeout = 17;
inline void Match::clear_buffer_for_selection_timeout() {
  buffer_for_selection_timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_buffer_for_selection_timeout() const {
  return buffer_for_selection_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::buffer_for_selection_timeout() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.buffer_for_selection_timeout)
  return _internal_buffer_for_selection_timeout();
}
inline void Match::_internal_set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffer_for_selection_timeout_ = value;
}
inline void Match::set_buffer_for_selection_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffer_for_selection_timeout(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.buffer_for_selection_timeout)
}

// string winner_team = 18;
inline void Match::clear_winner_team() {
  winner_team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Match::winner_team() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.winner_team)
  return _internal_winner_team();
}
inline void Match::set_winner_team(const std::string& value) {
  _internal_set_winner_team(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.winner_team)
}
inline std::string* Match::mutable_winner_team() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.Match.winner_team)
  return _internal_mutable_winner_team();
}
inline const std::string& Match::_internal_winner_team() const {
  return winner_team_.Get();
}
inline void Match::_internal_set_winner_team(const std::string& value) {
  
  winner_team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Match::set_winner_team(std::string&& value) {
  
  winner_team_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.Match.winner_team)
}
inline void Match::set_winner_team(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  winner_team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.Match.winner_team)
}
inline void Match::set_winner_team(const char* value,
    size_t size) {
  
  winner_team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.Match.winner_team)
}
inline std::string* Match::_internal_mutable_winner_team() {
  
  return winner_team_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Match::release_winner_team() {
  // @@protoc_insertion_point(field_release:PAYLOAD.Match.winner_team)
  return winner_team_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Match::set_allocated_winner_team(std::string* winner_team) {
  if (winner_team != nullptr) {
    
  } else {
    
  }
  winner_team_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), winner_team,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.Match.winner_team)
}
inline std::string* Match::unsafe_arena_release_winner_team() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.Match.winner_team)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return winner_team_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Match::unsafe_arena_set_allocated_winner_team(
    std::string* winner_team) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (winner_team != nullptr) {
    
  } else {
    
  }
  winner_team_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      winner_team, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.Match.winner_team)
}

// int32 selection_time_remaining = 19;
inline void Match::clear_selection_time_remaining() {
  selection_time_remaining_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_selection_time_remaining() const {
  return selection_time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::selection_time_remaining() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.selection_time_remaining)
  return _internal_selection_time_remaining();
}
inline void Match::_internal_set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  selection_time_remaining_ = value;
}
inline void Match::set_selection_time_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_selection_time_remaining(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.selection_time_remaining)
}

// int32 reconnection_count = 20;
inline void Match::clear_reconnection_count() {
  reconnection_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::_internal_reconnection_count() const {
  return reconnection_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Match::reconnection_count() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.Match.reconnection_count)
  return _internal_reconnection_count();
}
inline void Match::_internal_set_reconnection_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reconnection_count_ = value;
}
inline void Match::set_reconnection_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reconnection_count(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.Match.reconnection_count)
}

// -------------------------------------------------------------------

// UserInfo

// string id = 1;
inline void UserInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserInfo.id)
}
inline std::string* UserInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserInfo.id)
  return _internal_mutable_id();
}
inline const std::string& UserInfo::_internal_id() const {
  return id_.Get();
}
inline void UserInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PAYLOAD.UserInfo.id)
}
inline void UserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PAYLOAD.UserInfo.id)
}
inline void UserInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PAYLOAD.UserInfo.id)
}
inline std::string* UserInfo::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_id() {
  // @@protoc_insertion_point(field_release:PAYLOAD.UserInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.UserInfo.id)
}
inline std::string* UserInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PAYLOAD.UserInfo.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfo::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.UserInfo.id)
}

// .PAYLOAD.PlayStates play_state = 2;
inline void UserInfo::clear_play_state() {
  play_state_ = 0;
}
inline ::PAYLOAD::PlayStates UserInfo::_internal_play_state() const {
  return static_cast< ::PAYLOAD::PlayStates >(play_state_);
}
inline ::PAYLOAD::PlayStates UserInfo::play_state() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.play_state)
  return _internal_play_state();
}
inline void UserInfo::_internal_set_play_state(::PAYLOAD::PlayStates value) {
  
  play_state_ = value;
}
inline void UserInfo::set_play_state(::PAYLOAD::PlayStates value) {
  _internal_set_play_state(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserInfo.play_state)
}

// repeated .PAYLOAD.PlayerInfo lineup_info = 3;
inline int UserInfo::_internal_lineup_info_size() const {
  return lineup_info_.size();
}
inline int UserInfo::lineup_info_size() const {
  return _internal_lineup_info_size();
}
inline void UserInfo::clear_lineup_info() {
  lineup_info_.Clear();
}
inline ::PAYLOAD::PlayerInfo* UserInfo::mutable_lineup_info(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.UserInfo.lineup_info)
  return lineup_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PlayerInfo >*
UserInfo::mutable_lineup_info() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.UserInfo.lineup_info)
  return &lineup_info_;
}
inline const ::PAYLOAD::PlayerInfo& UserInfo::_internal_lineup_info(int index) const {
  return lineup_info_.Get(index);
}
inline const ::PAYLOAD::PlayerInfo& UserInfo::lineup_info(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.lineup_info)
  return _internal_lineup_info(index);
}
inline ::PAYLOAD::PlayerInfo* UserInfo::_internal_add_lineup_info() {
  return lineup_info_.Add();
}
inline ::PAYLOAD::PlayerInfo* UserInfo::add_lineup_info() {
  // @@protoc_insertion_point(field_add:PAYLOAD.UserInfo.lineup_info)
  return _internal_add_lineup_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::PlayerInfo >&
UserInfo::lineup_info() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.UserInfo.lineup_info)
  return lineup_info_;
}

// int32 total_misses = 4;
inline void UserInfo::clear_total_misses() {
  total_misses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_total_misses() const {
  return total_misses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::total_misses() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.total_misses)
  return _internal_total_misses();
}
inline void UserInfo::_internal_set_total_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_misses_ = value;
}
inline void UserInfo::set_total_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_misses(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserInfo.total_misses)
}

// int32 activated_sa = 5;
inline void UserInfo::clear_activated_sa() {
  activated_sa_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_activated_sa() const {
  return activated_sa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::activated_sa() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.activated_sa)
  return _internal_activated_sa();
}
inline void UserInfo::_internal_set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activated_sa_ = value;
}
inline void UserInfo::set_activated_sa(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activated_sa(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserInfo.activated_sa)
}

// int32 sa_duration = 6;
inline void UserInfo::clear_sa_duration() {
  sa_duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_sa_duration() const {
  return sa_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::sa_duration() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.sa_duration)
  return _internal_sa_duration();
}
inline void UserInfo::_internal_set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sa_duration_ = value;
}
inline void UserInfo::set_sa_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sa_duration(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserInfo.sa_duration)
}

// int32 sa_total_duration = 7;
inline void UserInfo::clear_sa_total_duration() {
  sa_total_duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_sa_total_duration() const {
  return sa_total_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::sa_total_duration() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.sa_total_duration)
  return _internal_sa_total_duration();
}
inline void UserInfo::_internal_set_sa_total_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sa_total_duration_ = value;
}
inline void UserInfo::set_sa_total_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sa_total_duration(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserInfo.sa_total_duration)
}

// int32 mana_fill = 8;
inline void UserInfo::clear_mana_fill() {
  mana_fill_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::_internal_mana_fill() const {
  return mana_fill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfo::mana_fill() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.UserInfo.mana_fill)
  return _internal_mana_fill();
}
inline void UserInfo::_internal_set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mana_fill_ = value;
}
inline void UserInfo::set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mana_fill(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.UserInfo.mana_fill)
}

// -------------------------------------------------------------------

// PlayerInfo

// int32 lineup_number = 1;
inline void PlayerInfo::clear_lineup_number() {
  lineup_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_lineup_number() const {
  return lineup_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::lineup_number() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.lineup_number)
  return _internal_lineup_number();
}
inline void PlayerInfo::_internal_set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lineup_number_ = value;
}
inline void PlayerInfo::set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lineup_number(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.lineup_number)
}

// bool out = 2;
inline void PlayerInfo::clear_out() {
  out_ = false;
}
inline bool PlayerInfo::_internal_out() const {
  return out_;
}
inline bool PlayerInfo::out() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.out)
  return _internal_out();
}
inline void PlayerInfo::_internal_set_out(bool value) {
  
  out_ = value;
}
inline void PlayerInfo::set_out(bool value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.out)
}

// bool played = 3;
inline void PlayerInfo::clear_played() {
  played_ = false;
}
inline bool PlayerInfo::_internal_played() const {
  return played_;
}
inline bool PlayerInfo::played() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.played)
  return _internal_played();
}
inline void PlayerInfo::_internal_set_played(bool value) {
  
  played_ = value;
}
inline void PlayerInfo::set_played(bool value) {
  _internal_set_played(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.played)
}

// int32 runs_scored = 4;
inline void PlayerInfo::clear_runs_scored() {
  runs_scored_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_runs_scored() const {
  return runs_scored_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::runs_scored() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.runs_scored)
  return _internal_runs_scored();
}
inline void PlayerInfo::_internal_set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runs_scored_ = value;
}
inline void PlayerInfo::set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runs_scored(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.runs_scored)
}

// int32 balls_faced = 5;
inline void PlayerInfo::clear_balls_faced() {
  balls_faced_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_balls_faced() const {
  return balls_faced_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::balls_faced() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.balls_faced)
  return _internal_balls_faced();
}
inline void PlayerInfo::_internal_set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  balls_faced_ = value;
}
inline void PlayerInfo::set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_balls_faced(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.balls_faced)
}

// int32 wickets_taken = 6;
inline void PlayerInfo::clear_wickets_taken() {
  wickets_taken_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_wickets_taken() const {
  return wickets_taken_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::wickets_taken() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.wickets_taken)
  return _internal_wickets_taken();
}
inline void PlayerInfo::_internal_set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wickets_taken_ = value;
}
inline void PlayerInfo::set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wickets_taken(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.wickets_taken)
}

// int32 balls_bowled = 7;
inline void PlayerInfo::clear_balls_bowled() {
  balls_bowled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_balls_bowled() const {
  return balls_bowled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::balls_bowled() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.balls_bowled)
  return _internal_balls_bowled();
}
inline void PlayerInfo::_internal_set_balls_bowled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  balls_bowled_ = value;
}
inline void PlayerInfo::set_balls_bowled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_balls_bowled(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.balls_bowled)
}

// int32 runs_conceded = 8;
inline void PlayerInfo::clear_runs_conceded() {
  runs_conceded_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_runs_conceded() const {
  return runs_conceded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::runs_conceded() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.PlayerInfo.runs_conceded)
  return _internal_runs_conceded();
}
inline void PlayerInfo::_internal_set_runs_conceded(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runs_conceded_ = value;
}
inline void PlayerInfo::set_runs_conceded(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runs_conceded(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.PlayerInfo.runs_conceded)
}

// -------------------------------------------------------------------

// CurrentBall

// int32 over_ball_number = 1;
inline void CurrentBall::clear_over_ball_number() {
  over_ball_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CurrentBall::_internal_over_ball_number() const {
  return over_ball_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CurrentBall::over_ball_number() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.CurrentBall.over_ball_number)
  return _internal_over_ball_number();
}
inline void CurrentBall::_internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_ball_number_ = value;
}
inline void CurrentBall::set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_ball_number(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.CurrentBall.over_ball_number)
}

// repeated .PAYLOAD.TBall balls = 2;
inline int CurrentBall::_internal_balls_size() const {
  return balls_.size();
}
inline int CurrentBall::balls_size() const {
  return _internal_balls_size();
}
inline void CurrentBall::clear_balls() {
  balls_.Clear();
}
inline ::PAYLOAD::TBall* CurrentBall::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.CurrentBall.balls)
  return balls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >*
CurrentBall::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.CurrentBall.balls)
  return &balls_;
}
inline const ::PAYLOAD::TBall& CurrentBall::_internal_balls(int index) const {
  return balls_.Get(index);
}
inline const ::PAYLOAD::TBall& CurrentBall::balls(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.CurrentBall.balls)
  return _internal_balls(index);
}
inline ::PAYLOAD::TBall* CurrentBall::_internal_add_balls() {
  return balls_.Add();
}
inline ::PAYLOAD::TBall* CurrentBall::add_balls() {
  // @@protoc_insertion_point(field_add:PAYLOAD.CurrentBall.balls)
  return _internal_add_balls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TBall >&
CurrentBall::balls() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.CurrentBall.balls)
  return balls_;
}

// repeated .PAYLOAD.TShot shots = 3;
inline int CurrentBall::_internal_shots_size() const {
  return shots_.size();
}
inline int CurrentBall::shots_size() const {
  return _internal_shots_size();
}
inline void CurrentBall::clear_shots() {
  shots_.Clear();
}
inline ::PAYLOAD::TShot* CurrentBall::mutable_shots(int index) {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.CurrentBall.shots)
  return shots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >*
CurrentBall::mutable_shots() {
  // @@protoc_insertion_point(field_mutable_list:PAYLOAD.CurrentBall.shots)
  return &shots_;
}
inline const ::PAYLOAD::TShot& CurrentBall::_internal_shots(int index) const {
  return shots_.Get(index);
}
inline const ::PAYLOAD::TShot& CurrentBall::shots(int index) const {
  // @@protoc_insertion_point(field_get:PAYLOAD.CurrentBall.shots)
  return _internal_shots(index);
}
inline ::PAYLOAD::TShot* CurrentBall::_internal_add_shots() {
  return shots_.Add();
}
inline ::PAYLOAD::TShot* CurrentBall::add_shots() {
  // @@protoc_insertion_point(field_add:PAYLOAD.CurrentBall.shots)
  return _internal_add_shots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::TShot >&
CurrentBall::shots() const {
  // @@protoc_insertion_point(field_list:PAYLOAD.CurrentBall.shots)
  return shots_;
}

// int32 ball_id = 4;
inline void CurrentBall::clear_ball_id() {
  ball_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CurrentBall::_internal_ball_id() const {
  return ball_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CurrentBall::ball_id() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.CurrentBall.ball_id)
  return _internal_ball_id();
}
inline void CurrentBall::_internal_set_ball_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ball_id_ = value;
}
inline void CurrentBall::set_ball_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ball_id(value);
  // @@protoc_insertion_point(field_set:PAYLOAD.CurrentBall.ball_id)
}

// .PAYLOAD.TShot shot_selected = 5;
inline bool CurrentBall::_internal_has_shot_selected() const {
  return this != internal_default_instance() && shot_selected_ != nullptr;
}
inline bool CurrentBall::has_shot_selected() const {
  return _internal_has_shot_selected();
}
inline void CurrentBall::clear_shot_selected() {
  if (GetArena() == nullptr && shot_selected_ != nullptr) {
    delete shot_selected_;
  }
  shot_selected_ = nullptr;
}
inline const ::PAYLOAD::TShot& CurrentBall::_internal_shot_selected() const {
  const ::PAYLOAD::TShot* p = shot_selected_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::TShot*>(
      &::PAYLOAD::_TShot_default_instance_);
}
inline const ::PAYLOAD::TShot& CurrentBall::shot_selected() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.CurrentBall.shot_selected)
  return _internal_shot_selected();
}
inline void CurrentBall::unsafe_arena_set_allocated_shot_selected(
    ::PAYLOAD::TShot* shot_selected) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shot_selected_);
  }
  shot_selected_ = shot_selected;
  if (shot_selected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.CurrentBall.shot_selected)
}
inline ::PAYLOAD::TShot* CurrentBall::release_shot_selected() {
  auto temp = unsafe_arena_release_shot_selected();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::TShot* CurrentBall::unsafe_arena_release_shot_selected() {
  // @@protoc_insertion_point(field_release:PAYLOAD.CurrentBall.shot_selected)
  
  ::PAYLOAD::TShot* temp = shot_selected_;
  shot_selected_ = nullptr;
  return temp;
}
inline ::PAYLOAD::TShot* CurrentBall::_internal_mutable_shot_selected() {
  
  if (shot_selected_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::TShot>(GetArena());
    shot_selected_ = p;
  }
  return shot_selected_;
}
inline ::PAYLOAD::TShot* CurrentBall::mutable_shot_selected() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.CurrentBall.shot_selected)
  return _internal_mutable_shot_selected();
}
inline void CurrentBall::set_allocated_shot_selected(::PAYLOAD::TShot* shot_selected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shot_selected_;
  }
  if (shot_selected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shot_selected);
    if (message_arena != submessage_arena) {
      shot_selected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shot_selected, submessage_arena);
    }
    
  } else {
    
  }
  shot_selected_ = shot_selected;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.CurrentBall.shot_selected)
}

// .PAYLOAD.TResult result = 6;
inline bool CurrentBall::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CurrentBall::has_result() const {
  return _internal_has_result();
}
inline void CurrentBall::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::PAYLOAD::TResult& CurrentBall::_internal_result() const {
  const ::PAYLOAD::TResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PAYLOAD::TResult*>(
      &::PAYLOAD::_TResult_default_instance_);
}
inline const ::PAYLOAD::TResult& CurrentBall::result() const {
  // @@protoc_insertion_point(field_get:PAYLOAD.CurrentBall.result)
  return _internal_result();
}
inline void CurrentBall::unsafe_arena_set_allocated_result(
    ::PAYLOAD::TResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PAYLOAD.CurrentBall.result)
}
inline ::PAYLOAD::TResult* CurrentBall::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PAYLOAD::TResult* CurrentBall::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:PAYLOAD.CurrentBall.result)
  
  ::PAYLOAD::TResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::PAYLOAD::TResult* CurrentBall::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::PAYLOAD::TResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::PAYLOAD::TResult* CurrentBall::mutable_result() {
  // @@protoc_insertion_point(field_mutable:PAYLOAD.CurrentBall.result)
  return _internal_mutable_result();
}
inline void CurrentBall::set_allocated_result(::PAYLOAD::TResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:PAYLOAD.CurrentBall.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PAYLOAD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PAYLOAD::MatchStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::MatchStates>() {
  return ::PAYLOAD::MatchStates_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::TurnState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::TurnState>() {
  return ::PAYLOAD::TurnState_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::UserPlayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::UserPlayState>() {
  return ::PAYLOAD::UserPlayState_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::TeamPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::TeamPosition>() {
  return ::PAYLOAD::TeamPosition_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::MatchResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::MatchResult>() {
  return ::PAYLOAD::MatchResult_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::DeadShotStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::DeadShotStatus>() {
  return ::PAYLOAD::DeadShotStatus_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::WicketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::WicketType>() {
  return ::PAYLOAD::WicketType_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::AnticipationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::AnticipationType>() {
  return ::PAYLOAD::AnticipationType_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::ShotOutcomes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::ShotOutcomes>() {
  return ::PAYLOAD::ShotOutcomes_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::Emoji> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::Emoji>() {
  return ::PAYLOAD::Emoji_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::Messaging> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::Messaging>() {
  return ::PAYLOAD::Messaging_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::PlayStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::PlayStates>() {
  return ::PAYLOAD::PlayStates_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::rarity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::rarity>() {
  return ::PAYLOAD::rarity_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::classification> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::classification>() {
  return ::PAYLOAD::classification_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::gender>() {
  return ::PAYLOAD::gender_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::batting_style> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::batting_style>() {
  return ::PAYLOAD::batting_style_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::bowling_style> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::bowling_style>() {
  return ::PAYLOAD::bowling_style_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::Innings> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::Innings>() {
  return ::PAYLOAD::Innings_descriptor();
}
template <> struct is_proto_enum< ::PAYLOAD::Events> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PAYLOAD::Events>() {
  return ::PAYLOAD::Events_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
