// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relay.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_relay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_relay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_relay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_relay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relay_2eproto;
namespace RELAY_PAYLOAD {
class GSMetric;
class GSMetricDefaultTypeInternal;
extern GSMetricDefaultTypeInternal _GSMetric_default_instance_;
class RelayPayload;
class RelayPayloadDefaultTypeInternal;
extern RelayPayloadDefaultTypeInternal _RelayPayload_default_instance_;
class SystemMessage;
class SystemMessageDefaultTypeInternal;
extern SystemMessageDefaultTypeInternal _SystemMessage_default_instance_;
}  // namespace RELAY_PAYLOAD
PROTOBUF_NAMESPACE_OPEN
template<> ::RELAY_PAYLOAD::GSMetric* Arena::CreateMaybeMessage<::RELAY_PAYLOAD::GSMetric>(Arena*);
template<> ::RELAY_PAYLOAD::RelayPayload* Arena::CreateMaybeMessage<::RELAY_PAYLOAD::RelayPayload>(Arena*);
template<> ::RELAY_PAYLOAD::SystemMessage* Arena::CreateMaybeMessage<::RELAY_PAYLOAD::SystemMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RELAY_PAYLOAD {

enum RelayType : int {
  NO_RELAY = 0,
  HTTP_FORWARD = 1,
  STREAM_FORWARD = 2,
  EVENT_FORWARD = 3,
  SYSTEM = 4,
  RelayType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RelayType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RelayType_IsValid(int value);
constexpr RelayType RelayType_MIN = NO_RELAY;
constexpr RelayType RelayType_MAX = SYSTEM;
constexpr int RelayType_ARRAYSIZE = RelayType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelayType_descriptor();
template<typename T>
inline const std::string& RelayType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RelayType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RelayType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RelayType_descriptor(), enum_t_value);
}
inline bool RelayType_Parse(
    const std::string& name, RelayType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelayType>(
    RelayType_descriptor(), name, value);
}
enum SystemEvent : int {
  UNSPECIFIED = 0,
  READY = 1,
  HEALTH = 2,
  MATCH_CREATED = 3,
  MATCH_ENDED = 4,
  METRIC = 5,
  SystemEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SystemEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SystemEvent_IsValid(int value);
constexpr SystemEvent SystemEvent_MIN = UNSPECIFIED;
constexpr SystemEvent SystemEvent_MAX = METRIC;
constexpr int SystemEvent_ARRAYSIZE = SystemEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemEvent_descriptor();
template<typename T>
inline const std::string& SystemEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SystemEvent_descriptor(), enum_t_value);
}
inline bool SystemEvent_Parse(
    const std::string& name, SystemEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SystemEvent>(
    SystemEvent_descriptor(), name, value);
}
// ===================================================================

class RelayPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RELAY_PAYLOAD.RelayPayload) */ {
 public:
  inline RelayPayload() : RelayPayload(nullptr) {};
  virtual ~RelayPayload();

  RelayPayload(const RelayPayload& from);
  RelayPayload(RelayPayload&& from) noexcept
    : RelayPayload() {
    *this = ::std::move(from);
  }

  inline RelayPayload& operator=(const RelayPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelayPayload& operator=(RelayPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelayPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelayPayload* internal_default_instance() {
    return reinterpret_cast<const RelayPayload*>(
               &_RelayPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RelayPayload& a, RelayPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(RelayPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelayPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelayPayload* New() const final {
    return CreateMaybeMessage<RelayPayload>(nullptr);
  }

  RelayPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelayPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelayPayload& from);
  void MergeFrom(const RelayPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelayPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RELAY_PAYLOAD.RelayPayload";
  }
  protected:
  explicit RelayPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relay_2eproto);
    return ::descriptor_table_relay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kKeyFieldNumber = 3,
    kPktFieldNumber = 4,
    kSysMsgFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kTypeFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes pkt = 4;
  void clear_pkt();
  const std::string& pkt() const;
  void set_pkt(const std::string& value);
  void set_pkt(std::string&& value);
  void set_pkt(const char* value);
  void set_pkt(const void* value, size_t size);
  std::string* mutable_pkt();
  std::string* release_pkt();
  void set_allocated_pkt(std::string* pkt);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pkt();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pkt(
      std::string* pkt);
  private:
  const std::string& _internal_pkt() const;
  void _internal_set_pkt(const std::string& value);
  std::string* _internal_mutable_pkt();
  public:

  // .RELAY_PAYLOAD.SystemMessage sys_msg = 5;
  bool has_sys_msg() const;
  private:
  bool _internal_has_sys_msg() const;
  public:
  void clear_sys_msg();
  const ::RELAY_PAYLOAD::SystemMessage& sys_msg() const;
  ::RELAY_PAYLOAD::SystemMessage* release_sys_msg();
  ::RELAY_PAYLOAD::SystemMessage* mutable_sys_msg();
  void set_allocated_sys_msg(::RELAY_PAYLOAD::SystemMessage* sys_msg);
  private:
  const ::RELAY_PAYLOAD::SystemMessage& _internal_sys_msg() const;
  ::RELAY_PAYLOAD::SystemMessage* _internal_mutable_sys_msg();
  public:
  void unsafe_arena_set_allocated_sys_msg(
      ::RELAY_PAYLOAD::SystemMessage* sys_msg);
  ::RELAY_PAYLOAD::SystemMessage* unsafe_arena_release_sys_msg();

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .RELAY_PAYLOAD.RelayType type = 1;
  void clear_type();
  ::RELAY_PAYLOAD::RelayType type() const;
  void set_type(::RELAY_PAYLOAD::RelayType value);
  private:
  ::RELAY_PAYLOAD::RelayType _internal_type() const;
  void _internal_set_type(::RELAY_PAYLOAD::RelayType value);
  public:

  // @@protoc_insertion_point(class_scope:RELAY_PAYLOAD.RelayPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pkt_;
  ::RELAY_PAYLOAD::SystemMessage* sys_msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relay_2eproto;
};
// -------------------------------------------------------------------

class SystemMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RELAY_PAYLOAD.SystemMessage) */ {
 public:
  inline SystemMessage() : SystemMessage(nullptr) {};
  virtual ~SystemMessage();

  SystemMessage(const SystemMessage& from);
  SystemMessage(SystemMessage&& from) noexcept
    : SystemMessage() {
    *this = ::std::move(from);
  }

  inline SystemMessage& operator=(const SystemMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemMessage& operator=(SystemMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemMessage* internal_default_instance() {
    return reinterpret_cast<const SystemMessage*>(
               &_SystemMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemMessage& a, SystemMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemMessage* New() const final {
    return CreateMaybeMessage<SystemMessage>(nullptr);
  }

  SystemMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemMessage& from);
  void MergeFrom(const SystemMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RELAY_PAYLOAD.SystemMessage";
  }
  protected:
  explicit SystemMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relay_2eproto);
    return ::descriptor_table_relay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameserverFieldNumber = 3,
    kEventFieldNumber = 1,
    kPlayerCountChangeFieldNumber = 2,
  };
  // .RELAY_PAYLOAD.GSMetric gameserver = 3;
  bool has_gameserver() const;
  private:
  bool _internal_has_gameserver() const;
  public:
  void clear_gameserver();
  const ::RELAY_PAYLOAD::GSMetric& gameserver() const;
  ::RELAY_PAYLOAD::GSMetric* release_gameserver();
  ::RELAY_PAYLOAD::GSMetric* mutable_gameserver();
  void set_allocated_gameserver(::RELAY_PAYLOAD::GSMetric* gameserver);
  private:
  const ::RELAY_PAYLOAD::GSMetric& _internal_gameserver() const;
  ::RELAY_PAYLOAD::GSMetric* _internal_mutable_gameserver();
  public:
  void unsafe_arena_set_allocated_gameserver(
      ::RELAY_PAYLOAD::GSMetric* gameserver);
  ::RELAY_PAYLOAD::GSMetric* unsafe_arena_release_gameserver();

  // .RELAY_PAYLOAD.SystemEvent event = 1;
  void clear_event();
  ::RELAY_PAYLOAD::SystemEvent event() const;
  void set_event(::RELAY_PAYLOAD::SystemEvent value);
  private:
  ::RELAY_PAYLOAD::SystemEvent _internal_event() const;
  void _internal_set_event(::RELAY_PAYLOAD::SystemEvent value);
  public:

  // int32 player_count_change = 2;
  void clear_player_count_change();
  ::PROTOBUF_NAMESPACE_ID::int32 player_count_change() const;
  void set_player_count_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_count_change() const;
  void _internal_set_player_count_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RELAY_PAYLOAD.SystemMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::RELAY_PAYLOAD::GSMetric* gameserver_;
  int event_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_count_change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relay_2eproto;
};
// -------------------------------------------------------------------

class GSMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RELAY_PAYLOAD.GSMetric) */ {
 public:
  inline GSMetric() : GSMetric(nullptr) {};
  virtual ~GSMetric();

  GSMetric(const GSMetric& from);
  GSMetric(GSMetric&& from) noexcept
    : GSMetric() {
    *this = ::std::move(from);
  }

  inline GSMetric& operator=(const GSMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline GSMetric& operator=(GSMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GSMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GSMetric* internal_default_instance() {
    return reinterpret_cast<const GSMetric*>(
               &_GSMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GSMetric& a, GSMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(GSMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GSMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GSMetric* New() const final {
    return CreateMaybeMessage<GSMetric>(nullptr);
  }

  GSMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GSMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GSMetric& from);
  void MergeFrom(const GSMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GSMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RELAY_PAYLOAD.GSMetric";
  }
  protected:
  explicit GSMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relay_2eproto);
    return ::descriptor_table_relay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCountFieldNumber = 1,
    kMatchCountFieldNumber = 2,
  };
  // int32 player_count = 1;
  void clear_player_count();
  ::PROTOBUF_NAMESPACE_ID::int32 player_count() const;
  void set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_count() const;
  void _internal_set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 match_count = 2;
  void clear_match_count();
  ::PROTOBUF_NAMESPACE_ID::int32 match_count() const;
  void set_match_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_count() const;
  void _internal_set_match_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RELAY_PAYLOAD.GSMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_relay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RelayPayload

// .RELAY_PAYLOAD.RelayType type = 1;
inline void RelayPayload::clear_type() {
  type_ = 0;
}
inline ::RELAY_PAYLOAD::RelayType RelayPayload::_internal_type() const {
  return static_cast< ::RELAY_PAYLOAD::RelayType >(type_);
}
inline ::RELAY_PAYLOAD::RelayType RelayPayload::type() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.RelayPayload.type)
  return _internal_type();
}
inline void RelayPayload::_internal_set_type(::RELAY_PAYLOAD::RelayType value) {
  
  type_ = value;
}
inline void RelayPayload::set_type(::RELAY_PAYLOAD::RelayType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.RelayPayload.type)
}

// string path = 2;
inline void RelayPayload::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RelayPayload::path() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.RelayPayload.path)
  return _internal_path();
}
inline void RelayPayload::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.RelayPayload.path)
}
inline std::string* RelayPayload::mutable_path() {
  // @@protoc_insertion_point(field_mutable:RELAY_PAYLOAD.RelayPayload.path)
  return _internal_mutable_path();
}
inline const std::string& RelayPayload::_internal_path() const {
  return path_.Get();
}
inline void RelayPayload::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelayPayload::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RELAY_PAYLOAD.RelayPayload.path)
}
inline void RelayPayload::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RELAY_PAYLOAD.RelayPayload.path)
}
inline void RelayPayload::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RELAY_PAYLOAD.RelayPayload.path)
}
inline std::string* RelayPayload::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelayPayload::release_path() {
  // @@protoc_insertion_point(field_release:RELAY_PAYLOAD.RelayPayload.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelayPayload::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RELAY_PAYLOAD.RelayPayload.path)
}
inline std::string* RelayPayload::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RELAY_PAYLOAD.RelayPayload.path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RelayPayload::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RELAY_PAYLOAD.RelayPayload.path)
}

// string key = 3;
inline void RelayPayload::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RelayPayload::key() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.RelayPayload.key)
  return _internal_key();
}
inline void RelayPayload::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.RelayPayload.key)
}
inline std::string* RelayPayload::mutable_key() {
  // @@protoc_insertion_point(field_mutable:RELAY_PAYLOAD.RelayPayload.key)
  return _internal_mutable_key();
}
inline const std::string& RelayPayload::_internal_key() const {
  return key_.Get();
}
inline void RelayPayload::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelayPayload::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RELAY_PAYLOAD.RelayPayload.key)
}
inline void RelayPayload::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RELAY_PAYLOAD.RelayPayload.key)
}
inline void RelayPayload::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RELAY_PAYLOAD.RelayPayload.key)
}
inline std::string* RelayPayload::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelayPayload::release_key() {
  // @@protoc_insertion_point(field_release:RELAY_PAYLOAD.RelayPayload.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelayPayload::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RELAY_PAYLOAD.RelayPayload.key)
}
inline std::string* RelayPayload::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RELAY_PAYLOAD.RelayPayload.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RelayPayload::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RELAY_PAYLOAD.RelayPayload.key)
}

// bytes pkt = 4;
inline void RelayPayload::clear_pkt() {
  pkt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RelayPayload::pkt() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.RelayPayload.pkt)
  return _internal_pkt();
}
inline void RelayPayload::set_pkt(const std::string& value) {
  _internal_set_pkt(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.RelayPayload.pkt)
}
inline std::string* RelayPayload::mutable_pkt() {
  // @@protoc_insertion_point(field_mutable:RELAY_PAYLOAD.RelayPayload.pkt)
  return _internal_mutable_pkt();
}
inline const std::string& RelayPayload::_internal_pkt() const {
  return pkt_.Get();
}
inline void RelayPayload::_internal_set_pkt(const std::string& value) {
  
  pkt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelayPayload::set_pkt(std::string&& value) {
  
  pkt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RELAY_PAYLOAD.RelayPayload.pkt)
}
inline void RelayPayload::set_pkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pkt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RELAY_PAYLOAD.RelayPayload.pkt)
}
inline void RelayPayload::set_pkt(const void* value,
    size_t size) {
  
  pkt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RELAY_PAYLOAD.RelayPayload.pkt)
}
inline std::string* RelayPayload::_internal_mutable_pkt() {
  
  return pkt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelayPayload::release_pkt() {
  // @@protoc_insertion_point(field_release:RELAY_PAYLOAD.RelayPayload.pkt)
  return pkt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelayPayload::set_allocated_pkt(std::string* pkt) {
  if (pkt != nullptr) {
    
  } else {
    
  }
  pkt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pkt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RELAY_PAYLOAD.RelayPayload.pkt)
}
inline std::string* RelayPayload::unsafe_arena_release_pkt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RELAY_PAYLOAD.RelayPayload.pkt)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pkt_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RelayPayload::unsafe_arena_set_allocated_pkt(
    std::string* pkt) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pkt != nullptr) {
    
  } else {
    
  }
  pkt_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pkt, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RELAY_PAYLOAD.RelayPayload.pkt)
}

// .RELAY_PAYLOAD.SystemMessage sys_msg = 5;
inline bool RelayPayload::_internal_has_sys_msg() const {
  return this != internal_default_instance() && sys_msg_ != nullptr;
}
inline bool RelayPayload::has_sys_msg() const {
  return _internal_has_sys_msg();
}
inline void RelayPayload::clear_sys_msg() {
  if (GetArena() == nullptr && sys_msg_ != nullptr) {
    delete sys_msg_;
  }
  sys_msg_ = nullptr;
}
inline const ::RELAY_PAYLOAD::SystemMessage& RelayPayload::_internal_sys_msg() const {
  const ::RELAY_PAYLOAD::SystemMessage* p = sys_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RELAY_PAYLOAD::SystemMessage*>(
      &::RELAY_PAYLOAD::_SystemMessage_default_instance_);
}
inline const ::RELAY_PAYLOAD::SystemMessage& RelayPayload::sys_msg() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.RelayPayload.sys_msg)
  return _internal_sys_msg();
}
inline void RelayPayload::unsafe_arena_set_allocated_sys_msg(
    ::RELAY_PAYLOAD::SystemMessage* sys_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_msg_);
  }
  sys_msg_ = sys_msg;
  if (sys_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RELAY_PAYLOAD.RelayPayload.sys_msg)
}
inline ::RELAY_PAYLOAD::SystemMessage* RelayPayload::release_sys_msg() {
  auto temp = unsafe_arena_release_sys_msg();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RELAY_PAYLOAD::SystemMessage* RelayPayload::unsafe_arena_release_sys_msg() {
  // @@protoc_insertion_point(field_release:RELAY_PAYLOAD.RelayPayload.sys_msg)
  
  ::RELAY_PAYLOAD::SystemMessage* temp = sys_msg_;
  sys_msg_ = nullptr;
  return temp;
}
inline ::RELAY_PAYLOAD::SystemMessage* RelayPayload::_internal_mutable_sys_msg() {
  
  if (sys_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::RELAY_PAYLOAD::SystemMessage>(GetArena());
    sys_msg_ = p;
  }
  return sys_msg_;
}
inline ::RELAY_PAYLOAD::SystemMessage* RelayPayload::mutable_sys_msg() {
  // @@protoc_insertion_point(field_mutable:RELAY_PAYLOAD.RelayPayload.sys_msg)
  return _internal_mutable_sys_msg();
}
inline void RelayPayload::set_allocated_sys_msg(::RELAY_PAYLOAD::SystemMessage* sys_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sys_msg_;
  }
  if (sys_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sys_msg);
    if (message_arena != submessage_arena) {
      sys_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_msg, submessage_arena);
    }
    
  } else {
    
  }
  sys_msg_ = sys_msg;
  // @@protoc_insertion_point(field_set_allocated:RELAY_PAYLOAD.RelayPayload.sys_msg)
}

// int64 timestamp = 6;
inline void RelayPayload::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RelayPayload::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RelayPayload::timestamp() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.RelayPayload.timestamp)
  return _internal_timestamp();
}
inline void RelayPayload::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RelayPayload::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.RelayPayload.timestamp)
}

// -------------------------------------------------------------------

// SystemMessage

// .RELAY_PAYLOAD.SystemEvent event = 1;
inline void SystemMessage::clear_event() {
  event_ = 0;
}
inline ::RELAY_PAYLOAD::SystemEvent SystemMessage::_internal_event() const {
  return static_cast< ::RELAY_PAYLOAD::SystemEvent >(event_);
}
inline ::RELAY_PAYLOAD::SystemEvent SystemMessage::event() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.SystemMessage.event)
  return _internal_event();
}
inline void SystemMessage::_internal_set_event(::RELAY_PAYLOAD::SystemEvent value) {
  
  event_ = value;
}
inline void SystemMessage::set_event(::RELAY_PAYLOAD::SystemEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.SystemMessage.event)
}

// int32 player_count_change = 2;
inline void SystemMessage::clear_player_count_change() {
  player_count_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemMessage::_internal_player_count_change() const {
  return player_count_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemMessage::player_count_change() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.SystemMessage.player_count_change)
  return _internal_player_count_change();
}
inline void SystemMessage::_internal_set_player_count_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_count_change_ = value;
}
inline void SystemMessage::set_player_count_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_count_change(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.SystemMessage.player_count_change)
}

// .RELAY_PAYLOAD.GSMetric gameserver = 3;
inline bool SystemMessage::_internal_has_gameserver() const {
  return this != internal_default_instance() && gameserver_ != nullptr;
}
inline bool SystemMessage::has_gameserver() const {
  return _internal_has_gameserver();
}
inline void SystemMessage::clear_gameserver() {
  if (GetArena() == nullptr && gameserver_ != nullptr) {
    delete gameserver_;
  }
  gameserver_ = nullptr;
}
inline const ::RELAY_PAYLOAD::GSMetric& SystemMessage::_internal_gameserver() const {
  const ::RELAY_PAYLOAD::GSMetric* p = gameserver_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RELAY_PAYLOAD::GSMetric*>(
      &::RELAY_PAYLOAD::_GSMetric_default_instance_);
}
inline const ::RELAY_PAYLOAD::GSMetric& SystemMessage::gameserver() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.SystemMessage.gameserver)
  return _internal_gameserver();
}
inline void SystemMessage::unsafe_arena_set_allocated_gameserver(
    ::RELAY_PAYLOAD::GSMetric* gameserver) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameserver_);
  }
  gameserver_ = gameserver;
  if (gameserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RELAY_PAYLOAD.SystemMessage.gameserver)
}
inline ::RELAY_PAYLOAD::GSMetric* SystemMessage::release_gameserver() {
  auto temp = unsafe_arena_release_gameserver();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::RELAY_PAYLOAD::GSMetric* SystemMessage::unsafe_arena_release_gameserver() {
  // @@protoc_insertion_point(field_release:RELAY_PAYLOAD.SystemMessage.gameserver)
  
  ::RELAY_PAYLOAD::GSMetric* temp = gameserver_;
  gameserver_ = nullptr;
  return temp;
}
inline ::RELAY_PAYLOAD::GSMetric* SystemMessage::_internal_mutable_gameserver() {
  
  if (gameserver_ == nullptr) {
    auto* p = CreateMaybeMessage<::RELAY_PAYLOAD::GSMetric>(GetArena());
    gameserver_ = p;
  }
  return gameserver_;
}
inline ::RELAY_PAYLOAD::GSMetric* SystemMessage::mutable_gameserver() {
  // @@protoc_insertion_point(field_mutable:RELAY_PAYLOAD.SystemMessage.gameserver)
  return _internal_mutable_gameserver();
}
inline void SystemMessage::set_allocated_gameserver(::RELAY_PAYLOAD::GSMetric* gameserver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gameserver_;
  }
  if (gameserver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gameserver);
    if (message_arena != submessage_arena) {
      gameserver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameserver, submessage_arena);
    }
    
  } else {
    
  }
  gameserver_ = gameserver;
  // @@protoc_insertion_point(field_set_allocated:RELAY_PAYLOAD.SystemMessage.gameserver)
}

// -------------------------------------------------------------------

// GSMetric

// int32 player_count = 1;
inline void GSMetric::clear_player_count() {
  player_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GSMetric::_internal_player_count() const {
  return player_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GSMetric::player_count() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.GSMetric.player_count)
  return _internal_player_count();
}
inline void GSMetric::_internal_set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_count_ = value;
}
inline void GSMetric::set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_count(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.GSMetric.player_count)
}

// int32 match_count = 2;
inline void GSMetric::clear_match_count() {
  match_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GSMetric::_internal_match_count() const {
  return match_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GSMetric::match_count() const {
  // @@protoc_insertion_point(field_get:RELAY_PAYLOAD.GSMetric.match_count)
  return _internal_match_count();
}
inline void GSMetric::_internal_set_match_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  match_count_ = value;
}
inline void GSMetric::set_match_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_count(value);
  // @@protoc_insertion_point(field_set:RELAY_PAYLOAD.GSMetric.match_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RELAY_PAYLOAD

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RELAY_PAYLOAD::RelayType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RELAY_PAYLOAD::RelayType>() {
  return ::RELAY_PAYLOAD::RelayType_descriptor();
}
template <> struct is_proto_enum< ::RELAY_PAYLOAD::SystemEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RELAY_PAYLOAD::SystemEvent>() {
  return ::RELAY_PAYLOAD::SystemEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_relay_2eproto
