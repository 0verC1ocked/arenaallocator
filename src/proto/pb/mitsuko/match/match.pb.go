// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: match.proto

package match

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	payload "pb/mitsuko/payload"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IPCMessageType int32

const (
	IPCMessageType_IPC_NONE                 IPCMessageType = 0
	IPCMessageType_IPC_CREATE_MATCH_REQUEST IPCMessageType = 1
	IPCMessageType_IPC_MATCH_REQUEST        IPCMessageType = 2
)

// Enum value maps for IPCMessageType.
var (
	IPCMessageType_name = map[int32]string{
		0: "IPC_NONE",
		1: "IPC_CREATE_MATCH_REQUEST",
		2: "IPC_MATCH_REQUEST",
	}
	IPCMessageType_value = map[string]int32{
		"IPC_NONE":                 0,
		"IPC_CREATE_MATCH_REQUEST": 1,
		"IPC_MATCH_REQUEST":        2,
	}
)

func (x IPCMessageType) Enum() *IPCMessageType {
	p := new(IPCMessageType)
	*p = x
	return p
}

func (x IPCMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPCMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[0].Descriptor()
}

func (IPCMessageType) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[0]
}

func (x IPCMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPCMessageType.Descriptor instead.
func (IPCMessageType) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

type M_PlayStates int32

const (
	M_PlayStates_M_MatchMaked M_PlayStates = 0
	M_PlayStates_M_Ready      M_PlayStates = 1
	M_PlayStates_M_Bowling    M_PlayStates = 2
	M_PlayStates_M_Batting    M_PlayStates = 3
)

// Enum value maps for M_PlayStates.
var (
	M_PlayStates_name = map[int32]string{
		0: "M_MatchMaked",
		1: "M_Ready",
		2: "M_Bowling",
		3: "M_Batting",
	}
	M_PlayStates_value = map[string]int32{
		"M_MatchMaked": 0,
		"M_Ready":      1,
		"M_Bowling":    2,
		"M_Batting":    3,
	}
)

func (x M_PlayStates) Enum() *M_PlayStates {
	p := new(M_PlayStates)
	*p = x
	return p
}

func (x M_PlayStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (M_PlayStates) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[1].Descriptor()
}

func (M_PlayStates) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[1]
}

func (x M_PlayStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use M_PlayStates.Descriptor instead.
func (M_PlayStates) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

type ConnectionState int32

const (
	ConnectionState_NotConnected ConnectionState = 0
	ConnectionState_Connected    ConnectionState = 1
	ConnectionState_Disconnected ConnectionState = 2
	ConnectionState_Reconnecting ConnectionState = 3
)

// Enum value maps for ConnectionState.
var (
	ConnectionState_name = map[int32]string{
		0: "NotConnected",
		1: "Connected",
		2: "Disconnected",
		3: "Reconnecting",
	}
	ConnectionState_value = map[string]int32{
		"NotConnected": 0,
		"Connected":    1,
		"Disconnected": 2,
		"Reconnecting": 3,
	}
)

func (x ConnectionState) Enum() *ConnectionState {
	p := new(ConnectionState)
	*p = x
	return p
}

func (x ConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[2].Descriptor()
}

func (ConnectionState) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[2]
}

func (x ConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionState.Descriptor instead.
func (ConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

type ACK int32

const (
	ACK_None                ACK = 0
	ACK_UserReady           ACK = 1
	ACK_MatchReady          ACK = 2
	ACK_InningsReady        ACK = 3
	ACK_PlayerSelected      ACK = 4
	ACK_NextBowlerSelection ACK = 5
	ACK_NextBowlerSelected  ACK = 6
	ACK_StartBallSent       ACK = 7
	ACK_StartBallAcked      ACK = 8
	ACK_EndBall             ACK = 9
	ACK_EndInnings          ACK = 10
	ACK_Reconnected         ACK = 11
)

// Enum value maps for ACK.
var (
	ACK_name = map[int32]string{
		0:  "None",
		1:  "UserReady",
		2:  "MatchReady",
		3:  "InningsReady",
		4:  "PlayerSelected",
		5:  "NextBowlerSelection",
		6:  "NextBowlerSelected",
		7:  "StartBallSent",
		8:  "StartBallAcked",
		9:  "EndBall",
		10: "EndInnings",
		11: "Reconnected",
	}
	ACK_value = map[string]int32{
		"None":                0,
		"UserReady":           1,
		"MatchReady":          2,
		"InningsReady":        3,
		"PlayerSelected":      4,
		"NextBowlerSelection": 5,
		"NextBowlerSelected":  6,
		"StartBallSent":       7,
		"StartBallAcked":      8,
		"EndBall":             9,
		"EndInnings":          10,
		"Reconnected":         11,
	}
)

func (x ACK) Enum() *ACK {
	p := new(ACK)
	*p = x
	return p
}

func (x ACK) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACK) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[3].Descriptor()
}

func (ACK) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[3]
}

func (x ACK) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACK.Descriptor instead.
func (ACK) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

type JoinStates int32

const (
	JoinStates_NoJoins    JoinStates = 0
	JoinStates_FirstJoin  JoinStates = 1
	JoinStates_SecondJoin JoinStates = 2
	JoinStates_BothJoins  JoinStates = 3
)

// Enum value maps for JoinStates.
var (
	JoinStates_name = map[int32]string{
		0: "NoJoins",
		1: "FirstJoin",
		2: "SecondJoin",
		3: "BothJoins",
	}
	JoinStates_value = map[string]int32{
		"NoJoins":    0,
		"FirstJoin":  1,
		"SecondJoin": 2,
		"BothJoins":  3,
	}
)

func (x JoinStates) Enum() *JoinStates {
	p := new(JoinStates)
	*p = x
	return p
}

func (x JoinStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinStates) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[4].Descriptor()
}

func (JoinStates) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[4]
}

func (x JoinStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinStates.Descriptor instead.
func (JoinStates) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

type BallStates int32

const (
	BallStates_NoBallState   BallStates = 0
	BallStates_BallPublished BallStates = 1
	BallStates_ShotPublished BallStates = 2
	BallStates_Outcome       BallStates = 3
	BallStates_Ended         BallStates = 4
)

// Enum value maps for BallStates.
var (
	BallStates_name = map[int32]string{
		0: "NoBallState",
		1: "BallPublished",
		2: "ShotPublished",
		3: "Outcome",
		4: "Ended",
	}
	BallStates_value = map[string]int32{
		"NoBallState":   0,
		"BallPublished": 1,
		"ShotPublished": 2,
		"Outcome":       3,
		"Ended":         4,
	}
)

func (x BallStates) Enum() *BallStates {
	p := new(BallStates)
	*p = x
	return p
}

func (x BallStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BallStates) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[5].Descriptor()
}

func (BallStates) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[5]
}

func (x BallStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BallStates.Descriptor instead.
func (BallStates) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{5}
}

type Brackets int32

const (
	Brackets_NoBracket Brackets = 0
	Brackets_Zero      Brackets = 1
	Brackets_One       Brackets = 2
	Brackets_Two       Brackets = 3
	Brackets_Four      Brackets = 4
	Brackets_Six       Brackets = 5
)

// Enum value maps for Brackets.
var (
	Brackets_name = map[int32]string{
		0: "NoBracket",
		1: "Zero",
		2: "One",
		3: "Two",
		4: "Four",
		5: "Six",
	}
	Brackets_value = map[string]int32{
		"NoBracket": 0,
		"Zero":      1,
		"One":       2,
		"Two":       3,
		"Four":      4,
		"Six":       5,
	}
)

func (x Brackets) Enum() *Brackets {
	p := new(Brackets)
	*p = x
	return p
}

func (x Brackets) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Brackets) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[6].Descriptor()
}

func (Brackets) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[6]
}

func (x Brackets) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Brackets.Descriptor instead.
func (Brackets) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{6}
}

type Skulls int32

const (
	Skulls_NoSkull Skulls = 0
	Skulls_GREEN   Skulls = 1
	Skulls_YELLOW  Skulls = 2
	Skulls_RED     Skulls = 3
)

// Enum value maps for Skulls.
var (
	Skulls_name = map[int32]string{
		0: "NoSkull",
		1: "GREEN",
		2: "YELLOW",
		3: "RED",
	}
	Skulls_value = map[string]int32{
		"NoSkull": 0,
		"GREEN":   1,
		"YELLOW":  2,
		"RED":     3,
	}
)

func (x Skulls) Enum() *Skulls {
	p := new(Skulls)
	*p = x
	return p
}

func (x Skulls) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Skulls) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[7].Descriptor()
}

func (Skulls) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[7]
}

func (x Skulls) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Skulls.Descriptor instead.
func (Skulls) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{7}
}

type SA int32

const (
	SA_NoneSA       SA = 0
	SA_Smash        SA = 1
	SA_TwoX         SA = 2
	SA_BowlerSteal  SA = 3
	SA_Yorker       SA = 4
	SA_BatsmanSteal SA = 5
	SA_Rage         SA = 6
	SA_Boomerang    SA = 7
	SA_HalfRuns     SA = 8
	SA_Hex          SA = 9
	SA_Immortal     SA = 10
	SA_Doom         SA = 11
	SA_FiftyFifty   SA = 12
	SA_SAHit        SA = 13
	SA_Choke        SA = 14
	SA_Flashbang    SA = 15
	SA_Assault      SA = 16
	SA_AllIn        SA = 17
	SA_Powersteal   SA = 18
	SA_Triplet      SA = 19
	SA_Overload     SA = 20
	SA_Purge        SA = 21
)

// Enum value maps for SA.
var (
	SA_name = map[int32]string{
		0:  "NoneSA",
		1:  "Smash",
		2:  "TwoX",
		3:  "BowlerSteal",
		4:  "Yorker",
		5:  "BatsmanSteal",
		6:  "Rage",
		7:  "Boomerang",
		8:  "HalfRuns",
		9:  "Hex",
		10: "Immortal",
		11: "Doom",
		12: "FiftyFifty",
		13: "SAHit",
		14: "Choke",
		15: "Flashbang",
		16: "Assault",
		17: "AllIn",
		18: "Powersteal",
		19: "Triplet",
		20: "Overload",
		21: "Purge",
	}
	SA_value = map[string]int32{
		"NoneSA":       0,
		"Smash":        1,
		"TwoX":         2,
		"BowlerSteal":  3,
		"Yorker":       4,
		"BatsmanSteal": 5,
		"Rage":         6,
		"Boomerang":    7,
		"HalfRuns":     8,
		"Hex":          9,
		"Immortal":     10,
		"Doom":         11,
		"FiftyFifty":   12,
		"SAHit":        13,
		"Choke":        14,
		"Flashbang":    15,
		"Assault":      16,
		"AllIn":        17,
		"Powersteal":   18,
		"Triplet":      19,
		"Overload":     20,
		"Purge":        21,
	}
)

func (x SA) Enum() *SA {
	p := new(SA)
	*p = x
	return p
}

func (x SA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SA) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[8].Descriptor()
}

func (SA) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[8]
}

func (x SA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SA.Descriptor instead.
func (SA) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{8}
}

type Strike int32

const (
	Strike_NoStrike  Strike = 0
	Strike_OnStrike  Strike = 1
	Strike_OffStrike Strike = 2
)

// Enum value maps for Strike.
var (
	Strike_name = map[int32]string{
		0: "NoStrike",
		1: "OnStrike",
		2: "OffStrike",
	}
	Strike_value = map[string]int32{
		"NoStrike":  0,
		"OnStrike":  1,
		"OffStrike": 2,
	}
)

func (x Strike) Enum() *Strike {
	p := new(Strike)
	*p = x
	return p
}

func (x Strike) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Strike) Descriptor() protoreflect.EnumDescriptor {
	return file_match_proto_enumTypes[9].Descriptor()
}

func (Strike) Type() protoreflect.EnumType {
	return &file_match_proto_enumTypes[9]
}

func (x Strike) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Strike.Descriptor instead.
func (Strike) EnumDescriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{9}
}

type IPCMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           IPCMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=MATCH.IPCMessageType" json:"type,omitempty"`
	SerializedData []byte         `protobuf:"bytes,2,opt,name=serializedData,proto3" json:"serializedData,omitempty"`
}

func (x *IPCMessage) Reset() {
	*x = IPCMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPCMessage) ProtoMessage() {}

func (x *IPCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPCMessage.ProtoReflect.Descriptor instead.
func (*IPCMessage) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *IPCMessage) GetType() IPCMessageType {
	if x != nil {
		return x.Type
	}
	return IPCMessageType_IPC_NONE
}

func (x *IPCMessage) GetSerializedData() []byte {
	if x != nil {
		return x.SerializedData
	}
	return nil
}

type CreateMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId             string            `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	HomeUserId          string            `protobuf:"bytes,2,opt,name=homeUserId,proto3" json:"homeUserId,omitempty"`
	AwayUserId          string            `protobuf:"bytes,3,opt,name=awayUserId,proto3" json:"awayUserId,omitempty"`
	HomeLineup          []*payload.Player `protobuf:"bytes,4,rep,name=home_lineup,json=homeLineup,proto3" json:"home_lineup,omitempty"`
	AwayLineup          []*payload.Player `protobuf:"bytes,5,rep,name=away_lineup,json=awayLineup,proto3" json:"away_lineup,omitempty"`
	FirstBattingUser    string            `protobuf:"bytes,6,opt,name=firstBattingUser,proto3" json:"firstBattingUser,omitempty"`
	IsHomeBot           bool              `protobuf:"varint,7,opt,name=isHomeBot,proto3" json:"isHomeBot,omitempty"`
	IsAwayBot           bool              `protobuf:"varint,8,opt,name=isAwayBot,proto3" json:"isAwayBot,omitempty"`
	BatsmanManaRequired int32             `protobuf:"varint,9,opt,name=batsmanManaRequired,proto3" json:"batsmanManaRequired,omitempty"`
	BowlerManaRequired  int32             `protobuf:"varint,10,opt,name=bowlerManaRequired,proto3" json:"bowlerManaRequired,omitempty"`
	IsRPSEnabled        bool              `protobuf:"varint,11,opt,name=isRPSEnabled,proto3" json:"isRPSEnabled,omitempty"`
	IsPassivesEnabled   bool              `protobuf:"varint,12,opt,name=isPassivesEnabled,proto3" json:"isPassivesEnabled,omitempty"`
	MaxOvers            int32             `protobuf:"varint,13,opt,name=maxOvers,proto3" json:"maxOvers,omitempty"`
	IsFtueMatch         bool              `protobuf:"varint,14,opt,name=isFtueMatch,proto3" json:"isFtueMatch,omitempty"`
}

func (x *CreateMatchRequest) Reset() {
	*x = CreateMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchRequest) ProtoMessage() {}

func (x *CreateMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchRequest.ProtoReflect.Descriptor instead.
func (*CreateMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *CreateMatchRequest) GetHomeUserId() string {
	if x != nil {
		return x.HomeUserId
	}
	return ""
}

func (x *CreateMatchRequest) GetAwayUserId() string {
	if x != nil {
		return x.AwayUserId
	}
	return ""
}

func (x *CreateMatchRequest) GetHomeLineup() []*payload.Player {
	if x != nil {
		return x.HomeLineup
	}
	return nil
}

func (x *CreateMatchRequest) GetAwayLineup() []*payload.Player {
	if x != nil {
		return x.AwayLineup
	}
	return nil
}

func (x *CreateMatchRequest) GetFirstBattingUser() string {
	if x != nil {
		return x.FirstBattingUser
	}
	return ""
}

func (x *CreateMatchRequest) GetIsHomeBot() bool {
	if x != nil {
		return x.IsHomeBot
	}
	return false
}

func (x *CreateMatchRequest) GetIsAwayBot() bool {
	if x != nil {
		return x.IsAwayBot
	}
	return false
}

func (x *CreateMatchRequest) GetBatsmanManaRequired() int32 {
	if x != nil {
		return x.BatsmanManaRequired
	}
	return 0
}

func (x *CreateMatchRequest) GetBowlerManaRequired() int32 {
	if x != nil {
		return x.BowlerManaRequired
	}
	return 0
}

func (x *CreateMatchRequest) GetIsRPSEnabled() bool {
	if x != nil {
		return x.IsRPSEnabled
	}
	return false
}

func (x *CreateMatchRequest) GetIsPassivesEnabled() bool {
	if x != nil {
		return x.IsPassivesEnabled
	}
	return false
}

func (x *CreateMatchRequest) GetMaxOvers() int32 {
	if x != nil {
		return x.MaxOvers
	}
	return 0
}

func (x *CreateMatchRequest) GetIsFtueMatch() bool {
	if x != nil {
		return x.IsFtueMatch
	}
	return false
}

type EndMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   string            `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Team1Data *EndMatchUserData `protobuf:"bytes,2,opt,name=team1_data,json=team1Data,proto3" json:"team1_data,omitempty"`
	Team2Data *EndMatchUserData `protobuf:"bytes,3,opt,name=team2_data,json=team2Data,proto3" json:"team2_data,omitempty"`
	WinnerId  string            `protobuf:"bytes,4,opt,name=winnerId,proto3" json:"winnerId,omitempty"`
}

func (x *EndMatchRequest) Reset() {
	*x = EndMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMatchRequest) ProtoMessage() {}

func (x *EndMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMatchRequest.ProtoReflect.Descriptor instead.
func (*EndMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

func (x *EndMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *EndMatchRequest) GetTeam1Data() *EndMatchUserData {
	if x != nil {
		return x.Team1Data
	}
	return nil
}

func (x *EndMatchRequest) GetTeam2Data() *EndMatchUserData {
	if x != nil {
		return x.Team2Data
	}
	return nil
}

func (x *EndMatchRequest) GetWinnerId() string {
	if x != nil {
		return x.WinnerId
	}
	return ""
}

type EndMatchUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Total      int32  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Wickets    int32  `protobuf:"varint,3,opt,name=wickets,proto3" json:"wickets,omitempty"`
	BallsFaced int32  `protobuf:"varint,4,opt,name=balls_faced,json=ballsFaced,proto3" json:"balls_faced,omitempty"`
	Quit       bool   `protobuf:"varint,5,opt,name=quit,proto3" json:"quit,omitempty"`
}

func (x *EndMatchUserData) Reset() {
	*x = EndMatchUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndMatchUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndMatchUserData) ProtoMessage() {}

func (x *EndMatchUserData) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndMatchUserData.ProtoReflect.Descriptor instead.
func (*EndMatchUserData) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

func (x *EndMatchUserData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EndMatchUserData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EndMatchUserData) GetWickets() int32 {
	if x != nil {
		return x.Wickets
	}
	return 0
}

func (x *EndMatchUserData) GetBallsFaced() int32 {
	if x != nil {
		return x.BallsFaced
	}
	return 0
}

func (x *EndMatchUserData) GetQuit() bool {
	if x != nil {
		return x.Quit
	}
	return false
}

type MatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId []string `protobuf:"bytes,1,rep,name=MatchId,proto3" json:"MatchId,omitempty"`
	Home    []string `protobuf:"bytes,2,rep,name=Home,proto3" json:"Home,omitempty"`
	Away    []string `protobuf:"bytes,3,rep,name=Away,proto3" json:"Away,omitempty"`
}

func (x *MatchList) Reset() {
	*x = MatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchList) ProtoMessage() {}

func (x *MatchList) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchList.ProtoReflect.Descriptor instead.
func (*MatchList) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

func (x *MatchList) GetMatchId() []string {
	if x != nil {
		return x.MatchId
	}
	return nil
}

func (x *MatchList) GetHome() []string {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *MatchList) GetAway() []string {
	if x != nil {
		return x.Away
	}
	return nil
}

type SAInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  SA    `protobuf:"varint,1,opt,name=type,proto3,enum=MATCH.SA" json:"type,omitempty"`
	DurationLeft          int32 `protobuf:"varint,2,opt,name=duration_left,json=durationLeft,proto3" json:"duration_left,omitempty"`
	AppliedForCurrentBall bool  `protobuf:"varint,3,opt,name=applied_for_current_ball,json=appliedForCurrentBall,proto3" json:"applied_for_current_ball,omitempty"`
	MaxDuration           int32 `protobuf:"varint,4,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
}

func (x *SAInfo) Reset() {
	*x = SAInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAInfo) ProtoMessage() {}

func (x *SAInfo) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAInfo.ProtoReflect.Descriptor instead.
func (*SAInfo) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{5}
}

func (x *SAInfo) GetType() SA {
	if x != nil {
		return x.Type
	}
	return SA_NoneSA
}

func (x *SAInfo) GetDurationLeft() int32 {
	if x != nil {
		return x.DurationLeft
	}
	return 0
}

func (x *SAInfo) GetAppliedForCurrentBall() bool {
	if x != nil {
		return x.AppliedForCurrentBall
	}
	return false
}

func (x *SAInfo) GetMaxDuration() int32 {
	if x != nil {
		return x.MaxDuration
	}
	return 0
}

type M_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayState       M_PlayStates    `protobuf:"varint,1,opt,name=playState,proto3,enum=MATCH.M_PlayStates" json:"playState,omitempty"`
	ConnectionState ConnectionState `protobuf:"varint,2,opt,name=connectionState,proto3,enum=MATCH.ConnectionState" json:"connectionState,omitempty"`
	OpponentUID     string          `protobuf:"bytes,3,opt,name=opponentUID,proto3" json:"opponentUID,omitempty"`
	Ack             ACK             `protobuf:"varint,4,opt,name=ack,proto3,enum=MATCH.ACK" json:"ack,omitempty"`
	AutoPlay        bool            `protobuf:"varint,5,opt,name=auto_play,json=autoPlay,proto3" json:"auto_play,omitempty"`
	ManaFill        int32           `protobuf:"varint,6,opt,name=mana_fill,json=manaFill,proto3" json:"mana_fill,omitempty"`
	SaInfo          *SAInfo         `protobuf:"bytes,7,opt,name=sa_info,json=saInfo,proto3" json:"sa_info,omitempty"`
	Id              string          `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *M_UserInfo) Reset() {
	*x = M_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M_UserInfo) ProtoMessage() {}

func (x *M_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M_UserInfo.ProtoReflect.Descriptor instead.
func (*M_UserInfo) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{6}
}

func (x *M_UserInfo) GetPlayState() M_PlayStates {
	if x != nil {
		return x.PlayState
	}
	return M_PlayStates_M_MatchMaked
}

func (x *M_UserInfo) GetConnectionState() ConnectionState {
	if x != nil {
		return x.ConnectionState
	}
	return ConnectionState_NotConnected
}

func (x *M_UserInfo) GetOpponentUID() string {
	if x != nil {
		return x.OpponentUID
	}
	return ""
}

func (x *M_UserInfo) GetAck() ACK {
	if x != nil {
		return x.Ack
	}
	return ACK_None
}

func (x *M_UserInfo) GetAutoPlay() bool {
	if x != nil {
		return x.AutoPlay
	}
	return false
}

func (x *M_UserInfo) GetManaFill() int32 {
	if x != nil {
		return x.ManaFill
	}
	return 0
}

func (x *M_UserInfo) GetSaInfo() *SAInfo {
	if x != nil {
		return x.SaInfo
	}
	return nil
}

func (x *M_UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type M_TShot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Run               int32    `protobuf:"varint,3,opt,name=run,proto3" json:"run,omitempty"`
	Bracket           Brackets `protobuf:"varint,4,opt,name=bracket,proto3,enum=MATCH.Brackets" json:"bracket,omitempty"`
	Probability       float32  `protobuf:"fixed32,5,opt,name=probability,proto3" json:"probability,omitempty"`
	WicketChance      float32  `protobuf:"fixed32,6,opt,name=wicket_chance,json=wicketChance,proto3" json:"wicket_chance,omitempty"`
	BallValue         float64  `protobuf:"fixed64,7,opt,name=ball_value,json=ballValue,proto3" json:"ball_value,omitempty"`
	ShotValue         float64  `protobuf:"fixed64,8,opt,name=shot_value,json=shotValue,proto3" json:"shot_value,omitempty"`
	Locked            bool     `protobuf:"varint,9,opt,name=locked,proto3" json:"locked,omitempty"`
	ShotHidden        bool     `protobuf:"varint,10,opt,name=shot_hidden,json=shotHidden,proto3" json:"shot_hidden,omitempty"`
	ProbabilityHidden bool     `protobuf:"varint,11,opt,name=probability_hidden,json=probabilityHidden,proto3" json:"probability_hidden,omitempty"`
}

func (x *M_TShot) Reset() {
	*x = M_TShot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M_TShot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M_TShot) ProtoMessage() {}

func (x *M_TShot) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M_TShot.ProtoReflect.Descriptor instead.
func (*M_TShot) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{7}
}

func (x *M_TShot) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *M_TShot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *M_TShot) GetRun() int32 {
	if x != nil {
		return x.Run
	}
	return 0
}

func (x *M_TShot) GetBracket() Brackets {
	if x != nil {
		return x.Bracket
	}
	return Brackets_NoBracket
}

func (x *M_TShot) GetProbability() float32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *M_TShot) GetWicketChance() float32 {
	if x != nil {
		return x.WicketChance
	}
	return 0
}

func (x *M_TShot) GetBallValue() float64 {
	if x != nil {
		return x.BallValue
	}
	return 0
}

func (x *M_TShot) GetShotValue() float64 {
	if x != nil {
		return x.ShotValue
	}
	return 0
}

func (x *M_TShot) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *M_TShot) GetShotHidden() bool {
	if x != nil {
		return x.ShotHidden
	}
	return false
}

func (x *M_TShot) GetProbabilityHidden() bool {
	if x != nil {
		return x.ProbabilityHidden
	}
	return false
}

type BracketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BracketId Brackets `protobuf:"varint,1,opt,name=bracket_id,json=bracketId,proto3,enum=MATCH.Brackets" json:"bracket_id,omitempty"`
	ShotId    int32    `protobuf:"varint,2,opt,name=shot_id,json=shotId,proto3" json:"shot_id,omitempty"`
}

func (x *BracketData) Reset() {
	*x = BracketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BracketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BracketData) ProtoMessage() {}

func (x *BracketData) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BracketData.ProtoReflect.Descriptor instead.
func (*BracketData) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{8}
}

func (x *BracketData) GetBracketId() Brackets {
	if x != nil {
		return x.BracketId
	}
	return Brackets_NoBracket
}

func (x *BracketData) GetShotId() int32 {
	if x != nil {
		return x.ShotId
	}
	return 0
}

type M_TBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value         float64        `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Skull         Skulls         `protobuf:"varint,4,opt,name=skull,proto3,enum=MATCH.Skulls" json:"skull,omitempty"`
	ShotsPossible []*BracketData `protobuf:"bytes,5,rep,name=shots_possible,json=shotsPossible,proto3" json:"shots_possible,omitempty"`
}

func (x *M_TBall) Reset() {
	*x = M_TBall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M_TBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M_TBall) ProtoMessage() {}

func (x *M_TBall) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M_TBall.ProtoReflect.Descriptor instead.
func (*M_TBall) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{9}
}

func (x *M_TBall) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *M_TBall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *M_TBall) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *M_TBall) GetSkull() Skulls {
	if x != nil {
		return x.Skull
	}
	return Skulls_NoSkull
}

func (x *M_TBall) GetShotsPossible() []*BracketData {
	if x != nil {
		return x.ShotsPossible
	}
	return nil
}

type TOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome payload.ShotOutcomes `protobuf:"varint,1,opt,name=outcome,proto3,enum=PAYLOAD.ShotOutcomes" json:"outcome,omitempty"`
	Runs    int32                `protobuf:"varint,2,opt,name=runs,proto3" json:"runs,omitempty"`
	Random  float64              `protobuf:"fixed64,3,opt,name=random,proto3" json:"random,omitempty"`
}

func (x *TOutcome) Reset() {
	*x = TOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOutcome) ProtoMessage() {}

func (x *TOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOutcome.ProtoReflect.Descriptor instead.
func (*TOutcome) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{10}
}

func (x *TOutcome) GetOutcome() payload.ShotOutcomes {
	if x != nil {
		return x.Outcome
	}
	return payload.ShotOutcomes(0)
}

func (x *TOutcome) GetRuns() int32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *TOutcome) GetRandom() float64 {
	if x != nil {
		return x.Random
	}
	return 0
}

type M_CurrentBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State          BallStates `protobuf:"varint,1,opt,name=state,proto3,enum=MATCH.BallStates" json:"state,omitempty"`
	Outcome        *TOutcome  `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Shots          []*M_TShot `protobuf:"bytes,3,rep,name=shots,proto3" json:"shots,omitempty"`
	Balls          []*M_TBall `protobuf:"bytes,4,rep,name=balls,proto3" json:"balls,omitempty"`
	SelectedBall   *M_TBall   `protobuf:"bytes,5,opt,name=selectedBall,proto3" json:"selectedBall,omitempty"`
	SelectedShot   *M_TShot   `protobuf:"bytes,6,opt,name=selectedShot,proto3" json:"selectedShot,omitempty"`
	OverBallNumber int32      `protobuf:"varint,7,opt,name=over_ball_number,json=overBallNumber,proto3" json:"over_ball_number,omitempty"`
}

func (x *M_CurrentBall) Reset() {
	*x = M_CurrentBall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M_CurrentBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M_CurrentBall) ProtoMessage() {}

func (x *M_CurrentBall) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M_CurrentBall.ProtoReflect.Descriptor instead.
func (*M_CurrentBall) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{11}
}

func (x *M_CurrentBall) GetState() BallStates {
	if x != nil {
		return x.State
	}
	return BallStates_NoBallState
}

func (x *M_CurrentBall) GetOutcome() *TOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *M_CurrentBall) GetShots() []*M_TShot {
	if x != nil {
		return x.Shots
	}
	return nil
}

func (x *M_CurrentBall) GetBalls() []*M_TBall {
	if x != nil {
		return x.Balls
	}
	return nil
}

func (x *M_CurrentBall) GetSelectedBall() *M_TBall {
	if x != nil {
		return x.SelectedBall
	}
	return nil
}

func (x *M_CurrentBall) GetSelectedShot() *M_TShot {
	if x != nil {
		return x.SelectedShot
	}
	return nil
}

func (x *M_CurrentBall) GetOverBallNumber() int32 {
	if x != nil {
		return x.OverBallNumber
	}
	return 0
}

type M_Innings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inning                  payload.Innings `protobuf:"varint,1,opt,name=inning,proto3,enum=PAYLOAD.Innings" json:"inning,omitempty"`
	Runs                    int32           `protobuf:"varint,2,opt,name=runs,proto3" json:"runs,omitempty"`
	Balls                   int32           `protobuf:"varint,3,opt,name=balls,proto3" json:"balls,omitempty"`
	Wickets                 int32           `protobuf:"varint,4,opt,name=wickets,proto3" json:"wickets,omitempty"`
	OverNumber              int32           `protobuf:"varint,5,opt,name=over_number,json=overNumber,proto3" json:"over_number,omitempty"`
	MaxBallsPerOver         int32           `protobuf:"varint,6,opt,name=max_balls_per_over,json=maxBallsPerOver,proto3" json:"max_balls_per_over,omitempty"`
	MaxOvers                int32           `protobuf:"varint,7,opt,name=max_overs,json=maxOvers,proto3" json:"max_overs,omitempty"`
	BoundaryCounter         int32           `protobuf:"varint,8,opt,name=boundary_counter,json=boundaryCounter,proto3" json:"boundary_counter,omitempty"`
	GreenShotMissedCounter  int32           `protobuf:"varint,9,opt,name=green_shot_missed_counter,json=greenShotMissedCounter,proto3" json:"green_shot_missed_counter,omitempty"`
	YellowShotMissedCounter int32           `protobuf:"varint,10,opt,name=yellow_shot_missed_counter,json=yellowShotMissedCounter,proto3" json:"yellow_shot_missed_counter,omitempty"`
	UserOnBatting           string          `protobuf:"bytes,11,opt,name=user_on_batting,json=userOnBatting,proto3" json:"user_on_batting,omitempty"`
	UserOnBowling           string          `protobuf:"bytes,12,opt,name=user_on_bowling,json=userOnBowling,proto3" json:"user_on_bowling,omitempty"`
}

func (x *M_Innings) Reset() {
	*x = M_Innings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *M_Innings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*M_Innings) ProtoMessage() {}

func (x *M_Innings) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use M_Innings.ProtoReflect.Descriptor instead.
func (*M_Innings) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{12}
}

func (x *M_Innings) GetInning() payload.Innings {
	if x != nil {
		return x.Inning
	}
	return payload.Innings(0)
}

func (x *M_Innings) GetRuns() int32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *M_Innings) GetBalls() int32 {
	if x != nil {
		return x.Balls
	}
	return 0
}

func (x *M_Innings) GetWickets() int32 {
	if x != nil {
		return x.Wickets
	}
	return 0
}

func (x *M_Innings) GetOverNumber() int32 {
	if x != nil {
		return x.OverNumber
	}
	return 0
}

func (x *M_Innings) GetMaxBallsPerOver() int32 {
	if x != nil {
		return x.MaxBallsPerOver
	}
	return 0
}

func (x *M_Innings) GetMaxOvers() int32 {
	if x != nil {
		return x.MaxOvers
	}
	return 0
}

func (x *M_Innings) GetBoundaryCounter() int32 {
	if x != nil {
		return x.BoundaryCounter
	}
	return 0
}

func (x *M_Innings) GetGreenShotMissedCounter() int32 {
	if x != nil {
		return x.GreenShotMissedCounter
	}
	return 0
}

func (x *M_Innings) GetYellowShotMissedCounter() int32 {
	if x != nil {
		return x.YellowShotMissedCounter
	}
	return 0
}

func (x *M_Innings) GetUserOnBatting() string {
	if x != nil {
		return x.UserOnBatting
	}
	return ""
}

func (x *M_Innings) GetUserOnBowling() string {
	if x != nil {
		return x.UserOnBowling
	}
	return ""
}

type IOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRuns          int32                `protobuf:"varint,1,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	TotalBalls         int32                `protobuf:"varint,2,opt,name=total_balls,json=totalBalls,proto3" json:"total_balls,omitempty"`
	WicketsTaken       int32                `protobuf:"varint,3,opt,name=wickets_taken,json=wicketsTaken,proto3" json:"wickets_taken,omitempty"`
	RunsScored         int32                `protobuf:"varint,4,opt,name=runs_scored,json=runsScored,proto3" json:"runs_scored,omitempty"`
	OriginalRunsScored int32                `protobuf:"varint,5,opt,name=original_runs_scored,json=originalRunsScored,proto3" json:"original_runs_scored,omitempty"`
	BracketId          Brackets             `protobuf:"varint,6,opt,name=bracket_id,json=bracketId,proto3,enum=MATCH.Brackets" json:"bracket_id,omitempty"`
	OverBallNumber     int32                `protobuf:"varint,7,opt,name=over_ball_number,json=overBallNumber,proto3" json:"over_ball_number,omitempty"`
	OverNumber         int32                `protobuf:"varint,8,opt,name=over_number,json=overNumber,proto3" json:"over_number,omitempty"`
	Outcome            payload.ShotOutcomes `protobuf:"varint,9,opt,name=outcome,proto3,enum=PAYLOAD.ShotOutcomes" json:"outcome,omitempty"`
}

func (x *IOutcome) Reset() {
	*x = IOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOutcome) ProtoMessage() {}

func (x *IOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOutcome.ProtoReflect.Descriptor instead.
func (*IOutcome) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{13}
}

func (x *IOutcome) GetTotalRuns() int32 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *IOutcome) GetTotalBalls() int32 {
	if x != nil {
		return x.TotalBalls
	}
	return 0
}

func (x *IOutcome) GetWicketsTaken() int32 {
	if x != nil {
		return x.WicketsTaken
	}
	return 0
}

func (x *IOutcome) GetRunsScored() int32 {
	if x != nil {
		return x.RunsScored
	}
	return 0
}

func (x *IOutcome) GetOriginalRunsScored() int32 {
	if x != nil {
		return x.OriginalRunsScored
	}
	return 0
}

func (x *IOutcome) GetBracketId() Brackets {
	if x != nil {
		return x.BracketId
	}
	return Brackets_NoBracket
}

func (x *IOutcome) GetOverBallNumber() int32 {
	if x != nil {
		return x.OverBallNumber
	}
	return 0
}

func (x *IOutcome) GetOverNumber() int32 {
	if x != nil {
		return x.OverNumber
	}
	return 0
}

func (x *IOutcome) GetOutcome() payload.ShotOutcomes {
	if x != nil {
		return x.Outcome
	}
	return payload.ShotOutcomes(0)
}

type MatchPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId  int32   `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Nickname     string  `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	ImageNumber  int32   `protobuf:"varint,3,opt,name=image_number,json=imageNumber,proto3" json:"image_number,omitempty"`
	Power        int32   `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`
	LineupNumber int32   `protobuf:"varint,5,opt,name=lineup_number,json=lineupNumber,proto3" json:"lineup_number,omitempty"`
	IsOut        bool    `protobuf:"varint,6,opt,name=is_out,json=isOut,proto3" json:"is_out,omitempty"`
	Used         bool    `protobuf:"varint,7,opt,name=used,proto3" json:"used,omitempty"`
	Hits         int32   `protobuf:"varint,8,opt,name=hits,proto3" json:"hits,omitempty"`
	Misses       int32   `protobuf:"varint,9,opt,name=misses,proto3" json:"misses,omitempty"`
	Lhbrhb       float64 `protobuf:"fixed64,10,opt,name=lhbrhb,proto3" json:"lhbrhb,omitempty"`
	Confidence   float64 `protobuf:"fixed64,11,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Strike       Strike  `protobuf:"varint,12,opt,name=strike,proto3,enum=MATCH.Strike" json:"strike,omitempty"`
}

func (x *MatchPlayer) Reset() {
	*x = MatchPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPlayer) ProtoMessage() {}

func (x *MatchPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPlayer.ProtoReflect.Descriptor instead.
func (*MatchPlayer) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{14}
}

func (x *MatchPlayer) GetCharacterId() int32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *MatchPlayer) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MatchPlayer) GetImageNumber() int32 {
	if x != nil {
		return x.ImageNumber
	}
	return 0
}

func (x *MatchPlayer) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *MatchPlayer) GetLineupNumber() int32 {
	if x != nil {
		return x.LineupNumber
	}
	return 0
}

func (x *MatchPlayer) GetIsOut() bool {
	if x != nil {
		return x.IsOut
	}
	return false
}

func (x *MatchPlayer) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

func (x *MatchPlayer) GetHits() int32 {
	if x != nil {
		return x.Hits
	}
	return 0
}

func (x *MatchPlayer) GetMisses() int32 {
	if x != nil {
		return x.Misses
	}
	return 0
}

func (x *MatchPlayer) GetLhbrhb() float64 {
	if x != nil {
		return x.Lhbrhb
	}
	return 0
}

func (x *MatchPlayer) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *MatchPlayer) GetStrike() Strike {
	if x != nil {
		return x.Strike
	}
	return Strike_NoStrike
}

type MatchModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId                 string              `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	Users                   []*M_UserInfo       `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Home                    string              `protobuf:"bytes,3,opt,name=home,proto3" json:"home,omitempty"`
	Away                    string              `protobuf:"bytes,4,opt,name=away,proto3" json:"away,omitempty"`
	JoinState               JoinStates          `protobuf:"varint,5,opt,name=joinState,proto3,enum=MATCH.JoinStates" json:"joinState,omitempty"`
	MatchState              payload.MatchStates `protobuf:"varint,6,opt,name=matchState,proto3,enum=PAYLOAD.MatchStates" json:"matchState,omitempty"`
	CurrentInnings          *M_Innings          `protobuf:"bytes,7,opt,name=currentInnings,proto3" json:"currentInnings,omitempty"`
	PreviousInnings         *M_Innings          `protobuf:"bytes,8,opt,name=previousInnings,proto3" json:"previousInnings,omitempty"`
	HomeLineup              []*MatchPlayer      `protobuf:"bytes,9,rep,name=home_lineup,json=homeLineup,proto3" json:"home_lineup,omitempty"`
	AwayLineup              []*MatchPlayer      `protobuf:"bytes,10,rep,name=away_lineup,json=awayLineup,proto3" json:"away_lineup,omitempty"`
	CurrentBall             *M_CurrentBall      `protobuf:"bytes,11,opt,name=currentBall,proto3" json:"currentBall,omitempty"`
	PreviousBalls           []*M_CurrentBall    `protobuf:"bytes,12,rep,name=previousBalls,proto3" json:"previousBalls,omitempty"`
	SelectedFirstBatsman    *MatchPlayer        `protobuf:"bytes,13,opt,name=selectedFirstBatsman,proto3" json:"selectedFirstBatsman,omitempty"`
	SelectedSecondBatsman   *MatchPlayer        `protobuf:"bytes,14,opt,name=selectedSecondBatsman,proto3" json:"selectedSecondBatsman,omitempty"`
	SelectedBowler          *MatchPlayer        `protobuf:"bytes,15,opt,name=selectedBowler,proto3" json:"selectedBowler,omitempty"`
	PreviousEvent           payload.Events      `protobuf:"varint,16,opt,name=previousEvent,proto3,enum=PAYLOAD.Events" json:"previousEvent,omitempty"`
	StateStartTime          int64               `protobuf:"varint,17,opt,name=stateStartTime,proto3" json:"stateStartTime,omitempty"`
	BothDisconnectTimePoint int64               `protobuf:"varint,18,opt,name=both_disconnect_time_point,json=bothDisconnectTimePoint,proto3" json:"both_disconnect_time_point,omitempty"`
}

func (x *MatchModel) Reset() {
	*x = MatchModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchModel) ProtoMessage() {}

func (x *MatchModel) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchModel.ProtoReflect.Descriptor instead.
func (*MatchModel) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{15}
}

func (x *MatchModel) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchModel) GetUsers() []*M_UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MatchModel) GetHome() string {
	if x != nil {
		return x.Home
	}
	return ""
}

func (x *MatchModel) GetAway() string {
	if x != nil {
		return x.Away
	}
	return ""
}

func (x *MatchModel) GetJoinState() JoinStates {
	if x != nil {
		return x.JoinState
	}
	return JoinStates_NoJoins
}

func (x *MatchModel) GetMatchState() payload.MatchStates {
	if x != nil {
		return x.MatchState
	}
	return payload.MatchStates(0)
}

func (x *MatchModel) GetCurrentInnings() *M_Innings {
	if x != nil {
		return x.CurrentInnings
	}
	return nil
}

func (x *MatchModel) GetPreviousInnings() *M_Innings {
	if x != nil {
		return x.PreviousInnings
	}
	return nil
}

func (x *MatchModel) GetHomeLineup() []*MatchPlayer {
	if x != nil {
		return x.HomeLineup
	}
	return nil
}

func (x *MatchModel) GetAwayLineup() []*MatchPlayer {
	if x != nil {
		return x.AwayLineup
	}
	return nil
}

func (x *MatchModel) GetCurrentBall() *M_CurrentBall {
	if x != nil {
		return x.CurrentBall
	}
	return nil
}

func (x *MatchModel) GetPreviousBalls() []*M_CurrentBall {
	if x != nil {
		return x.PreviousBalls
	}
	return nil
}

func (x *MatchModel) GetSelectedFirstBatsman() *MatchPlayer {
	if x != nil {
		return x.SelectedFirstBatsman
	}
	return nil
}

func (x *MatchModel) GetSelectedSecondBatsman() *MatchPlayer {
	if x != nil {
		return x.SelectedSecondBatsman
	}
	return nil
}

func (x *MatchModel) GetSelectedBowler() *MatchPlayer {
	if x != nil {
		return x.SelectedBowler
	}
	return nil
}

func (x *MatchModel) GetPreviousEvent() payload.Events {
	if x != nil {
		return x.PreviousEvent
	}
	return payload.Events(0)
}

func (x *MatchModel) GetStateStartTime() int64 {
	if x != nil {
		return x.StateStartTime
	}
	return 0
}

func (x *MatchModel) GetBothDisconnectTimePoint() int64 {
	if x != nil {
		return x.BothDisconnectTimePoint
	}
	return 0
}

var File_match_proto protoreflect.FileDescriptor

var file_match_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x1a, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x0a, 0x49, 0x50, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x49, 0x50, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xac, 0x04, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x68, 0x6f, 0x6d,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x61,
	0x77, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x42,
	0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x6d, 0x65,
	0x42, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x77, 0x61, 0x79, 0x42, 0x6f, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x77, 0x61, 0x79, 0x42, 0x6f,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x62, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x52, 0x50, 0x53, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x50, 0x53,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4f, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4f, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x46, 0x74, 0x75, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x74, 0x75, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x45, 0x6e,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x31, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x65, 0x61,
	0x6d, 0x32, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x10, 0x45, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x46, 0x61,
	0x63, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x71, 0x75, 0x69, 0x74, 0x22, 0x4d, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x41, 0x77, 0x61, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x53, 0x41, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x09, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x53, 0x41, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb3, 0x02, 0x0a, 0x0a, 0x4d, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x50, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x41, 0x43, 0x4b,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x6c, 0x12,
	0x26, 0x0a, 0x07, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x53, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x73, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x07, 0x4d, 0x5f, 0x54, 0x53,
	0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x77,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x62, 0x61, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x22, 0x56, 0x0a, 0x0b, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x42, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x09, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x4d, 0x5f,
	0x54, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x6b, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x53, 0x6b, 0x75, 0x6c, 0x6c, 0x73, 0x52, 0x05, 0x73,
	0x6b, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0d, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22,
	0x67, 0x0a, 0x08, 0x54, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x53, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0xc1, 0x02, 0x0a, 0x0d, 0x4d, 0x5f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x54, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x54, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x05, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x54, 0x42,
	0x61, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x54, 0x42, 0x61, 0x6c, 0x6c,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x32,
	0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x54,
	0x53, 0x68, 0x6f, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x68,
	0x6f, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x76,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd7, 0x03, 0x0a,
	0x09, 0x4d, 0x5f, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f,
	0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x50,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4f, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x19, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x4d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x68, 0x6f, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x77, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x42,
	0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xee, 0x02, 0x0a, 0x08, 0x49, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x75, 0x6e, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x75, 0x6e, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x09, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41,
	0x44, 0x2e, 0x53, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x68, 0x62, 0x72, 0x68, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x68, 0x62,
	0x72, 0x68, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x22, 0x9c, 0x07, 0x0a, 0x0a, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x77, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x49, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x33, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x0a, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42,
	0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x2e, 0x4d, 0x5f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x73, 0x12,
	0x46, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x73, 0x6d, 0x61,
	0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x77,
	0x6c, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x62, 0x6f, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x62, 0x6f, 0x74, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2a, 0x53, 0x0a, 0x0e, 0x49, 0x50, 0x43,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x50, 0x43, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x43,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x50, 0x43, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x4b,
	0x0a, 0x0c, 0x4d, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6b, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x5f, 0x42, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x5f, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x2a, 0xda, 0x01, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x65,
	0x78, 0x74, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x77, 0x6c, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x6b, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x0a, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x0b,
	0x2a, 0x47, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x6f,
	0x74, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x10, 0x03, 0x2a, 0x5b, 0x0a, 0x0a, 0x42, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x42, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x6c,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x68, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x48, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x6e, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x77, 0x6f, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x6f, 0x75, 0x72, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x05,
	0x2a, 0x35, 0x0a, 0x06, 0x53, 0x6b, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f,
	0x53, 0x6b, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x9f, 0x02, 0x0a, 0x02, 0x53, 0x41, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x6f, 0x6e, 0x65, 0x53, 0x41, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6d,
	0x61, 0x73, 0x68, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x77, 0x6f, 0x58, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x59, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x10, 0x05, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x61, 0x67, 0x65, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6d,
	0x65, 0x72, 0x61, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x61, 0x6c, 0x66, 0x52,
	0x75, 0x6e, 0x73, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x65, 0x78, 0x10, 0x09, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x6f, 0x6f, 0x6d, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x66, 0x74, 0x79, 0x46,
	0x69, 0x66, 0x74, 0x79, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x41, 0x48, 0x69, 0x74, 0x10,
	0x0d, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x68, 0x6f, 0x6b, 0x65, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x62, 0x61, 0x6e, 0x67, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x73, 0x73, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x49,
	0x6e, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x74, 0x10, 0x13,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x14, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x75, 0x72, 0x67, 0x65, 0x10, 0x15, 0x2a, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x10, 0x02, 0x42, 0x25,
	0x5a, 0x10, 0x70, 0x62, 0x2f, 0x6d, 0x69, 0x74, 0x73, 0x75, 0x6b, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0xaa, 0x02, 0x10, 0x53, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x73, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData = file_match_proto_rawDesc
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_proto_rawDescData)
	})
	return file_match_proto_rawDescData
}

var file_match_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_match_proto_goTypes = []interface{}{
	(IPCMessageType)(0),        // 0: MATCH.IPCMessageType
	(M_PlayStates)(0),          // 1: MATCH.M_PlayStates
	(ConnectionState)(0),       // 2: MATCH.ConnectionState
	(ACK)(0),                   // 3: MATCH.ACK
	(JoinStates)(0),            // 4: MATCH.JoinStates
	(BallStates)(0),            // 5: MATCH.BallStates
	(Brackets)(0),              // 6: MATCH.Brackets
	(Skulls)(0),                // 7: MATCH.Skulls
	(SA)(0),                    // 8: MATCH.SA
	(Strike)(0),                // 9: MATCH.Strike
	(*IPCMessage)(nil),         // 10: MATCH.IPCMessage
	(*CreateMatchRequest)(nil), // 11: MATCH.CreateMatchRequest
	(*EndMatchRequest)(nil),    // 12: MATCH.EndMatchRequest
	(*EndMatchUserData)(nil),   // 13: MATCH.EndMatchUserData
	(*MatchList)(nil),          // 14: MATCH.MatchList
	(*SAInfo)(nil),             // 15: MATCH.SAInfo
	(*M_UserInfo)(nil),         // 16: MATCH.M_UserInfo
	(*M_TShot)(nil),            // 17: MATCH.M_TShot
	(*BracketData)(nil),        // 18: MATCH.BracketData
	(*M_TBall)(nil),            // 19: MATCH.M_TBall
	(*TOutcome)(nil),           // 20: MATCH.TOutcome
	(*M_CurrentBall)(nil),      // 21: MATCH.M_CurrentBall
	(*M_Innings)(nil),          // 22: MATCH.M_Innings
	(*IOutcome)(nil),           // 23: MATCH.IOutcome
	(*MatchPlayer)(nil),        // 24: MATCH.MatchPlayer
	(*MatchModel)(nil),         // 25: MATCH.MatchModel
	(*payload.Player)(nil),     // 26: PAYLOAD.Player
	(payload.ShotOutcomes)(0),  // 27: PAYLOAD.ShotOutcomes
	(payload.Innings)(0),       // 28: PAYLOAD.Innings
	(payload.MatchStates)(0),   // 29: PAYLOAD.MatchStates
	(payload.Events)(0),        // 30: PAYLOAD.Events
}
var file_match_proto_depIdxs = []int32{
	0,  // 0: MATCH.IPCMessage.type:type_name -> MATCH.IPCMessageType
	26, // 1: MATCH.CreateMatchRequest.home_lineup:type_name -> PAYLOAD.Player
	26, // 2: MATCH.CreateMatchRequest.away_lineup:type_name -> PAYLOAD.Player
	13, // 3: MATCH.EndMatchRequest.team1_data:type_name -> MATCH.EndMatchUserData
	13, // 4: MATCH.EndMatchRequest.team2_data:type_name -> MATCH.EndMatchUserData
	8,  // 5: MATCH.SAInfo.type:type_name -> MATCH.SA
	1,  // 6: MATCH.M_UserInfo.playState:type_name -> MATCH.M_PlayStates
	2,  // 7: MATCH.M_UserInfo.connectionState:type_name -> MATCH.ConnectionState
	3,  // 8: MATCH.M_UserInfo.ack:type_name -> MATCH.ACK
	15, // 9: MATCH.M_UserInfo.sa_info:type_name -> MATCH.SAInfo
	6,  // 10: MATCH.M_TShot.bracket:type_name -> MATCH.Brackets
	6,  // 11: MATCH.BracketData.bracket_id:type_name -> MATCH.Brackets
	7,  // 12: MATCH.M_TBall.skull:type_name -> MATCH.Skulls
	18, // 13: MATCH.M_TBall.shots_possible:type_name -> MATCH.BracketData
	27, // 14: MATCH.TOutcome.outcome:type_name -> PAYLOAD.ShotOutcomes
	5,  // 15: MATCH.M_CurrentBall.state:type_name -> MATCH.BallStates
	20, // 16: MATCH.M_CurrentBall.outcome:type_name -> MATCH.TOutcome
	17, // 17: MATCH.M_CurrentBall.shots:type_name -> MATCH.M_TShot
	19, // 18: MATCH.M_CurrentBall.balls:type_name -> MATCH.M_TBall
	19, // 19: MATCH.M_CurrentBall.selectedBall:type_name -> MATCH.M_TBall
	17, // 20: MATCH.M_CurrentBall.selectedShot:type_name -> MATCH.M_TShot
	28, // 21: MATCH.M_Innings.inning:type_name -> PAYLOAD.Innings
	6,  // 22: MATCH.IOutcome.bracket_id:type_name -> MATCH.Brackets
	27, // 23: MATCH.IOutcome.outcome:type_name -> PAYLOAD.ShotOutcomes
	9,  // 24: MATCH.MatchPlayer.strike:type_name -> MATCH.Strike
	16, // 25: MATCH.MatchModel.users:type_name -> MATCH.M_UserInfo
	4,  // 26: MATCH.MatchModel.joinState:type_name -> MATCH.JoinStates
	29, // 27: MATCH.MatchModel.matchState:type_name -> PAYLOAD.MatchStates
	22, // 28: MATCH.MatchModel.currentInnings:type_name -> MATCH.M_Innings
	22, // 29: MATCH.MatchModel.previousInnings:type_name -> MATCH.M_Innings
	24, // 30: MATCH.MatchModel.home_lineup:type_name -> MATCH.MatchPlayer
	24, // 31: MATCH.MatchModel.away_lineup:type_name -> MATCH.MatchPlayer
	21, // 32: MATCH.MatchModel.currentBall:type_name -> MATCH.M_CurrentBall
	21, // 33: MATCH.MatchModel.previousBalls:type_name -> MATCH.M_CurrentBall
	24, // 34: MATCH.MatchModel.selectedFirstBatsman:type_name -> MATCH.MatchPlayer
	24, // 35: MATCH.MatchModel.selectedSecondBatsman:type_name -> MATCH.MatchPlayer
	24, // 36: MATCH.MatchModel.selectedBowler:type_name -> MATCH.MatchPlayer
	30, // 37: MATCH.MatchModel.previousEvent:type_name -> PAYLOAD.Events
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPCMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndMatchUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M_TShot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BracketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M_TBall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M_CurrentBall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*M_Innings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		EnumInfos:         file_match_proto_enumTypes,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_rawDesc = nil
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
