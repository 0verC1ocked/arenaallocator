// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: payload.proto

package payload

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchStates int32

const (
	MatchStates_NoState              MatchStates = 0
	MatchStates_WaitingForUsers      MatchStates = 1
	MatchStates_WaitingForMatchReady MatchStates = 2
	MatchStates_StartInnings         MatchStates = 3
	MatchStates_PlayerSelection      MatchStates = 4
	MatchStates_StartBall            MatchStates = 5
	MatchStates_BallSelection        MatchStates = 6
	MatchStates_ShotSelection        MatchStates = 7
	MatchStates_StateOutcome         MatchStates = 8
	MatchStates_StateEndBall         MatchStates = 9
	MatchStates_EndOver              MatchStates = 10
	MatchStates_StateEndInnings      MatchStates = 11
	MatchStates_MatchEnded           MatchStates = 12
	MatchStates_StateReconnecting    MatchStates = 13
)

// Enum value maps for MatchStates.
var (
	MatchStates_name = map[int32]string{
		0:  "NoState",
		1:  "WaitingForUsers",
		2:  "WaitingForMatchReady",
		3:  "StartInnings",
		4:  "PlayerSelection",
		5:  "StartBall",
		6:  "BallSelection",
		7:  "ShotSelection",
		8:  "StateOutcome",
		9:  "StateEndBall",
		10: "EndOver",
		11: "StateEndInnings",
		12: "MatchEnded",
		13: "StateReconnecting",
	}
	MatchStates_value = map[string]int32{
		"NoState":              0,
		"WaitingForUsers":      1,
		"WaitingForMatchReady": 2,
		"StartInnings":         3,
		"PlayerSelection":      4,
		"StartBall":            5,
		"BallSelection":        6,
		"ShotSelection":        7,
		"StateOutcome":         8,
		"StateEndBall":         9,
		"EndOver":              10,
		"StateEndInnings":      11,
		"MatchEnded":           12,
		"StateReconnecting":    13,
	}
)

func (x MatchStates) Enum() *MatchStates {
	p := new(MatchStates)
	*p = x
	return p
}

func (x MatchStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchStates) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[0].Descriptor()
}

func (MatchStates) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[0]
}

func (x MatchStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchStates.Descriptor instead.
func (MatchStates) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{0}
}

type TurnState int32

const (
	TurnState_BATTING_TURN    TurnState = 0
	TurnState_BOWLING_TURN    TurnState = 1
	TurnState_BOTH_USERS_TURN TurnState = 2
	TurnState_NO_TURN         TurnState = 3
)

// Enum value maps for TurnState.
var (
	TurnState_name = map[int32]string{
		0: "BATTING_TURN",
		1: "BOWLING_TURN",
		2: "BOTH_USERS_TURN",
		3: "NO_TURN",
	}
	TurnState_value = map[string]int32{
		"BATTING_TURN":    0,
		"BOWLING_TURN":    1,
		"BOTH_USERS_TURN": 2,
		"NO_TURN":         3,
	}
)

func (x TurnState) Enum() *TurnState {
	p := new(TurnState)
	*p = x
	return p
}

func (x TurnState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TurnState) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[1].Descriptor()
}

func (TurnState) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[1]
}

func (x TurnState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TurnState.Descriptor instead.
func (TurnState) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{1}
}

type UserPlayState int32

const (
	UserPlayState_UPSNone      UserPlayState = 0
	UserPlayState_UPSOnStrike  UserPlayState = 1
	UserPlayState_UPSOffStrike UserPlayState = 2
	UserPlayState_UPSBowling   UserPlayState = 3
)

// Enum value maps for UserPlayState.
var (
	UserPlayState_name = map[int32]string{
		0: "UPSNone",
		1: "UPSOnStrike",
		2: "UPSOffStrike",
		3: "UPSBowling",
	}
	UserPlayState_value = map[string]int32{
		"UPSNone":      0,
		"UPSOnStrike":  1,
		"UPSOffStrike": 2,
		"UPSBowling":   3,
	}
)

func (x UserPlayState) Enum() *UserPlayState {
	p := new(UserPlayState)
	*p = x
	return p
}

func (x UserPlayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserPlayState) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[2].Descriptor()
}

func (UserPlayState) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[2]
}

func (x UserPlayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserPlayState.Descriptor instead.
func (UserPlayState) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{2}
}

type TeamPosition int32

const (
	TeamPosition_TEAM_POSITION_NONE TeamPosition = 0
	TeamPosition_HOME_TEAM          TeamPosition = 1
	TeamPosition_AWAY_TEAM          TeamPosition = 2
)

// Enum value maps for TeamPosition.
var (
	TeamPosition_name = map[int32]string{
		0: "TEAM_POSITION_NONE",
		1: "HOME_TEAM",
		2: "AWAY_TEAM",
	}
	TeamPosition_value = map[string]int32{
		"TEAM_POSITION_NONE": 0,
		"HOME_TEAM":          1,
		"AWAY_TEAM":          2,
	}
)

func (x TeamPosition) Enum() *TeamPosition {
	p := new(TeamPosition)
	*p = x
	return p
}

func (x TeamPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[3].Descriptor()
}

func (TeamPosition) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[3]
}

func (x TeamPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamPosition.Descriptor instead.
func (TeamPosition) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{3}
}

type MatchResult int32

const (
	MatchResult_NoResult MatchResult = 0
	MatchResult_Vicotry  MatchResult = 1
	MatchResult_Defeat   MatchResult = 2
	MatchResult_Draw     MatchResult = 3
)

// Enum value maps for MatchResult.
var (
	MatchResult_name = map[int32]string{
		0: "NoResult",
		1: "Vicotry",
		2: "Defeat",
		3: "Draw",
	}
	MatchResult_value = map[string]int32{
		"NoResult": 0,
		"Vicotry":  1,
		"Defeat":   2,
		"Draw":     3,
	}
)

func (x MatchResult) Enum() *MatchResult {
	p := new(MatchResult)
	*p = x
	return p
}

func (x MatchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[4].Descriptor()
}

func (MatchResult) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[4]
}

func (x MatchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchResult.Descriptor instead.
func (MatchResult) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{4}
}

type DeadShotStatus int32

const (
	DeadShotStatus_NoStatus DeadShotStatus = 0
	DeadShotStatus_Inactive DeadShotStatus = 1
	DeadShotStatus_Success  DeadShotStatus = 2
	DeadShotStatus_Failed   DeadShotStatus = 3
)

// Enum value maps for DeadShotStatus.
var (
	DeadShotStatus_name = map[int32]string{
		0: "NoStatus",
		1: "Inactive",
		2: "Success",
		3: "Failed",
	}
	DeadShotStatus_value = map[string]int32{
		"NoStatus": 0,
		"Inactive": 1,
		"Success":  2,
		"Failed":   3,
	}
)

func (x DeadShotStatus) Enum() *DeadShotStatus {
	p := new(DeadShotStatus)
	*p = x
	return p
}

func (x DeadShotStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeadShotStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[5].Descriptor()
}

func (DeadShotStatus) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[5]
}

func (x DeadShotStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeadShotStatus.Descriptor instead.
func (DeadShotStatus) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{5}
}

type WicketType int32

const (
	WicketType_Invalid WicketType = 0
	WicketType_Bowled  WicketType = 1
	WicketType_Catch   WicketType = 2
)

// Enum value maps for WicketType.
var (
	WicketType_name = map[int32]string{
		0: "Invalid",
		1: "Bowled",
		2: "Catch",
	}
	WicketType_value = map[string]int32{
		"Invalid": 0,
		"Bowled":  1,
		"Catch":   2,
	}
)

func (x WicketType) Enum() *WicketType {
	p := new(WicketType)
	*p = x
	return p
}

func (x WicketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WicketType) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[6].Descriptor()
}

func (WicketType) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[6]
}

func (x WicketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WicketType.Descriptor instead.
func (WicketType) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{6}
}

type AnticipationType int32

const (
	AnticipationType_NoType                    AnticipationType = 0
	AnticipationType_HighProbabilitySixSuccess AnticipationType = 1
	AnticipationType_HighProbabilitySixMiss    AnticipationType = 2
	AnticipationType_HighProbabilityFourOut    AnticipationType = 3
	AnticipationType_HighProbabilityFourMiss   AnticipationType = 4
	AnticipationType_AnticipationOut           AnticipationType = 5
)

// Enum value maps for AnticipationType.
var (
	AnticipationType_name = map[int32]string{
		0: "NoType",
		1: "HighProbabilitySixSuccess",
		2: "HighProbabilitySixMiss",
		3: "HighProbabilityFourOut",
		4: "HighProbabilityFourMiss",
		5: "AnticipationOut",
	}
	AnticipationType_value = map[string]int32{
		"NoType":                    0,
		"HighProbabilitySixSuccess": 1,
		"HighProbabilitySixMiss":    2,
		"HighProbabilityFourOut":    3,
		"HighProbabilityFourMiss":   4,
		"AnticipationOut":           5,
	}
)

func (x AnticipationType) Enum() *AnticipationType {
	p := new(AnticipationType)
	*p = x
	return p
}

func (x AnticipationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnticipationType) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[7].Descriptor()
}

func (AnticipationType) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[7]
}

func (x AnticipationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnticipationType.Descriptor instead.
func (AnticipationType) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{7}
}

type ShotOutcomes int32

const (
	ShotOutcomes_NoOutcome ShotOutcomes = 0
	ShotOutcomes_Hit       ShotOutcomes = 1
	ShotOutcomes_Miss      ShotOutcomes = 2
	ShotOutcomes_Wicket    ShotOutcomes = 3
)

// Enum value maps for ShotOutcomes.
var (
	ShotOutcomes_name = map[int32]string{
		0: "NoOutcome",
		1: "Hit",
		2: "Miss",
		3: "Wicket",
	}
	ShotOutcomes_value = map[string]int32{
		"NoOutcome": 0,
		"Hit":       1,
		"Miss":      2,
		"Wicket":    3,
	}
)

func (x ShotOutcomes) Enum() *ShotOutcomes {
	p := new(ShotOutcomes)
	*p = x
	return p
}

func (x ShotOutcomes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShotOutcomes) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[8].Descriptor()
}

func (ShotOutcomes) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[8]
}

func (x ShotOutcomes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShotOutcomes.Descriptor instead.
func (ShotOutcomes) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{8}
}

type Emoji int32

const (
	Emoji_NoEmote     Emoji = 0
	Emoji_EmoteHappy  Emoji = 1
	Emoji_EmoteCool   Emoji = 2
	Emoji_EmoteAngry  Emoji = 3
	Emoji_EmoteYawn   Emoji = 4
	Emoji_EmoteSix    Emoji = 5
	Emoji_EmoteWicket Emoji = 6
)

// Enum value maps for Emoji.
var (
	Emoji_name = map[int32]string{
		0: "NoEmote",
		1: "EmoteHappy",
		2: "EmoteCool",
		3: "EmoteAngry",
		4: "EmoteYawn",
		5: "EmoteSix",
		6: "EmoteWicket",
	}
	Emoji_value = map[string]int32{
		"NoEmote":     0,
		"EmoteHappy":  1,
		"EmoteCool":   2,
		"EmoteAngry":  3,
		"EmoteYawn":   4,
		"EmoteSix":    5,
		"EmoteWicket": 6,
	}
)

func (x Emoji) Enum() *Emoji {
	p := new(Emoji)
	*p = x
	return p
}

func (x Emoji) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Emoji) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[9].Descriptor()
}

func (Emoji) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[9]
}

func (x Emoji) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Emoji.Descriptor instead.
func (Emoji) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{9}
}

type Messaging int32

const (
	Messaging_NoMessage     Messaging = 0
	Messaging_MessageGG     Messaging = 1
	Messaging_MessageWow    Messaging = 2
	Messaging_MessageNice   Messaging = 3
	Messaging_MessageHaha   Messaging = 4
	Messaging_MessageThanks Messaging = 5
	Messaging_MessageGL     Messaging = 6
)

// Enum value maps for Messaging.
var (
	Messaging_name = map[int32]string{
		0: "NoMessage",
		1: "MessageGG",
		2: "MessageWow",
		3: "MessageNice",
		4: "MessageHaha",
		5: "MessageThanks",
		6: "MessageGL",
	}
	Messaging_value = map[string]int32{
		"NoMessage":     0,
		"MessageGG":     1,
		"MessageWow":    2,
		"MessageNice":   3,
		"MessageHaha":   4,
		"MessageThanks": 5,
		"MessageGL":     6,
	}
)

func (x Messaging) Enum() *Messaging {
	p := new(Messaging)
	*p = x
	return p
}

func (x Messaging) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Messaging) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[10].Descriptor()
}

func (Messaging) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[10]
}

func (x Messaging) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Messaging.Descriptor instead.
func (Messaging) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{10}
}

type PlayStates int32

const (
	PlayStates_NoPlay  PlayStates = 0
	PlayStates_Batting PlayStates = 1
	PlayStates_Bowling PlayStates = 2
	PlayStates_ForFeit PlayStates = 3
)

// Enum value maps for PlayStates.
var (
	PlayStates_name = map[int32]string{
		0: "NoPlay",
		1: "Batting",
		2: "Bowling",
		3: "ForFeit",
	}
	PlayStates_value = map[string]int32{
		"NoPlay":  0,
		"Batting": 1,
		"Bowling": 2,
		"ForFeit": 3,
	}
)

func (x PlayStates) Enum() *PlayStates {
	p := new(PlayStates)
	*p = x
	return p
}

func (x PlayStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayStates) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[11].Descriptor()
}

func (PlayStates) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[11]
}

func (x PlayStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayStates.Descriptor instead.
func (PlayStates) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{11}
}

type Rarity int32

const (
	Rarity_NoRarity   Rarity = 0
	Rarity_Common     Rarity = 1
	Rarity_Reliable   Rarity = 2
	Rarity_Brilliant  Rarity = 3
	Rarity_WorldClass Rarity = 4
)

// Enum value maps for Rarity.
var (
	Rarity_name = map[int32]string{
		0: "NoRarity",
		1: "Common",
		2: "Reliable",
		3: "Brilliant",
		4: "WorldClass",
	}
	Rarity_value = map[string]int32{
		"NoRarity":   0,
		"Common":     1,
		"Reliable":   2,
		"Brilliant":  3,
		"WorldClass": 4,
	}
)

func (x Rarity) Enum() *Rarity {
	p := new(Rarity)
	*p = x
	return p
}

func (x Rarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rarity) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[12].Descriptor()
}

func (Rarity) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[12]
}

func (x Rarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rarity.Descriptor instead.
func (Rarity) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{12}
}

type Classification int32

const (
	Classification_NoClass Classification = 0
	Classification_Batsman Classification = 1
	Classification_Bowler  Classification = 2
)

// Enum value maps for Classification.
var (
	Classification_name = map[int32]string{
		0: "NoClass",
		1: "Batsman",
		2: "Bowler",
	}
	Classification_value = map[string]int32{
		"NoClass": 0,
		"Batsman": 1,
		"Bowler":  2,
	}
)

func (x Classification) Enum() *Classification {
	p := new(Classification)
	*p = x
	return p
}

func (x Classification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Classification) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[13].Descriptor()
}

func (Classification) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[13]
}

func (x Classification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Classification.Descriptor instead.
func (Classification) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{13}
}

type Gender int32

const (
	Gender_NonBinary Gender = 0
	Gender_Male      Gender = 1
	Gender_Female    Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "NonBinary",
		1: "Male",
		2: "Female",
	}
	Gender_value = map[string]int32{
		"NonBinary": 0,
		"Male":      1,
		"Female":    2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[14].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[14]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{14}
}

type BattingStyle int32

const (
	BattingStyle_RightHand BattingStyle = 0
	BattingStyle_LeftHand  BattingStyle = 1
)

// Enum value maps for BattingStyle.
var (
	BattingStyle_name = map[int32]string{
		0: "RightHand",
		1: "LeftHand",
	}
	BattingStyle_value = map[string]int32{
		"RightHand": 0,
		"LeftHand":  1,
	}
)

func (x BattingStyle) Enum() *BattingStyle {
	p := new(BattingStyle)
	*p = x
	return p
}

func (x BattingStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattingStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[15].Descriptor()
}

func (BattingStyle) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[15]
}

func (x BattingStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattingStyle.Descriptor instead.
func (BattingStyle) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{15}
}

type BowlingStyle int32

const (
	BowlingStyle_Fast           BowlingStyle = 0
	BowlingStyle_Spin           BowlingStyle = 1
	BowlingStyle_NoBowlingStyle BowlingStyle = 3
)

// Enum value maps for BowlingStyle.
var (
	BowlingStyle_name = map[int32]string{
		0: "Fast",
		1: "Spin",
		3: "NoBowlingStyle",
	}
	BowlingStyle_value = map[string]int32{
		"Fast":           0,
		"Spin":           1,
		"NoBowlingStyle": 3,
	}
)

func (x BowlingStyle) Enum() *BowlingStyle {
	p := new(BowlingStyle)
	*p = x
	return p
}

func (x BowlingStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BowlingStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[16].Descriptor()
}

func (BowlingStyle) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[16]
}

func (x BowlingStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BowlingStyle.Descriptor instead.
func (BowlingStyle) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{16}
}

type Innings int32

const (
	Innings_FIRST  Innings = 0
	Innings_SECOND Innings = 1
)

// Enum value maps for Innings.
var (
	Innings_name = map[int32]string{
		0: "FIRST",
		1: "SECOND",
	}
	Innings_value = map[string]int32{
		"FIRST":  0,
		"SECOND": 1,
	}
)

func (x Innings) Enum() *Innings {
	p := new(Innings)
	*p = x
	return p
}

func (x Innings) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Innings) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[17].Descriptor()
}

func (Innings) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[17]
}

func (x Innings) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Innings.Descriptor instead.
func (Innings) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{17}
}

type Events int32

const (
	Events_NONE                          Events = 0
	Events_OPP_JOINED                    Events = 1
	Events_MATCH_READY                   Events = 2
	Events_MATCH_CREATE_FAILED           Events = 3
	Events_JOINED_MATCH                  Events = 4
	Events_MATCH_STARTED                 Events = 5
	Events_MATCH_SCENE_LOADED            Events = 6
	Events_TOSS_START                    Events = 7
	Events_TOSS_ACK                      Events = 8
	Events_TOSS_RESULT                   Events = 9
	Events_BAT_BALL_SELECTION            Events = 10
	Events_MATCH_INNINGS_DETAILS         Events = 11
	Events_INNINGS_INTRO                 Events = 12
	Events_INNINGS_INTO_ACK              Events = 13
	Events_SERVER_INNINGS_READY          Events = 14
	Events_OPENERS_SELECTED              Events = 15
	Events_CLIENT_INNINGS_READY          Events = 16
	Events_INNINGS_START                 Events = 17
	Events_INNINGS_START_ACK             Events = 18
	Events_START_CURRENT_OVER            Events = 19
	Events_START_BALL_EVENT              Events = 20
	Events_DELIVEIRES_DATA_CREATAED      Events = 21
	Events_DELIVERY_SELECTED             Events = 22
	Events_SHOTS_DATA                    Events = 23
	Events_BRACKET_SELECTED              Events = 24
	Events_SHOT_RESULT                   Events = 25
	Events_OUTCOME_UPDATED_DATA          Events = 26
	Events_SHOT_ANIMATIONS_FINISHED      Events = 27
	Events_END_CURRENT_BALL_EVENT        Events = 28
	Events_NEXT_BATSMAN_SELECTED         Events = 29
	Events_END_CURRENT_BALL_EVENT_ACK    Events = 30
	Events_END_CURRENT_OVER              Events = 31
	Events_NEXT_BOWLER_SELECTED          Events = 32
	Events_END_OVER_ACK                  Events = 33
	Events_PASSIVES_DATA                 Events = 34
	Events_UPDATE_LOCAL_PLAYER_STRENGTHS Events = 35
	Events_ACTIVATE_BATSMAN_SA           Events = 36
	Events_BATSMAN_SA_ACTIVATED          Events = 37
	Events_ACTIVATE_BOWLER_SA            Events = 38
	Events_BOWLER_SA_ACTIVATED           Events = 39
	Events_BATSMAN_INSTANT_SA_ACTIVATE   Events = 40
	Events_BOWLER_INSTANT_SA_ACTIVATE    Events = 41
	Events_MATCH_MISSION_UPDATED         Events = 42
	Events_MATCH_ARENAS_UPDATED          Events = 43
	Events_END_FIRST_INNINGS             Events = 44
	Events_END_FIRST_INNINGS_ACK         Events = 45
	Events_END_MATCH                     Events = 46
	Events_ABORT_MATCH                   Events = 47
	Events_FORFIET_MATCH                 Events = 48
	Events_REMATCH_JOIN                  Events = 49
	Events_REMATCH_START                 Events = 50
	Events_TURN_START                    Events = 51
	Events_TURN_END                      Events = 52
	Events_TURN_MISS                     Events = 53
	Events_DISCONNECT_TIMER_DATA         Events = 54
	Events_CHAT_EMOJI                    Events = 55
	Events_PING                          Events = 56
	Events_BATSMAN_INSTANT_SA_INACTIVATE Events = 57
	Events_BOWLER_INSTANT_SA_INACTIVATE  Events = 68
	Events_FIELDING_MODE_CHANGED         Events = 59
	Events_DATA_UPDATE                   Events = 60
	Events_SPECTATOR_JOINED              Events = 61
	Events_SPECTATOR_JOIN_ACK            Events = 62
	Events_FAST_MODE_SPEED_UP            Events = 63
	Events_FAST_MODE_SPEED_UP_ACK        Events = 64
	Events_THREAD_EXIT                   Events = 65
	Events_MESSAGE                       Events = 66
	Events_INNINGS_READY                 Events = 67
	Events_START_BALL_EVENT_ACK          Events = 69
	Events_RECONNECT                     Events = 70
	Events_CONNECT                       Events = 71
	Events_CONNECT_ACK                   Events = 72
	Events_CONNECTED                     Events = 73
	Events_PONG                          Events = 74
	Events_RECONNECTED                   Events = 75
	Events_DISCONNECT                    Events = 76
	Events_CREATE_MATCH                  Events = 77
	Events_EVENT_HISTORY                 Events = 78
	Events_MATCH_SCENE_LOADED_ACK        Events = 79
	Events_MATCH_NOT_FOUND               Events = 80
	Events_UNSUPPORTED_VERSION           Events = 81
	Events_REPLAY_SYNC                   Events = 82
	Events_REPLAY_SYNC_ACK               Events = 83
	Events_REPLAY_CONNECT                Events = 84
	Events_REPLAY_CONNECT_ACK            Events = 85
	Events_REPLAY_RESYNC                 Events = 86
)

// Enum value maps for Events.
var (
	Events_name = map[int32]string{
		0:  "NONE",
		1:  "OPP_JOINED",
		2:  "MATCH_READY",
		3:  "MATCH_CREATE_FAILED",
		4:  "JOINED_MATCH",
		5:  "MATCH_STARTED",
		6:  "MATCH_SCENE_LOADED",
		7:  "TOSS_START",
		8:  "TOSS_ACK",
		9:  "TOSS_RESULT",
		10: "BAT_BALL_SELECTION",
		11: "MATCH_INNINGS_DETAILS",
		12: "INNINGS_INTRO",
		13: "INNINGS_INTO_ACK",
		14: "SERVER_INNINGS_READY",
		15: "OPENERS_SELECTED",
		16: "CLIENT_INNINGS_READY",
		17: "INNINGS_START",
		18: "INNINGS_START_ACK",
		19: "START_CURRENT_OVER",
		20: "START_BALL_EVENT",
		21: "DELIVEIRES_DATA_CREATAED",
		22: "DELIVERY_SELECTED",
		23: "SHOTS_DATA",
		24: "BRACKET_SELECTED",
		25: "SHOT_RESULT",
		26: "OUTCOME_UPDATED_DATA",
		27: "SHOT_ANIMATIONS_FINISHED",
		28: "END_CURRENT_BALL_EVENT",
		29: "NEXT_BATSMAN_SELECTED",
		30: "END_CURRENT_BALL_EVENT_ACK",
		31: "END_CURRENT_OVER",
		32: "NEXT_BOWLER_SELECTED",
		33: "END_OVER_ACK",
		34: "PASSIVES_DATA",
		35: "UPDATE_LOCAL_PLAYER_STRENGTHS",
		36: "ACTIVATE_BATSMAN_SA",
		37: "BATSMAN_SA_ACTIVATED",
		38: "ACTIVATE_BOWLER_SA",
		39: "BOWLER_SA_ACTIVATED",
		40: "BATSMAN_INSTANT_SA_ACTIVATE",
		41: "BOWLER_INSTANT_SA_ACTIVATE",
		42: "MATCH_MISSION_UPDATED",
		43: "MATCH_ARENAS_UPDATED",
		44: "END_FIRST_INNINGS",
		45: "END_FIRST_INNINGS_ACK",
		46: "END_MATCH",
		47: "ABORT_MATCH",
		48: "FORFIET_MATCH",
		49: "REMATCH_JOIN",
		50: "REMATCH_START",
		51: "TURN_START",
		52: "TURN_END",
		53: "TURN_MISS",
		54: "DISCONNECT_TIMER_DATA",
		55: "CHAT_EMOJI",
		56: "PING",
		57: "BATSMAN_INSTANT_SA_INACTIVATE",
		68: "BOWLER_INSTANT_SA_INACTIVATE",
		59: "FIELDING_MODE_CHANGED",
		60: "DATA_UPDATE",
		61: "SPECTATOR_JOINED",
		62: "SPECTATOR_JOIN_ACK",
		63: "FAST_MODE_SPEED_UP",
		64: "FAST_MODE_SPEED_UP_ACK",
		65: "THREAD_EXIT",
		66: "MESSAGE",
		67: "INNINGS_READY",
		69: "START_BALL_EVENT_ACK",
		70: "RECONNECT",
		71: "CONNECT",
		72: "CONNECT_ACK",
		73: "CONNECTED",
		74: "PONG",
		75: "RECONNECTED",
		76: "DISCONNECT",
		77: "CREATE_MATCH",
		78: "EVENT_HISTORY",
		79: "MATCH_SCENE_LOADED_ACK",
		80: "MATCH_NOT_FOUND",
		81: "UNSUPPORTED_VERSION",
		82: "REPLAY_SYNC",
		83: "REPLAY_SYNC_ACK",
		84: "REPLAY_CONNECT",
		85: "REPLAY_CONNECT_ACK",
		86: "REPLAY_RESYNC",
	}
	Events_value = map[string]int32{
		"NONE":                          0,
		"OPP_JOINED":                    1,
		"MATCH_READY":                   2,
		"MATCH_CREATE_FAILED":           3,
		"JOINED_MATCH":                  4,
		"MATCH_STARTED":                 5,
		"MATCH_SCENE_LOADED":            6,
		"TOSS_START":                    7,
		"TOSS_ACK":                      8,
		"TOSS_RESULT":                   9,
		"BAT_BALL_SELECTION":            10,
		"MATCH_INNINGS_DETAILS":         11,
		"INNINGS_INTRO":                 12,
		"INNINGS_INTO_ACK":              13,
		"SERVER_INNINGS_READY":          14,
		"OPENERS_SELECTED":              15,
		"CLIENT_INNINGS_READY":          16,
		"INNINGS_START":                 17,
		"INNINGS_START_ACK":             18,
		"START_CURRENT_OVER":            19,
		"START_BALL_EVENT":              20,
		"DELIVEIRES_DATA_CREATAED":      21,
		"DELIVERY_SELECTED":             22,
		"SHOTS_DATA":                    23,
		"BRACKET_SELECTED":              24,
		"SHOT_RESULT":                   25,
		"OUTCOME_UPDATED_DATA":          26,
		"SHOT_ANIMATIONS_FINISHED":      27,
		"END_CURRENT_BALL_EVENT":        28,
		"NEXT_BATSMAN_SELECTED":         29,
		"END_CURRENT_BALL_EVENT_ACK":    30,
		"END_CURRENT_OVER":              31,
		"NEXT_BOWLER_SELECTED":          32,
		"END_OVER_ACK":                  33,
		"PASSIVES_DATA":                 34,
		"UPDATE_LOCAL_PLAYER_STRENGTHS": 35,
		"ACTIVATE_BATSMAN_SA":           36,
		"BATSMAN_SA_ACTIVATED":          37,
		"ACTIVATE_BOWLER_SA":            38,
		"BOWLER_SA_ACTIVATED":           39,
		"BATSMAN_INSTANT_SA_ACTIVATE":   40,
		"BOWLER_INSTANT_SA_ACTIVATE":    41,
		"MATCH_MISSION_UPDATED":         42,
		"MATCH_ARENAS_UPDATED":          43,
		"END_FIRST_INNINGS":             44,
		"END_FIRST_INNINGS_ACK":         45,
		"END_MATCH":                     46,
		"ABORT_MATCH":                   47,
		"FORFIET_MATCH":                 48,
		"REMATCH_JOIN":                  49,
		"REMATCH_START":                 50,
		"TURN_START":                    51,
		"TURN_END":                      52,
		"TURN_MISS":                     53,
		"DISCONNECT_TIMER_DATA":         54,
		"CHAT_EMOJI":                    55,
		"PING":                          56,
		"BATSMAN_INSTANT_SA_INACTIVATE": 57,
		"BOWLER_INSTANT_SA_INACTIVATE":  68,
		"FIELDING_MODE_CHANGED":         59,
		"DATA_UPDATE":                   60,
		"SPECTATOR_JOINED":              61,
		"SPECTATOR_JOIN_ACK":            62,
		"FAST_MODE_SPEED_UP":            63,
		"FAST_MODE_SPEED_UP_ACK":        64,
		"THREAD_EXIT":                   65,
		"MESSAGE":                       66,
		"INNINGS_READY":                 67,
		"START_BALL_EVENT_ACK":          69,
		"RECONNECT":                     70,
		"CONNECT":                       71,
		"CONNECT_ACK":                   72,
		"CONNECTED":                     73,
		"PONG":                          74,
		"RECONNECTED":                   75,
		"DISCONNECT":                    76,
		"CREATE_MATCH":                  77,
		"EVENT_HISTORY":                 78,
		"MATCH_SCENE_LOADED_ACK":        79,
		"MATCH_NOT_FOUND":               80,
		"UNSUPPORTED_VERSION":           81,
		"REPLAY_SYNC":                   82,
		"REPLAY_SYNC_ACK":               83,
		"REPLAY_CONNECT":                84,
		"REPLAY_CONNECT_ACK":            85,
		"REPLAY_RESYNC":                 86,
	}
)

func (x Events) Enum() *Events {
	p := new(Events)
	*p = x
	return p
}

func (x Events) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Events) Descriptor() protoreflect.EnumDescriptor {
	return file_payload_proto_enumTypes[18].Descriptor()
}

func (Events) Type() protoreflect.EnumType {
	return &file_payload_proto_enumTypes[18]
}

func (x Events) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Events.Descriptor instead.
func (Events) EnumDescriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{18}
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      Events       `protobuf:"varint,1,opt,name=event,proto3,enum=PAYLOAD.Events" json:"event,omitempty"`
	Data       *UserData    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Turn       TurnState    `protobuf:"varint,3,opt,name=turn,proto3,enum=PAYLOAD.TurnState" json:"turn,omitempty"`
	MatchState *Match       `protobuf:"bytes,4,opt,name=match_state,json=matchState,proto3" json:"match_state,omitempty"`
	Emoji      Emoji        `protobuf:"varint,5,opt,name=emoji,proto3,enum=PAYLOAD.Emoji" json:"emoji,omitempty"`
	Message    Messaging    `protobuf:"varint,6,opt,name=message,proto3,enum=PAYLOAD.Messaging" json:"message,omitempty"`
	Version    *Version     `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	ForTeam    TeamPosition `protobuf:"varint,8,opt,name=for_team,json=forTeam,proto3,enum=PAYLOAD.TeamPosition" json:"for_team,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{0}
}

func (x *Payload) GetEvent() Events {
	if x != nil {
		return x.Event
	}
	return Events_NONE
}

func (x *Payload) GetData() *UserData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Payload) GetTurn() TurnState {
	if x != nil {
		return x.Turn
	}
	return TurnState_BATTING_TURN
}

func (x *Payload) GetMatchState() *Match {
	if x != nil {
		return x.MatchState
	}
	return nil
}

func (x *Payload) GetEmoji() Emoji {
	if x != nil {
		return x.Emoji
	}
	return Emoji_NoEmote
}

func (x *Payload) GetMessage() Messaging {
	if x != nil {
		return x.Message
	}
	return Messaging_NoMessage
}

func (x *Payload) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Payload) GetForTeam() TeamPosition {
	if x != nil {
		return x.ForTeam
	}
	return TeamPosition_TEAM_POSITION_NONE
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major int32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor int32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch int32 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Version) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                     string           `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	RoomId                     string           `protobuf:"bytes,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	OpponentId                 string           `protobuf:"bytes,3,opt,name=opponentId,proto3" json:"opponentId,omitempty"`
	Msg                        string           `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	HomeLineup                 []*Player        `protobuf:"bytes,5,rep,name=home_lineup,json=homeLineup,proto3" json:"home_lineup,omitempty"`
	AwayLineup                 []*Player        `protobuf:"bytes,6,rep,name=away_lineup,json=awayLineup,proto3" json:"away_lineup,omitempty"`
	PlayState                  PlayStates       `protobuf:"varint,7,opt,name=playState,proto3,enum=PAYLOAD.PlayStates" json:"playState,omitempty"`
	BatsmanSelected            []int32          `protobuf:"varint,8,rep,packed,name=batsman_selected,json=batsmanSelected,proto3" json:"batsman_selected,omitempty"`
	BowlerSelected             int32            `protobuf:"varint,9,opt,name=bowler_selected,json=bowlerSelected,proto3" json:"bowler_selected,omitempty"`
	Balls                      []*TBall         `protobuf:"bytes,10,rep,name=balls,proto3" json:"balls,omitempty"`
	Shots                      []*TShot         `protobuf:"bytes,11,rep,name=shots,proto3" json:"shots,omitempty"`
	Id                         int32            `protobuf:"varint,12,opt,name=id,proto3" json:"id,omitempty"` //Could be shot_id, ball_id
	SelectedOnstrikeBatsmanId  int32            `protobuf:"varint,13,opt,name=selected_onstrike_batsman_id,json=selectedOnstrikeBatsmanId,proto3" json:"selected_onstrike_batsman_id,omitempty"`
	SelectedOffstrikeBatsmanId int32            `protobuf:"varint,14,opt,name=selected_offstrike_batsman_id,json=selectedOffstrikeBatsmanId,proto3" json:"selected_offstrike_batsman_id,omitempty"`
	SelectedBowlerId           int32            `protobuf:"varint,15,opt,name=selected_bowler_id,json=selectedBowlerId,proto3" json:"selected_bowler_id,omitempty"`
	Result                     *TResult         `protobuf:"bytes,16,opt,name=result,proto3" json:"result,omitempty"`
	SelectionTimeout           int32            `protobuf:"varint,17,opt,name=selection_timeout,json=selectionTimeout,proto3" json:"selection_timeout,omitempty"`
	PlayerSelectionTimeout     int32            `protobuf:"varint,18,opt,name=player_selection_timeout,json=playerSelectionTimeout,proto3" json:"player_selection_timeout,omitempty"`
	BufferForSelectionTimeout  int32            `protobuf:"varint,19,opt,name=buffer_for_selection_timeout,json=bufferForSelectionTimeout,proto3" json:"buffer_for_selection_timeout,omitempty"`
	PingPongTimeout            int32            `protobuf:"varint,20,opt,name=ping_pong_timeout,json=pingPongTimeout,proto3" json:"ping_pong_timeout,omitempty"`
	BatsmanManaFilled          int32            `protobuf:"varint,21,opt,name=batsman_mana_filled,json=batsmanManaFilled,proto3" json:"batsman_mana_filled,omitempty"`
	BowlerManaFilled           int32            `protobuf:"varint,22,opt,name=bowler_mana_filled,json=bowlerManaFilled,proto3" json:"bowler_mana_filled,omitempty"`
	ActivatedSa                int32            `protobuf:"varint,23,opt,name=activated_sa,json=activatedSa,proto3" json:"activated_sa,omitempty"`
	SaDuration                 int32            `protobuf:"varint,24,opt,name=sa_duration,json=saDuration,proto3" json:"sa_duration,omitempty"`
	IsRpsActive                bool             `protobuf:"varint,25,opt,name=is_rps_active,json=isRpsActive,proto3" json:"is_rps_active,omitempty"`
	OnstrikePassivesInfo       []*PassiveInfo   `protobuf:"bytes,26,rep,name=onstrike_passives_info,json=onstrikePassivesInfo,proto3" json:"onstrike_passives_info,omitempty"`
	OffstrikePassivesInfo      []*PassiveInfo   `protobuf:"bytes,27,rep,name=offstrike_passives_info,json=offstrikePassivesInfo,proto3" json:"offstrike_passives_info,omitempty"`
	BowlerPassivesInfo         []*PassiveInfo   `protobuf:"bytes,28,rep,name=bowler_passives_info,json=bowlerPassivesInfo,proto3" json:"bowler_passives_info,omitempty"`
	AppliedEquipments          []*EquipmentInfo `protobuf:"bytes,29,rep,name=applied_equipments,json=appliedEquipments,proto3" json:"applied_equipments,omitempty"`
	BowlerAttributeBoosts      *AttributeBoosts `protobuf:"bytes,30,opt,name=bowler_attribute_boosts,json=bowlerAttributeBoosts,proto3" json:"bowler_attribute_boosts,omitempty"`
	OnstrikeAttributeBoosts    *AttributeBoosts `protobuf:"bytes,31,opt,name=onstrike_attribute_boosts,json=onstrikeAttributeBoosts,proto3" json:"onstrike_attribute_boosts,omitempty"`
	OffstrikeAttributeBoosts   *AttributeBoosts `protobuf:"bytes,32,opt,name=offstrike_attribute_boosts,json=offstrikeAttributeBoosts,proto3" json:"offstrike_attribute_boosts,omitempty"`
	SelectionTimeRemaining     int32            `protobuf:"varint,33,opt,name=selection_time_remaining,json=selectionTimeRemaining,proto3" json:"selection_time_remaining,omitempty"`
	MaxSelectionMisses         int32            `protobuf:"varint,34,opt,name=max_selection_misses,json=maxSelectionMisses,proto3" json:"max_selection_misses,omitempty"`
	SelectionMisses            int32            `protobuf:"varint,35,opt,name=selection_misses,json=selectionMisses,proto3" json:"selection_misses,omitempty"`
	OppnentSelectionMisses     int32            `protobuf:"varint,36,opt,name=oppnent_selection_misses,json=oppnentSelectionMisses,proto3" json:"oppnent_selection_misses,omitempty"`
	SelectionMissed            bool             `protobuf:"varint,37,opt,name=selection_missed,json=selectionMissed,proto3" json:"selection_missed,omitempty"`
	OppnentSelectionMissed     bool             `protobuf:"varint,38,opt,name=oppnent_selection_missed,json=oppnentSelectionMissed,proto3" json:"oppnent_selection_missed,omitempty"`
	StartInningsTimeoutSeconds int32            `protobuf:"varint,39,opt,name=start_innings_timeout_seconds,json=startInningsTimeoutSeconds,proto3" json:"start_innings_timeout_seconds,omitempty"`
	StartInningsTimeRemaining  int32            `protobuf:"varint,40,opt,name=start_innings_time_remaining,json=startInningsTimeRemaining,proto3" json:"start_innings_time_remaining,omitempty"`
	MatchResult                MatchResult      `protobuf:"varint,41,opt,name=match_result,json=matchResult,proto3,enum=PAYLOAD.MatchResult" json:"match_result,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{2}
}

func (x *UserData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserData) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *UserData) GetOpponentId() string {
	if x != nil {
		return x.OpponentId
	}
	return ""
}

func (x *UserData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserData) GetHomeLineup() []*Player {
	if x != nil {
		return x.HomeLineup
	}
	return nil
}

func (x *UserData) GetAwayLineup() []*Player {
	if x != nil {
		return x.AwayLineup
	}
	return nil
}

func (x *UserData) GetPlayState() PlayStates {
	if x != nil {
		return x.PlayState
	}
	return PlayStates_NoPlay
}

func (x *UserData) GetBatsmanSelected() []int32 {
	if x != nil {
		return x.BatsmanSelected
	}
	return nil
}

func (x *UserData) GetBowlerSelected() int32 {
	if x != nil {
		return x.BowlerSelected
	}
	return 0
}

func (x *UserData) GetBalls() []*TBall {
	if x != nil {
		return x.Balls
	}
	return nil
}

func (x *UserData) GetShots() []*TShot {
	if x != nil {
		return x.Shots
	}
	return nil
}

func (x *UserData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserData) GetSelectedOnstrikeBatsmanId() int32 {
	if x != nil {
		return x.SelectedOnstrikeBatsmanId
	}
	return 0
}

func (x *UserData) GetSelectedOffstrikeBatsmanId() int32 {
	if x != nil {
		return x.SelectedOffstrikeBatsmanId
	}
	return 0
}

func (x *UserData) GetSelectedBowlerId() int32 {
	if x != nil {
		return x.SelectedBowlerId
	}
	return 0
}

func (x *UserData) GetResult() *TResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *UserData) GetSelectionTimeout() int32 {
	if x != nil {
		return x.SelectionTimeout
	}
	return 0
}

func (x *UserData) GetPlayerSelectionTimeout() int32 {
	if x != nil {
		return x.PlayerSelectionTimeout
	}
	return 0
}

func (x *UserData) GetBufferForSelectionTimeout() int32 {
	if x != nil {
		return x.BufferForSelectionTimeout
	}
	return 0
}

func (x *UserData) GetPingPongTimeout() int32 {
	if x != nil {
		return x.PingPongTimeout
	}
	return 0
}

func (x *UserData) GetBatsmanManaFilled() int32 {
	if x != nil {
		return x.BatsmanManaFilled
	}
	return 0
}

func (x *UserData) GetBowlerManaFilled() int32 {
	if x != nil {
		return x.BowlerManaFilled
	}
	return 0
}

func (x *UserData) GetActivatedSa() int32 {
	if x != nil {
		return x.ActivatedSa
	}
	return 0
}

func (x *UserData) GetSaDuration() int32 {
	if x != nil {
		return x.SaDuration
	}
	return 0
}

func (x *UserData) GetIsRpsActive() bool {
	if x != nil {
		return x.IsRpsActive
	}
	return false
}

func (x *UserData) GetOnstrikePassivesInfo() []*PassiveInfo {
	if x != nil {
		return x.OnstrikePassivesInfo
	}
	return nil
}

func (x *UserData) GetOffstrikePassivesInfo() []*PassiveInfo {
	if x != nil {
		return x.OffstrikePassivesInfo
	}
	return nil
}

func (x *UserData) GetBowlerPassivesInfo() []*PassiveInfo {
	if x != nil {
		return x.BowlerPassivesInfo
	}
	return nil
}

func (x *UserData) GetAppliedEquipments() []*EquipmentInfo {
	if x != nil {
		return x.AppliedEquipments
	}
	return nil
}

func (x *UserData) GetBowlerAttributeBoosts() *AttributeBoosts {
	if x != nil {
		return x.BowlerAttributeBoosts
	}
	return nil
}

func (x *UserData) GetOnstrikeAttributeBoosts() *AttributeBoosts {
	if x != nil {
		return x.OnstrikeAttributeBoosts
	}
	return nil
}

func (x *UserData) GetOffstrikeAttributeBoosts() *AttributeBoosts {
	if x != nil {
		return x.OffstrikeAttributeBoosts
	}
	return nil
}

func (x *UserData) GetSelectionTimeRemaining() int32 {
	if x != nil {
		return x.SelectionTimeRemaining
	}
	return 0
}

func (x *UserData) GetMaxSelectionMisses() int32 {
	if x != nil {
		return x.MaxSelectionMisses
	}
	return 0
}

func (x *UserData) GetSelectionMisses() int32 {
	if x != nil {
		return x.SelectionMisses
	}
	return 0
}

func (x *UserData) GetOppnentSelectionMisses() int32 {
	if x != nil {
		return x.OppnentSelectionMisses
	}
	return 0
}

func (x *UserData) GetSelectionMissed() bool {
	if x != nil {
		return x.SelectionMissed
	}
	return false
}

func (x *UserData) GetOppnentSelectionMissed() bool {
	if x != nil {
		return x.OppnentSelectionMissed
	}
	return false
}

func (x *UserData) GetStartInningsTimeoutSeconds() int32 {
	if x != nil {
		return x.StartInningsTimeoutSeconds
	}
	return 0
}

func (x *UserData) GetStartInningsTimeRemaining() int32 {
	if x != nil {
		return x.StartInningsTimeRemaining
	}
	return 0
}

func (x *UserData) GetMatchResult() MatchResult {
	if x != nil {
		return x.MatchResult
	}
	return MatchResult_NoResult
}

type PassiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsActive bool  `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *PassiveInfo) Reset() {
	*x = PassiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveInfo) ProtoMessage() {}

func (x *PassiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveInfo.ProtoReflect.Descriptor instead.
func (*PassiveInfo) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{3}
}

func (x *PassiveInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PassiveInfo) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type EquipmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Bracket        int32          `protobuf:"varint,2,opt,name=bracket,proto3" json:"bracket,omitempty"`
	Classification Classification `protobuf:"varint,3,opt,name=classification,proto3,enum=PAYLOAD.Classification" json:"classification,omitempty"`
}

func (x *EquipmentInfo) Reset() {
	*x = EquipmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentInfo) ProtoMessage() {}

func (x *EquipmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentInfo.ProtoReflect.Descriptor instead.
func (*EquipmentInfo) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{4}
}

func (x *EquipmentInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EquipmentInfo) GetBracket() int32 {
	if x != nil {
		return x.Bracket
	}
	return 0
}

func (x *EquipmentInfo) GetClassification() Classification {
	if x != nil {
		return x.Classification
	}
	return Classification_NoClass
}

type AttributeBoosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LbRhbDebuff     float64 `protobuf:"fixed64,1,opt,name=lb_rhb_debuff,json=lbRhbDebuff,proto3" json:"lb_rhb_debuff,omitempty"`
	ConfidenceBoost float64 `protobuf:"fixed64,2,opt,name=confidence_boost,json=confidenceBoost,proto3" json:"confidence_boost,omitempty"`
	PassiveBoost    float64 `protobuf:"fixed64,3,opt,name=passive_boost,json=passiveBoost,proto3" json:"passive_boost,omitempty"`
	PropsBoost      float64 `protobuf:"fixed64,4,opt,name=props_boost,json=propsBoost,proto3" json:"props_boost,omitempty"`
}

func (x *AttributeBoosts) Reset() {
	*x = AttributeBoosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeBoosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeBoosts) ProtoMessage() {}

func (x *AttributeBoosts) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeBoosts.ProtoReflect.Descriptor instead.
func (*AttributeBoosts) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{5}
}

func (x *AttributeBoosts) GetLbRhbDebuff() float64 {
	if x != nil {
		return x.LbRhbDebuff
	}
	return 0
}

func (x *AttributeBoosts) GetConfidenceBoost() float64 {
	if x != nil {
		return x.ConfidenceBoost
	}
	return 0
}

func (x *AttributeBoosts) GetPassiveBoost() float64 {
	if x != nil {
		return x.PassiveBoost
	}
	return 0
}

func (x *AttributeBoosts) GetPropsBoost() float64 {
	if x != nil {
		return x.PropsBoost
	}
	return 0
}

type TShot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Run               int32   `protobuf:"varint,3,opt,name=run,proto3" json:"run,omitempty"`
	Bracket           int32   `protobuf:"varint,4,opt,name=bracket,proto3" json:"bracket,omitempty"`
	Probability       float64 `protobuf:"fixed64,5,opt,name=probability,proto3" json:"probability,omitempty"`
	Locked            bool    `protobuf:"varint,6,opt,name=locked,proto3" json:"locked,omitempty"`
	ShotHidden        bool    `protobuf:"varint,7,opt,name=shot_hidden,json=shotHidden,proto3" json:"shot_hidden,omitempty"`
	ProbabilityHidden bool    `protobuf:"varint,8,opt,name=probability_hidden,json=probabilityHidden,proto3" json:"probability_hidden,omitempty"`
}

func (x *TShot) Reset() {
	*x = TShot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TShot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TShot) ProtoMessage() {}

func (x *TShot) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TShot.ProtoReflect.Descriptor instead.
func (*TShot) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{6}
}

func (x *TShot) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TShot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TShot) GetRun() int32 {
	if x != nil {
		return x.Run
	}
	return 0
}

func (x *TShot) GetBracket() int32 {
	if x != nil {
		return x.Bracket
	}
	return 0
}

func (x *TShot) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *TShot) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *TShot) GetShotHidden() bool {
	if x != nil {
		return x.ShotHidden
	}
	return false
}

func (x *TShot) GetProbabilityHidden() bool {
	if x != nil {
		return x.ProbabilityHidden
	}
	return false
}

type TSaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeadShotStatus        DeadShotStatus `protobuf:"varint,1,opt,name=dead_shot_status,json=deadShotStatus,proto3,enum=PAYLOAD.DeadShotStatus" json:"dead_shot_status,omitempty"`
	BatsmanActiveSa       int32          `protobuf:"varint,2,opt,name=batsman_active_sa,json=batsmanActiveSa,proto3" json:"batsman_active_sa,omitempty"`
	BowlerActiveSa        int32          `protobuf:"varint,3,opt,name=bowler_active_sa,json=bowlerActiveSa,proto3" json:"bowler_active_sa,omitempty"`
	ImmortalWicketButMiss bool           `protobuf:"varint,4,opt,name=immortal_wicket_but_miss,json=immortalWicketButMiss,proto3" json:"immortal_wicket_but_miss,omitempty"`
}

func (x *TSaInfo) Reset() {
	*x = TSaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSaInfo) ProtoMessage() {}

func (x *TSaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSaInfo.ProtoReflect.Descriptor instead.
func (*TSaInfo) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{7}
}

func (x *TSaInfo) GetDeadShotStatus() DeadShotStatus {
	if x != nil {
		return x.DeadShotStatus
	}
	return DeadShotStatus_NoStatus
}

func (x *TSaInfo) GetBatsmanActiveSa() int32 {
	if x != nil {
		return x.BatsmanActiveSa
	}
	return 0
}

func (x *TSaInfo) GetBowlerActiveSa() int32 {
	if x != nil {
		return x.BowlerActiveSa
	}
	return 0
}

func (x *TSaInfo) GetImmortalWicketButMiss() bool {
	if x != nil {
		return x.ImmortalWicketButMiss
	}
	return false
}

type TResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRuns          int32            `protobuf:"varint,1,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	TotalBalls         int32            `protobuf:"varint,2,opt,name=total_balls,json=totalBalls,proto3" json:"total_balls,omitempty"`
	TotalWicketTaken   int32            `protobuf:"varint,3,opt,name=total_wicket_taken,json=totalWicketTaken,proto3" json:"total_wicket_taken,omitempty"`
	RunsScored         int32            `protobuf:"varint,4,opt,name=runs_scored,json=runsScored,proto3" json:"runs_scored,omitempty"`
	OriginalRunsScored int32            `protobuf:"varint,5,opt,name=original_runs_scored,json=originalRunsScored,proto3" json:"original_runs_scored,omitempty"`
	OverBallNumber     int32            `protobuf:"varint,6,opt,name=over_ball_number,json=overBallNumber,proto3" json:"over_ball_number,omitempty"`
	OverNumber         int32            `protobuf:"varint,7,opt,name=over_number,json=overNumber,proto3" json:"over_number,omitempty"`
	BracketId          int32            `protobuf:"varint,8,opt,name=bracket_id,json=bracketId,proto3" json:"bracket_id,omitempty"`
	Outcome            ShotOutcomes     `protobuf:"varint,9,opt,name=outcome,proto3,enum=PAYLOAD.ShotOutcomes" json:"outcome,omitempty"`
	Type               WicketType       `protobuf:"varint,10,opt,name=type,proto3,enum=PAYLOAD.WicketType" json:"type,omitempty"`
	AnticipationType   AnticipationType `protobuf:"varint,11,opt,name=anticipation_type,json=anticipationType,proto3,enum=PAYLOAD.AnticipationType" json:"anticipation_type,omitempty"`
	Inning             Innings          `protobuf:"varint,12,opt,name=inning,proto3,enum=PAYLOAD.Innings" json:"inning,omitempty"`
	SaInfo             *TSaInfo         `protobuf:"bytes,13,opt,name=sa_info,json=saInfo,proto3" json:"sa_info,omitempty"`
}

func (x *TResult) Reset() {
	*x = TResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TResult) ProtoMessage() {}

func (x *TResult) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TResult.ProtoReflect.Descriptor instead.
func (*TResult) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{8}
}

func (x *TResult) GetTotalRuns() int32 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *TResult) GetTotalBalls() int32 {
	if x != nil {
		return x.TotalBalls
	}
	return 0
}

func (x *TResult) GetTotalWicketTaken() int32 {
	if x != nil {
		return x.TotalWicketTaken
	}
	return 0
}

func (x *TResult) GetRunsScored() int32 {
	if x != nil {
		return x.RunsScored
	}
	return 0
}

func (x *TResult) GetOriginalRunsScored() int32 {
	if x != nil {
		return x.OriginalRunsScored
	}
	return 0
}

func (x *TResult) GetOverBallNumber() int32 {
	if x != nil {
		return x.OverBallNumber
	}
	return 0
}

func (x *TResult) GetOverNumber() int32 {
	if x != nil {
		return x.OverNumber
	}
	return 0
}

func (x *TResult) GetBracketId() int32 {
	if x != nil {
		return x.BracketId
	}
	return 0
}

func (x *TResult) GetOutcome() ShotOutcomes {
	if x != nil {
		return x.Outcome
	}
	return ShotOutcomes_NoOutcome
}

func (x *TResult) GetType() WicketType {
	if x != nil {
		return x.Type
	}
	return WicketType_Invalid
}

func (x *TResult) GetAnticipationType() AnticipationType {
	if x != nil {
		return x.AnticipationType
	}
	return AnticipationType_NoType
}

func (x *TResult) GetInning() Innings {
	if x != nil {
		return x.Inning
	}
	return Innings_FIRST
}

func (x *TResult) GetSaInfo() *TSaInfo {
	if x != nil {
		return x.SaInfo
	}
	return nil
}

type ShotsPossible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BracketId int32 `protobuf:"varint,1,opt,name=bracket_id,json=bracketId,proto3" json:"bracket_id,omitempty"`
	ShotId    int32 `protobuf:"varint,2,opt,name=shot_id,json=shotId,proto3" json:"shot_id,omitempty"`
}

func (x *ShotsPossible) Reset() {
	*x = ShotsPossible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShotsPossible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShotsPossible) ProtoMessage() {}

func (x *ShotsPossible) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShotsPossible.ProtoReflect.Descriptor instead.
func (*ShotsPossible) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{9}
}

func (x *ShotsPossible) GetBracketId() int32 {
	if x != nil {
		return x.BracketId
	}
	return 0
}

func (x *ShotsPossible) GetShotId() int32 {
	if x != nil {
		return x.ShotId
	}
	return 0
}

type TBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value         float64          `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Skulls        int32            `protobuf:"varint,4,opt,name=skulls,proto3" json:"skulls,omitempty"`
	ShotsPossible []*ShotsPossible `protobuf:"bytes,5,rep,name=shots_possible,json=shotsPossible,proto3" json:"shots_possible,omitempty"`
}

func (x *TBall) Reset() {
	*x = TBall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBall) ProtoMessage() {}

func (x *TBall) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBall.ProtoReflect.Descriptor instead.
func (*TBall) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{10}
}

func (x *TBall) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TBall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TBall) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TBall) GetSkulls() int32 {
	if x != nil {
		return x.Skulls
	}
	return 0
}

func (x *TBall) GetShotsPossible() []*ShotsPossible {
	if x != nil {
		return x.ShotsPossible
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterId    int32          `protobuf:"varint,1,opt,name=character_id,json=characterId,proto3" json:"character_id,omitempty"`
	Nickname       string         `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Rarity         Rarity         `protobuf:"varint,3,opt,name=rarity,proto3,enum=PAYLOAD.Rarity" json:"rarity,omitempty"`
	ImageNumber    int32          `protobuf:"varint,4,opt,name=image_number,json=imageNumber,proto3" json:"image_number,omitempty"`
	Classification Classification `protobuf:"varint,5,opt,name=classification,proto3,enum=PAYLOAD.Classification" json:"classification,omitempty"`
	Gender         Gender         `protobuf:"varint,6,opt,name=gender,proto3,enum=PAYLOAD.Gender" json:"gender,omitempty"`
	Power          int32          `protobuf:"varint,7,opt,name=power,proto3" json:"power,omitempty"`
	BattingStyle   BattingStyle   `protobuf:"varint,8,opt,name=batting_style,json=battingStyle,proto3,enum=PAYLOAD.BattingStyle" json:"batting_style,omitempty"`
	BowlingStyle   BowlingStyle   `protobuf:"varint,9,opt,name=bowling_style,json=bowlingStyle,proto3,enum=PAYLOAD.BowlingStyle" json:"bowling_style,omitempty"`
	Level          int32          `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`
	LineupNumber   int32          `protobuf:"varint,11,opt,name=lineup_number,json=lineupNumber,proto3" json:"lineup_number,omitempty"`
	IsOut          bool           `protobuf:"varint,12,opt,name=is_out,json=isOut,proto3" json:"is_out,omitempty"`
	EquipmentSlots []int32        `protobuf:"varint,13,rep,packed,name=equipment_slots,json=equipmentSlots,proto3" json:"equipment_slots,omitempty"`
	Props          []int32        `protobuf:"varint,14,rep,packed,name=props,proto3" json:"props,omitempty"`
	Passives       []int32        `protobuf:"varint,15,rep,packed,name=passives,proto3" json:"passives,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{11}
}

func (x *Player) GetCharacterId() int32 {
	if x != nil {
		return x.CharacterId
	}
	return 0
}

func (x *Player) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Player) GetRarity() Rarity {
	if x != nil {
		return x.Rarity
	}
	return Rarity_NoRarity
}

func (x *Player) GetImageNumber() int32 {
	if x != nil {
		return x.ImageNumber
	}
	return 0
}

func (x *Player) GetClassification() Classification {
	if x != nil {
		return x.Classification
	}
	return Classification_NoClass
}

func (x *Player) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_NonBinary
}

func (x *Player) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Player) GetBattingStyle() BattingStyle {
	if x != nil {
		return x.BattingStyle
	}
	return BattingStyle_RightHand
}

func (x *Player) GetBowlingStyle() BowlingStyle {
	if x != nil {
		return x.BowlingStyle
	}
	return BowlingStyle_Fast
}

func (x *Player) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Player) GetLineupNumber() int32 {
	if x != nil {
		return x.LineupNumber
	}
	return 0
}

func (x *Player) GetIsOut() bool {
	if x != nil {
		return x.IsOut
	}
	return false
}

func (x *Player) GetEquipmentSlots() []int32 {
	if x != nil {
		return x.EquipmentSlots
	}
	return nil
}

func (x *Player) GetProps() []int32 {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *Player) GetPassives() []int32 {
	if x != nil {
		return x.Passives
	}
	return nil
}

type Inning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inning     Innings `protobuf:"varint,1,opt,name=inning,proto3,enum=PAYLOAD.Innings" json:"inning,omitempty"`
	Runs       int32   `protobuf:"varint,2,opt,name=runs,proto3" json:"runs,omitempty"`
	Balls      int32   `protobuf:"varint,3,opt,name=balls,proto3" json:"balls,omitempty"`
	Wickets    int32   `protobuf:"varint,4,opt,name=wickets,proto3" json:"wickets,omitempty"`
	OverNumber int32   `protobuf:"varint,5,opt,name=over_number,json=overNumber,proto3" json:"over_number,omitempty"`
}

func (x *Inning) Reset() {
	*x = Inning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inning) ProtoMessage() {}

func (x *Inning) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inning.ProtoReflect.Descriptor instead.
func (*Inning) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{12}
}

func (x *Inning) GetInning() Innings {
	if x != nil {
		return x.Inning
	}
	return Innings_FIRST
}

func (x *Inning) GetRuns() int32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *Inning) GetBalls() int32 {
	if x != nil {
		return x.Balls
	}
	return 0
}

func (x *Inning) GetWickets() int32 {
	if x != nil {
		return x.Wickets
	}
	return 0
}

func (x *Inning) GetOverNumber() int32 {
	if x != nil {
		return x.OverNumber
	}
	return 0
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId                   string       `protobuf:"bytes,1,opt,name=matchId,proto3" json:"matchId,omitempty"`
	UsersInfo                 []*UserInfo  `protobuf:"bytes,2,rep,name=usersInfo,proto3" json:"usersInfo,omitempty"`
	CurrentInning             *Inning      `protobuf:"bytes,3,opt,name=currentInning,proto3" json:"currentInning,omitempty"`
	PreviousInning            *Inning      `protobuf:"bytes,4,opt,name=previousInning,proto3" json:"previousInning,omitempty"`
	CurrentBall               *CurrentBall `protobuf:"bytes,5,opt,name=current_ball,json=currentBall,proto3" json:"current_ball,omitempty"`
	OnStrike                  int32        `protobuf:"varint,6,opt,name=on_strike,json=onStrike,proto3" json:"on_strike,omitempty"`
	OffStrike                 int32        `protobuf:"varint,7,opt,name=off_strike,json=offStrike,proto3" json:"off_strike,omitempty"`
	Bowler                    int32        `protobuf:"varint,8,opt,name=bowler,proto3" json:"bowler,omitempty"`
	PreviousEvent             Events       `protobuf:"varint,9,opt,name=previous_event,json=previousEvent,proto3,enum=PAYLOAD.Events" json:"previous_event,omitempty"`
	ActiveBowlerSa            int32        `protobuf:"varint,10,opt,name=active_bowler_sa,json=activeBowlerSa,proto3" json:"active_bowler_sa,omitempty"`
	ActiveBatsmanSa           int32        `protobuf:"varint,11,opt,name=active_batsman_sa,json=activeBatsmanSa,proto3" json:"active_batsman_sa,omitempty"`
	MissedResults             []*TResult   `protobuf:"bytes,12,rep,name=missed_results,json=missedResults,proto3" json:"missed_results,omitempty"`
	CurrentState              MatchStates  `protobuf:"varint,13,opt,name=current_state,json=currentState,proto3,enum=PAYLOAD.MatchStates" json:"current_state,omitempty"`
	ExpectedEvent             Events       `protobuf:"varint,14,opt,name=expected_event,json=expectedEvent,proto3,enum=PAYLOAD.Events" json:"expected_event,omitempty"`
	SelectionTimeout          int32        `protobuf:"varint,15,opt,name=selection_timeout,json=selectionTimeout,proto3" json:"selection_timeout,omitempty"`
	PlayerSelectionTimeout    int32        `protobuf:"varint,16,opt,name=player_selection_timeout,json=playerSelectionTimeout,proto3" json:"player_selection_timeout,omitempty"`
	BufferForSelectionTimeout int32        `protobuf:"varint,17,opt,name=buffer_for_selection_timeout,json=bufferForSelectionTimeout,proto3" json:"buffer_for_selection_timeout,omitempty"`
	WinnerTeam                string       `protobuf:"bytes,18,opt,name=winner_team,json=winnerTeam,proto3" json:"winner_team,omitempty"`
	SelectionTimeRemaining    int32        `protobuf:"varint,19,opt,name=selection_time_remaining,json=selectionTimeRemaining,proto3" json:"selection_time_remaining,omitempty"`
	ReconnectionCount         int32        `protobuf:"varint,20,opt,name=reconnection_count,json=reconnectionCount,proto3" json:"reconnection_count,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{13}
}

func (x *Match) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Match) GetUsersInfo() []*UserInfo {
	if x != nil {
		return x.UsersInfo
	}
	return nil
}

func (x *Match) GetCurrentInning() *Inning {
	if x != nil {
		return x.CurrentInning
	}
	return nil
}

func (x *Match) GetPreviousInning() *Inning {
	if x != nil {
		return x.PreviousInning
	}
	return nil
}

func (x *Match) GetCurrentBall() *CurrentBall {
	if x != nil {
		return x.CurrentBall
	}
	return nil
}

func (x *Match) GetOnStrike() int32 {
	if x != nil {
		return x.OnStrike
	}
	return 0
}

func (x *Match) GetOffStrike() int32 {
	if x != nil {
		return x.OffStrike
	}
	return 0
}

func (x *Match) GetBowler() int32 {
	if x != nil {
		return x.Bowler
	}
	return 0
}

func (x *Match) GetPreviousEvent() Events {
	if x != nil {
		return x.PreviousEvent
	}
	return Events_NONE
}

func (x *Match) GetActiveBowlerSa() int32 {
	if x != nil {
		return x.ActiveBowlerSa
	}
	return 0
}

func (x *Match) GetActiveBatsmanSa() int32 {
	if x != nil {
		return x.ActiveBatsmanSa
	}
	return 0
}

func (x *Match) GetMissedResults() []*TResult {
	if x != nil {
		return x.MissedResults
	}
	return nil
}

func (x *Match) GetCurrentState() MatchStates {
	if x != nil {
		return x.CurrentState
	}
	return MatchStates_NoState
}

func (x *Match) GetExpectedEvent() Events {
	if x != nil {
		return x.ExpectedEvent
	}
	return Events_NONE
}

func (x *Match) GetSelectionTimeout() int32 {
	if x != nil {
		return x.SelectionTimeout
	}
	return 0
}

func (x *Match) GetPlayerSelectionTimeout() int32 {
	if x != nil {
		return x.PlayerSelectionTimeout
	}
	return 0
}

func (x *Match) GetBufferForSelectionTimeout() int32 {
	if x != nil {
		return x.BufferForSelectionTimeout
	}
	return 0
}

func (x *Match) GetWinnerTeam() string {
	if x != nil {
		return x.WinnerTeam
	}
	return ""
}

func (x *Match) GetSelectionTimeRemaining() int32 {
	if x != nil {
		return x.SelectionTimeRemaining
	}
	return 0
}

func (x *Match) GetReconnectionCount() int32 {
	if x != nil {
		return x.ReconnectionCount
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PlayState       PlayStates    `protobuf:"varint,2,opt,name=play_state,json=playState,proto3,enum=PAYLOAD.PlayStates" json:"play_state,omitempty"`
	LineupInfo      []*PlayerInfo `protobuf:"bytes,3,rep,name=lineup_info,json=lineupInfo,proto3" json:"lineup_info,omitempty"`
	TotalMisses     int32         `protobuf:"varint,4,opt,name=total_misses,json=totalMisses,proto3" json:"total_misses,omitempty"`
	ActivatedSa     int32         `protobuf:"varint,5,opt,name=activated_sa,json=activatedSa,proto3" json:"activated_sa,omitempty"`
	SaDuration      int32         `protobuf:"varint,6,opt,name=sa_duration,json=saDuration,proto3" json:"sa_duration,omitempty"`
	SaTotalDuration int32         `protobuf:"varint,7,opt,name=sa_total_duration,json=saTotalDuration,proto3" json:"sa_total_duration,omitempty"`
	ManaFill        int32         `protobuf:"varint,8,opt,name=mana_fill,json=manaFill,proto3" json:"mana_fill,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{14}
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfo) GetPlayState() PlayStates {
	if x != nil {
		return x.PlayState
	}
	return PlayStates_NoPlay
}

func (x *UserInfo) GetLineupInfo() []*PlayerInfo {
	if x != nil {
		return x.LineupInfo
	}
	return nil
}

func (x *UserInfo) GetTotalMisses() int32 {
	if x != nil {
		return x.TotalMisses
	}
	return 0
}

func (x *UserInfo) GetActivatedSa() int32 {
	if x != nil {
		return x.ActivatedSa
	}
	return 0
}

func (x *UserInfo) GetSaDuration() int32 {
	if x != nil {
		return x.SaDuration
	}
	return 0
}

func (x *UserInfo) GetSaTotalDuration() int32 {
	if x != nil {
		return x.SaTotalDuration
	}
	return 0
}

func (x *UserInfo) GetManaFill() int32 {
	if x != nil {
		return x.ManaFill
	}
	return 0
}

type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineupNumber int32 `protobuf:"varint,1,opt,name=lineup_number,json=lineupNumber,proto3" json:"lineup_number,omitempty"`
	Out          bool  `protobuf:"varint,2,opt,name=out,proto3" json:"out,omitempty"`
	Played       bool  `protobuf:"varint,3,opt,name=played,proto3" json:"played,omitempty"`
	RunsScored   int32 `protobuf:"varint,4,opt,name=runs_scored,json=runsScored,proto3" json:"runs_scored,omitempty"`
	BallsFaced   int32 `protobuf:"varint,5,opt,name=balls_faced,json=ballsFaced,proto3" json:"balls_faced,omitempty"`
	WicketsTaken int32 `protobuf:"varint,6,opt,name=wickets_taken,json=wicketsTaken,proto3" json:"wickets_taken,omitempty"`
	BallsBowled  int32 `protobuf:"varint,7,opt,name=balls_bowled,json=ballsBowled,proto3" json:"balls_bowled,omitempty"`
	RunsConceded int32 `protobuf:"varint,8,opt,name=runs_conceded,json=runsConceded,proto3" json:"runs_conceded,omitempty"`
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerInfo) GetLineupNumber() int32 {
	if x != nil {
		return x.LineupNumber
	}
	return 0
}

func (x *PlayerInfo) GetOut() bool {
	if x != nil {
		return x.Out
	}
	return false
}

func (x *PlayerInfo) GetPlayed() bool {
	if x != nil {
		return x.Played
	}
	return false
}

func (x *PlayerInfo) GetRunsScored() int32 {
	if x != nil {
		return x.RunsScored
	}
	return 0
}

func (x *PlayerInfo) GetBallsFaced() int32 {
	if x != nil {
		return x.BallsFaced
	}
	return 0
}

func (x *PlayerInfo) GetWicketsTaken() int32 {
	if x != nil {
		return x.WicketsTaken
	}
	return 0
}

func (x *PlayerInfo) GetBallsBowled() int32 {
	if x != nil {
		return x.BallsBowled
	}
	return 0
}

func (x *PlayerInfo) GetRunsConceded() int32 {
	if x != nil {
		return x.RunsConceded
	}
	return 0
}

type CurrentBall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverBallNumber int32    `protobuf:"varint,1,opt,name=over_ball_number,json=overBallNumber,proto3" json:"over_ball_number,omitempty"`
	Balls          []*TBall `protobuf:"bytes,2,rep,name=balls,proto3" json:"balls,omitempty"`
	Shots          []*TShot `protobuf:"bytes,3,rep,name=shots,proto3" json:"shots,omitempty"`
	BallId         int32    `protobuf:"varint,4,opt,name=ball_id,json=ballId,proto3" json:"ball_id,omitempty"`
	ShotSelected   *TShot   `protobuf:"bytes,5,opt,name=shot_selected,json=shotSelected,proto3" json:"shot_selected,omitempty"`
	Result         *TResult `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CurrentBall) Reset() {
	*x = CurrentBall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentBall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentBall) ProtoMessage() {}

func (x *CurrentBall) ProtoReflect() protoreflect.Message {
	mi := &file_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentBall.ProtoReflect.Descriptor instead.
func (*CurrentBall) Descriptor() ([]byte, []int) {
	return file_payload_proto_rawDescGZIP(), []int{16}
}

func (x *CurrentBall) GetOverBallNumber() int32 {
	if x != nil {
		return x.OverBallNumber
	}
	return 0
}

func (x *CurrentBall) GetBalls() []*TBall {
	if x != nil {
		return x.Balls
	}
	return nil
}

func (x *CurrentBall) GetShots() []*TShot {
	if x != nil {
		return x.Shots
	}
	return nil
}

func (x *CurrentBall) GetBallId() int32 {
	if x != nil {
		return x.BallId
	}
	return 0
}

func (x *CurrentBall) GetShotSelected() *TShot {
	if x != nil {
		return x.ShotSelected
	}
	return nil
}

func (x *CurrentBall) GetResult() *TResult {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_payload_proto protoreflect.FileDescriptor

var file_payload_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x22, 0xe2, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x22, 0x4b, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0xc5, 0x10, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x0b, 0x68, 0x6f, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x0b, 0x61,
	0x77, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x31, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x73,
	0x6d, 0x61, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x54, 0x42,
	0x61, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x2e, 0x54, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4f, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x42, 0x61, 0x74, 0x73, 0x6d,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x54, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62,
	0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x62, 0x6f,
	0x77, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x70, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x70, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x16, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x17, 0x6f, 0x66, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x6f, 0x66, 0x66, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x46, 0x0a, 0x14, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x50, 0x0a, 0x17, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x15, 0x62, 0x6f, 0x77, 0x6c,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x54, 0x0a, 0x19, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x17,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x1a, 0x6f, 0x66, 0x66, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x41,
	0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x73, 0x52, 0x18, 0x6f, 0x66, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x70, 0x70, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6f, 0x70, 0x70, 0x6e, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6f,
	0x70, 0x70, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6f,
	0x70, 0x70, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x3a, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x7a,
	0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x62, 0x5f, 0x72, 0x68, 0x62, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x66, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x62, 0x52, 0x68, 0x62, 0x44, 0x65, 0x62, 0x75,
	0x66, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x42, 0x6f,
	0x6f, 0x73, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x05, 0x54, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x75, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x07, 0x54, 0x53, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x10, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x53, 0x68, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x53, 0x68, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x73, 0x6d, 0x61,
	0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6f,
	0x77, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x61, 0x12, 0x37, 0x0a, 0x18,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x62, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x69, 0x6d, 0x6d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x75,
	0x74, 0x4d, 0x69, 0x73, 0x73, 0x22, 0xab, 0x04, 0x0a, 0x07, 0x54, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e,
	0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x76,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x53, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x41,
	0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x57, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x41, 0x6e, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x06, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x61, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x2e, 0x54, 0x53, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x74, 0x73, 0x50, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a,
	0x05, 0x54, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x6b, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x5f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x53, 0x68, 0x6f, 0x74, 0x73,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0xba, 0x04, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x0d, 0x62, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x62,
	0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x62, 0x61,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x6f,
	0x77, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x62, 0x6f, 0x77, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x77, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x06, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x06, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbb,
	0x07, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x49, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f,
	0x66, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x77, 0x6c,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f,
	0x41, 0x44, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x72,
	0x53, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x74,
	0x73, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x53, 0x61, 0x12, 0x37,
	0x0a, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44,
	0x2e, 0x54, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb4, 0x02, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x61, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x61, 0x46,
	0x69, 0x6c, 0x6c, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x46, 0x61,
	0x63, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x77, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6c, 0x6c,
	0x73, 0x5f, 0x62, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x62, 0x61, 0x6c, 0x6c, 0x73, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x75, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64,
	0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x41, 0x59, 0x4c,
	0x4f, 0x41, 0x44, 0x2e, 0x54, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x54, 0x53, 0x68, 0x6f, 0x74, 0x52,
	0x05, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44,
	0x2e, 0x54, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x2e, 0x54,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x92,
	0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x6c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x0d, 0x2a, 0x51, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x55, 0x52, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x57, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x55,
	0x52, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x53, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f,
	0x54, 0x55, 0x52, 0x4e, 0x10, 0x03, 0x2a, 0x4f, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x53, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x53, 0x4f, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50, 0x53, 0x4f, 0x66, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x50, 0x53, 0x42, 0x6f,
	0x77, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x2a, 0x3e, 0x0a,
	0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x69,
	0x63, 0x6f, 0x74, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x65, 0x61,
	0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x61, 0x77, 0x10, 0x03, 0x2a, 0x45, 0x0a,
	0x0e, 0x44, 0x65, 0x61, 0x64, 0x53, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x2a, 0x30, 0x0a, 0x0a, 0x57, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x61, 0x74, 0x63, 0x68, 0x10, 0x02, 0x2a, 0xa7, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x69, 0x67, 0x68, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x78, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x78, 0x4d, 0x69, 0x73, 0x73,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x4f, 0x75, 0x74, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x46, 0x6f, 0x75, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x10, 0x05,
	0x2a, 0x3c, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x48, 0x69, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x69, 0x73, 0x73,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x03, 0x2a, 0x71,
	0x0a, 0x05, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x45, 0x6d, 0x6f,
	0x74, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x61, 0x70,
	0x70, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6f,
	0x6c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x6e, 0x67, 0x72,
	0x79, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x59, 0x61, 0x77, 0x6e,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x78, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10,
	0x06, 0x2a, 0x7d, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x68, 0x61, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x4c, 0x10, 0x06,
	0x2a, 0x3f, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x6f, 0x77, 0x6c, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x46, 0x65, 0x69, 0x74, 0x10,
	0x03, 0x2a, 0x4f, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x6f, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x74,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x10, 0x04, 0x2a, 0x36, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x6f, 0x77, 0x6c, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x10, 0x02, 0x2a, 0x2c, 0x0a, 0x0d, 0x62, 0x61, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x66,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x01, 0x2a, 0x37, 0x0a, 0x0d, 0x62, 0x6f, 0x77, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x73, 0x74,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x70, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x6f, 0x42, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x03,
	0x2a, 0x20, 0x0a, 0x07, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x10, 0x01, 0x2a, 0xc8, 0x0e, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x50, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x4f, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x4f, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x09, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x0b,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x52,
	0x4f, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x49,
	0x4e, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x52, 0x53, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x12, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x41, 0x45, 0x44, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x16,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x54, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x17,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x55, 0x54, 0x43, 0x4f,
	0x4d, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x1b, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x53, 0x4d, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x1d, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x4b, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x4f, 0x57, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x53, 0x53,
	0x49, 0x56, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x22, 0x12, 0x21, 0x0a, 0x1d, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x53, 0x10, 0x23, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x53, 0x4d,
	0x41, 0x4e, 0x5f, 0x53, 0x41, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x54, 0x53, 0x4d,
	0x41, 0x4e, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x25, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f,
	0x57, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x57,
	0x4c, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x27, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x54, 0x53, 0x4d, 0x41, 0x4e, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x10, 0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4f, 0x57, 0x4c, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x10, 0x29, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x2a, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x53, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x2b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x2c, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e,
	0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x2e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x2f, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f,
	0x52, 0x46, 0x49, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x30, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x31, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x33, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x34,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x35, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x36, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x10, 0x37, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x49,
	0x4e, 0x47, 0x10, 0x38, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x54, 0x53, 0x4d, 0x41, 0x4e, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x39, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x4f, 0x57, 0x4c, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x44, 0x10, 0x3b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x3c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x3d, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x50, 0x45, 0x43, 0x54, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x43,
	0x4b, 0x10, 0x3e, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x10, 0x3f, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55,
	0x50, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x40, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x41, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x42, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x43, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x4b,
	0x10, 0x45, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x46, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x47, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x48, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x49, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x4b, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x4c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x4d, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x4e, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x4f, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x50, 0x12,
	0x17, 0x0a, 0x13, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x51, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x52, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x53, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0x54, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x55, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x56, 0x42, 0x29, 0x5a,
	0x12, 0x70, 0x62, 0x2f, 0x6d, 0x69, 0x74, 0x73, 0x75, 0x6b, 0x6f, 0x2f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0xaa, 0x02, 0x12, 0x53, 0x75, 0x70, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payload_proto_rawDescOnce sync.Once
	file_payload_proto_rawDescData = file_payload_proto_rawDesc
)

func file_payload_proto_rawDescGZIP() []byte {
	file_payload_proto_rawDescOnce.Do(func() {
		file_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_payload_proto_rawDescData)
	})
	return file_payload_proto_rawDescData
}

var file_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_payload_proto_goTypes = []interface{}{
	(MatchStates)(0),        // 0: PAYLOAD.MatchStates
	(TurnState)(0),          // 1: PAYLOAD.TurnState
	(UserPlayState)(0),      // 2: PAYLOAD.UserPlayState
	(TeamPosition)(0),       // 3: PAYLOAD.TeamPosition
	(MatchResult)(0),        // 4: PAYLOAD.MatchResult
	(DeadShotStatus)(0),     // 5: PAYLOAD.DeadShotStatus
	(WicketType)(0),         // 6: PAYLOAD.WicketType
	(AnticipationType)(0),   // 7: PAYLOAD.AnticipationType
	(ShotOutcomes)(0),       // 8: PAYLOAD.ShotOutcomes
	(Emoji)(0),              // 9: PAYLOAD.Emoji
	(Messaging)(0),          // 10: PAYLOAD.Messaging
	(PlayStates)(0),         // 11: PAYLOAD.PlayStates
	(Rarity)(0),             // 12: PAYLOAD.rarity
	(Classification)(0),     // 13: PAYLOAD.classification
	(Gender)(0),             // 14: PAYLOAD.gender
	(BattingStyle)(0),       // 15: PAYLOAD.batting_style
	(BowlingStyle)(0),       // 16: PAYLOAD.bowling_style
	(Innings)(0),            // 17: PAYLOAD.Innings
	(Events)(0),             // 18: PAYLOAD.Events
	(*Payload)(nil),         // 19: PAYLOAD.Payload
	(*Version)(nil),         // 20: PAYLOAD.Version
	(*UserData)(nil),        // 21: PAYLOAD.UserData
	(*PassiveInfo)(nil),     // 22: PAYLOAD.PassiveInfo
	(*EquipmentInfo)(nil),   // 23: PAYLOAD.EquipmentInfo
	(*AttributeBoosts)(nil), // 24: PAYLOAD.AttributeBoosts
	(*TShot)(nil),           // 25: PAYLOAD.TShot
	(*TSaInfo)(nil),         // 26: PAYLOAD.TSaInfo
	(*TResult)(nil),         // 27: PAYLOAD.TResult
	(*ShotsPossible)(nil),   // 28: PAYLOAD.ShotsPossible
	(*TBall)(nil),           // 29: PAYLOAD.TBall
	(*Player)(nil),          // 30: PAYLOAD.Player
	(*Inning)(nil),          // 31: PAYLOAD.Inning
	(*Match)(nil),           // 32: PAYLOAD.Match
	(*UserInfo)(nil),        // 33: PAYLOAD.UserInfo
	(*PlayerInfo)(nil),      // 34: PAYLOAD.PlayerInfo
	(*CurrentBall)(nil),     // 35: PAYLOAD.CurrentBall
}
var file_payload_proto_depIdxs = []int32{
	18, // 0: PAYLOAD.Payload.event:type_name -> PAYLOAD.Events
	21, // 1: PAYLOAD.Payload.data:type_name -> PAYLOAD.UserData
	1,  // 2: PAYLOAD.Payload.turn:type_name -> PAYLOAD.TurnState
	32, // 3: PAYLOAD.Payload.match_state:type_name -> PAYLOAD.Match
	9,  // 4: PAYLOAD.Payload.emoji:type_name -> PAYLOAD.Emoji
	10, // 5: PAYLOAD.Payload.message:type_name -> PAYLOAD.Messaging
	20, // 6: PAYLOAD.Payload.version:type_name -> PAYLOAD.Version
	3,  // 7: PAYLOAD.Payload.for_team:type_name -> PAYLOAD.TeamPosition
	30, // 8: PAYLOAD.UserData.home_lineup:type_name -> PAYLOAD.Player
	30, // 9: PAYLOAD.UserData.away_lineup:type_name -> PAYLOAD.Player
	11, // 10: PAYLOAD.UserData.playState:type_name -> PAYLOAD.PlayStates
	29, // 11: PAYLOAD.UserData.balls:type_name -> PAYLOAD.TBall
	25, // 12: PAYLOAD.UserData.shots:type_name -> PAYLOAD.TShot
	27, // 13: PAYLOAD.UserData.result:type_name -> PAYLOAD.TResult
	22, // 14: PAYLOAD.UserData.onstrike_passives_info:type_name -> PAYLOAD.PassiveInfo
	22, // 15: PAYLOAD.UserData.offstrike_passives_info:type_name -> PAYLOAD.PassiveInfo
	22, // 16: PAYLOAD.UserData.bowler_passives_info:type_name -> PAYLOAD.PassiveInfo
	23, // 17: PAYLOAD.UserData.applied_equipments:type_name -> PAYLOAD.EquipmentInfo
	24, // 18: PAYLOAD.UserData.bowler_attribute_boosts:type_name -> PAYLOAD.AttributeBoosts
	24, // 19: PAYLOAD.UserData.onstrike_attribute_boosts:type_name -> PAYLOAD.AttributeBoosts
	24, // 20: PAYLOAD.UserData.offstrike_attribute_boosts:type_name -> PAYLOAD.AttributeBoosts
	4,  // 21: PAYLOAD.UserData.match_result:type_name -> PAYLOAD.MatchResult
	13, // 22: PAYLOAD.EquipmentInfo.classification:type_name -> PAYLOAD.classification
	5,  // 23: PAYLOAD.TSaInfo.dead_shot_status:type_name -> PAYLOAD.DeadShotStatus
	8,  // 24: PAYLOAD.TResult.outcome:type_name -> PAYLOAD.ShotOutcomes
	6,  // 25: PAYLOAD.TResult.type:type_name -> PAYLOAD.WicketType
	7,  // 26: PAYLOAD.TResult.anticipation_type:type_name -> PAYLOAD.AnticipationType
	17, // 27: PAYLOAD.TResult.inning:type_name -> PAYLOAD.Innings
	26, // 28: PAYLOAD.TResult.sa_info:type_name -> PAYLOAD.TSaInfo
	28, // 29: PAYLOAD.TBall.shots_possible:type_name -> PAYLOAD.ShotsPossible
	12, // 30: PAYLOAD.Player.rarity:type_name -> PAYLOAD.rarity
	13, // 31: PAYLOAD.Player.classification:type_name -> PAYLOAD.classification
	14, // 32: PAYLOAD.Player.gender:type_name -> PAYLOAD.gender
	15, // 33: PAYLOAD.Player.batting_style:type_name -> PAYLOAD.batting_style
	16, // 34: PAYLOAD.Player.bowling_style:type_name -> PAYLOAD.bowling_style
	17, // 35: PAYLOAD.Inning.inning:type_name -> PAYLOAD.Innings
	33, // 36: PAYLOAD.Match.usersInfo:type_name -> PAYLOAD.UserInfo
	31, // 37: PAYLOAD.Match.currentInning:type_name -> PAYLOAD.Inning
	31, // 38: PAYLOAD.Match.previousInning:type_name -> PAYLOAD.Inning
	35, // 39: PAYLOAD.Match.current_ball:type_name -> PAYLOAD.CurrentBall
	18, // 40: PAYLOAD.Match.previous_event:type_name -> PAYLOAD.Events
	27, // 41: PAYLOAD.Match.missed_results:type_name -> PAYLOAD.TResult
	0,  // 42: PAYLOAD.Match.current_state:type_name -> PAYLOAD.MatchStates
	18, // 43: PAYLOAD.Match.expected_event:type_name -> PAYLOAD.Events
	11, // 44: PAYLOAD.UserInfo.play_state:type_name -> PAYLOAD.PlayStates
	34, // 45: PAYLOAD.UserInfo.lineup_info:type_name -> PAYLOAD.PlayerInfo
	29, // 46: PAYLOAD.CurrentBall.balls:type_name -> PAYLOAD.TBall
	25, // 47: PAYLOAD.CurrentBall.shots:type_name -> PAYLOAD.TShot
	25, // 48: PAYLOAD.CurrentBall.shot_selected:type_name -> PAYLOAD.TShot
	27, // 49: PAYLOAD.CurrentBall.result:type_name -> PAYLOAD.TResult
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_payload_proto_init() }
func file_payload_proto_init() {
	if File_payload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeBoosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TShot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShotsPossible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentBall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payload_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payload_proto_goTypes,
		DependencyIndexes: file_payload_proto_depIdxs,
		EnumInfos:         file_payload_proto_enumTypes,
		MessageInfos:      file_payload_proto_msgTypes,
	}.Build()
	File_payload_proto = out.File
	file_payload_proto_rawDesc = nil
	file_payload_proto_goTypes = nil
	file_payload_proto_depIdxs = nil
}
