// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_match_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_match_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "payload.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_match_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_match_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_match_2eproto;
namespace MATCH {
class BracketData;
class BracketDataDefaultTypeInternal;
extern BracketDataDefaultTypeInternal _BracketData_default_instance_;
class CreateMatchRequest;
class CreateMatchRequestDefaultTypeInternal;
extern CreateMatchRequestDefaultTypeInternal _CreateMatchRequest_default_instance_;
class EndMatchRequest;
class EndMatchRequestDefaultTypeInternal;
extern EndMatchRequestDefaultTypeInternal _EndMatchRequest_default_instance_;
class EndMatchUserData;
class EndMatchUserDataDefaultTypeInternal;
extern EndMatchUserDataDefaultTypeInternal _EndMatchUserData_default_instance_;
class IOutcome;
class IOutcomeDefaultTypeInternal;
extern IOutcomeDefaultTypeInternal _IOutcome_default_instance_;
class M_CurrentBall;
class M_CurrentBallDefaultTypeInternal;
extern M_CurrentBallDefaultTypeInternal _M_CurrentBall_default_instance_;
class M_Innings;
class M_InningsDefaultTypeInternal;
extern M_InningsDefaultTypeInternal _M_Innings_default_instance_;
class M_TBall;
class M_TBallDefaultTypeInternal;
extern M_TBallDefaultTypeInternal _M_TBall_default_instance_;
class M_TShot;
class M_TShotDefaultTypeInternal;
extern M_TShotDefaultTypeInternal _M_TShot_default_instance_;
class M_UserInfo;
class M_UserInfoDefaultTypeInternal;
extern M_UserInfoDefaultTypeInternal _M_UserInfo_default_instance_;
class MatchList;
class MatchListDefaultTypeInternal;
extern MatchListDefaultTypeInternal _MatchList_default_instance_;
class MatchModel;
class MatchModelDefaultTypeInternal;
extern MatchModelDefaultTypeInternal _MatchModel_default_instance_;
class MatchPlayer;
class MatchPlayerDefaultTypeInternal;
extern MatchPlayerDefaultTypeInternal _MatchPlayer_default_instance_;
class SAInfo;
class SAInfoDefaultTypeInternal;
extern SAInfoDefaultTypeInternal _SAInfo_default_instance_;
class TOutcome;
class TOutcomeDefaultTypeInternal;
extern TOutcomeDefaultTypeInternal _TOutcome_default_instance_;
}  // namespace MATCH
PROTOBUF_NAMESPACE_OPEN
template<> ::MATCH::BracketData* Arena::CreateMaybeMessage<::MATCH::BracketData>(Arena*);
template<> ::MATCH::CreateMatchRequest* Arena::CreateMaybeMessage<::MATCH::CreateMatchRequest>(Arena*);
template<> ::MATCH::EndMatchRequest* Arena::CreateMaybeMessage<::MATCH::EndMatchRequest>(Arena*);
template<> ::MATCH::EndMatchUserData* Arena::CreateMaybeMessage<::MATCH::EndMatchUserData>(Arena*);
template<> ::MATCH::IOutcome* Arena::CreateMaybeMessage<::MATCH::IOutcome>(Arena*);
template<> ::MATCH::M_CurrentBall* Arena::CreateMaybeMessage<::MATCH::M_CurrentBall>(Arena*);
template<> ::MATCH::M_Innings* Arena::CreateMaybeMessage<::MATCH::M_Innings>(Arena*);
template<> ::MATCH::M_TBall* Arena::CreateMaybeMessage<::MATCH::M_TBall>(Arena*);
template<> ::MATCH::M_TShot* Arena::CreateMaybeMessage<::MATCH::M_TShot>(Arena*);
template<> ::MATCH::M_UserInfo* Arena::CreateMaybeMessage<::MATCH::M_UserInfo>(Arena*);
template<> ::MATCH::MatchList* Arena::CreateMaybeMessage<::MATCH::MatchList>(Arena*);
template<> ::MATCH::MatchModel* Arena::CreateMaybeMessage<::MATCH::MatchModel>(Arena*);
template<> ::MATCH::MatchPlayer* Arena::CreateMaybeMessage<::MATCH::MatchPlayer>(Arena*);
template<> ::MATCH::SAInfo* Arena::CreateMaybeMessage<::MATCH::SAInfo>(Arena*);
template<> ::MATCH::TOutcome* Arena::CreateMaybeMessage<::MATCH::TOutcome>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MATCH {

enum M_PlayStates : int {
  M_MatchMaked = 0,
  M_Ready = 1,
  M_Bowling = 2,
  M_Batting = 3,
  M_PlayStates_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  M_PlayStates_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool M_PlayStates_IsValid(int value);
constexpr M_PlayStates M_PlayStates_MIN = M_MatchMaked;
constexpr M_PlayStates M_PlayStates_MAX = M_Batting;
constexpr int M_PlayStates_ARRAYSIZE = M_PlayStates_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M_PlayStates_descriptor();
template<typename T>
inline const std::string& M_PlayStates_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M_PlayStates>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M_PlayStates_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M_PlayStates_descriptor(), enum_t_value);
}
inline bool M_PlayStates_Parse(
    const std::string& name, M_PlayStates* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M_PlayStates>(
    M_PlayStates_descriptor(), name, value);
}
enum ConnectionState : int {
  NotConnected = 0,
  Connected = 1,
  Disconnected = 2,
  Reconnecting = 3,
  ConnectionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConnectionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConnectionState_IsValid(int value);
constexpr ConnectionState ConnectionState_MIN = NotConnected;
constexpr ConnectionState ConnectionState_MAX = Reconnecting;
constexpr int ConnectionState_ARRAYSIZE = ConnectionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor();
template<typename T>
inline const std::string& ConnectionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionState_descriptor(), enum_t_value);
}
inline bool ConnectionState_Parse(
    const std::string& name, ConnectionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionState>(
    ConnectionState_descriptor(), name, value);
}
enum ACK : int {
  None = 0,
  UserReady = 1,
  MatchReady = 2,
  InningsReady = 3,
  PlayerSelected = 4,
  NextBowlerSelection = 5,
  NextBowlerSelected = 6,
  StartBallSent = 7,
  StartBallAcked = 8,
  EndBall = 9,
  EndInnings = 10,
  Reconnected = 11,
  ACK_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ACK_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ACK_IsValid(int value);
constexpr ACK ACK_MIN = None;
constexpr ACK ACK_MAX = Reconnected;
constexpr int ACK_ARRAYSIZE = ACK_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACK_descriptor();
template<typename T>
inline const std::string& ACK_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ACK>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ACK_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ACK_descriptor(), enum_t_value);
}
inline bool ACK_Parse(
    const std::string& name, ACK* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ACK>(
    ACK_descriptor(), name, value);
}
enum JoinStates : int {
  NoJoins = 0,
  FirstJoin = 1,
  SecondJoin = 2,
  BothJoins = 3,
  JoinStates_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JoinStates_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JoinStates_IsValid(int value);
constexpr JoinStates JoinStates_MIN = NoJoins;
constexpr JoinStates JoinStates_MAX = BothJoins;
constexpr int JoinStates_ARRAYSIZE = JoinStates_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinStates_descriptor();
template<typename T>
inline const std::string& JoinStates_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinStates>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinStates_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinStates_descriptor(), enum_t_value);
}
inline bool JoinStates_Parse(
    const std::string& name, JoinStates* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinStates>(
    JoinStates_descriptor(), name, value);
}
enum BallStates : int {
  NoBallState = 0,
  BallPublished = 1,
  ShotPublished = 2,
  Outcome = 3,
  Ended = 4,
  BallStates_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BallStates_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BallStates_IsValid(int value);
constexpr BallStates BallStates_MIN = NoBallState;
constexpr BallStates BallStates_MAX = Ended;
constexpr int BallStates_ARRAYSIZE = BallStates_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BallStates_descriptor();
template<typename T>
inline const std::string& BallStates_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BallStates>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BallStates_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BallStates_descriptor(), enum_t_value);
}
inline bool BallStates_Parse(
    const std::string& name, BallStates* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BallStates>(
    BallStates_descriptor(), name, value);
}
enum Brackets : int {
  NoBracket = 0,
  Zero = 1,
  One = 2,
  Two = 3,
  Four = 4,
  Six = 5,
  Brackets_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Brackets_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Brackets_IsValid(int value);
constexpr Brackets Brackets_MIN = NoBracket;
constexpr Brackets Brackets_MAX = Six;
constexpr int Brackets_ARRAYSIZE = Brackets_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brackets_descriptor();
template<typename T>
inline const std::string& Brackets_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brackets>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brackets_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brackets_descriptor(), enum_t_value);
}
inline bool Brackets_Parse(
    const std::string& name, Brackets* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brackets>(
    Brackets_descriptor(), name, value);
}
enum Skulls : int {
  NoSkull = 0,
  GREEN = 1,
  YELLOW = 2,
  RED = 3,
  Skulls_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Skulls_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Skulls_IsValid(int value);
constexpr Skulls Skulls_MIN = NoSkull;
constexpr Skulls Skulls_MAX = RED;
constexpr int Skulls_ARRAYSIZE = Skulls_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Skulls_descriptor();
template<typename T>
inline const std::string& Skulls_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Skulls>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Skulls_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Skulls_descriptor(), enum_t_value);
}
inline bool Skulls_Parse(
    const std::string& name, Skulls* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Skulls>(
    Skulls_descriptor(), name, value);
}
enum SA : int {
  NoneSA = 0,
  Smash = 1,
  TwoX = 2,
  BowlerSteal = 3,
  Yorker = 4,
  BatsmanSteal = 5,
  Rage = 6,
  Boomerang = 7,
  HalfRuns = 8,
  Hex = 9,
  Immortal = 10,
  Doom = 11,
  FiftyFifty = 12,
  SAHit = 13,
  Choke = 14,
  Flashbang = 15,
  Assault = 16,
  AllIn = 17,
  Powersteal = 18,
  Triplet = 19,
  Overload = 20,
  Purge = 21,
  SA_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SA_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SA_IsValid(int value);
constexpr SA SA_MIN = NoneSA;
constexpr SA SA_MAX = Purge;
constexpr int SA_ARRAYSIZE = SA_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SA_descriptor();
template<typename T>
inline const std::string& SA_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SA>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SA_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SA_descriptor(), enum_t_value);
}
inline bool SA_Parse(
    const std::string& name, SA* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SA>(
    SA_descriptor(), name, value);
}
enum Strike : int {
  NoStrike = 0,
  OnStrike = 1,
  OffStrike = 2,
  Strike_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Strike_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Strike_IsValid(int value);
constexpr Strike Strike_MIN = NoStrike;
constexpr Strike Strike_MAX = OffStrike;
constexpr int Strike_ARRAYSIZE = Strike_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Strike_descriptor();
template<typename T>
inline const std::string& Strike_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Strike>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Strike_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Strike_descriptor(), enum_t_value);
}
inline bool Strike_Parse(
    const std::string& name, Strike* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Strike>(
    Strike_descriptor(), name, value);
}
// ===================================================================

class CreateMatchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.CreateMatchRequest) */ {
 public:
  inline CreateMatchRequest() : CreateMatchRequest(nullptr) {};
  virtual ~CreateMatchRequest();

  CreateMatchRequest(const CreateMatchRequest& from);
  CreateMatchRequest(CreateMatchRequest&& from) noexcept
    : CreateMatchRequest() {
    *this = ::std::move(from);
  }

  inline CreateMatchRequest& operator=(const CreateMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMatchRequest& operator=(CreateMatchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMatchRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMatchRequest*>(
               &_CreateMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateMatchRequest& a, CreateMatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMatchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMatchRequest* New() const final {
    return CreateMaybeMessage<CreateMatchRequest>(nullptr);
  }

  CreateMatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMatchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMatchRequest& from);
  void MergeFrom(const CreateMatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.CreateMatchRequest";
  }
  protected:
  explicit CreateMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeLineupFieldNumber = 4,
    kAwayLineupFieldNumber = 5,
    kMatchIdFieldNumber = 1,
    kHomeUserIdFieldNumber = 2,
    kAwayUserIdFieldNumber = 3,
    kFirstBattingUserFieldNumber = 6,
    kBatsmanManaRequiredFieldNumber = 9,
    kIsHomeBotFieldNumber = 7,
    kIsAwayBotFieldNumber = 8,
    kIsRPSEnabledFieldNumber = 11,
    kIsPassivesEnabledFieldNumber = 12,
    kBowlerManaRequiredFieldNumber = 10,
    kMaxOversFieldNumber = 13,
    kIsFtueMatchFieldNumber = 14,
  };
  // repeated .PAYLOAD.Player home_lineup = 4;
  int home_lineup_size() const;
  private:
  int _internal_home_lineup_size() const;
  public:
  void clear_home_lineup();
  ::PAYLOAD::Player* mutable_home_lineup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
      mutable_home_lineup();
  private:
  const ::PAYLOAD::Player& _internal_home_lineup(int index) const;
  ::PAYLOAD::Player* _internal_add_home_lineup();
  public:
  const ::PAYLOAD::Player& home_lineup(int index) const;
  ::PAYLOAD::Player* add_home_lineup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
      home_lineup() const;

  // repeated .PAYLOAD.Player away_lineup = 5;
  int away_lineup_size() const;
  private:
  int _internal_away_lineup_size() const;
  public:
  void clear_away_lineup();
  ::PAYLOAD::Player* mutable_away_lineup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
      mutable_away_lineup();
  private:
  const ::PAYLOAD::Player& _internal_away_lineup(int index) const;
  ::PAYLOAD::Player* _internal_add_away_lineup();
  public:
  const ::PAYLOAD::Player& away_lineup(int index) const;
  ::PAYLOAD::Player* add_away_lineup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
      away_lineup() const;

  // string matchId = 1;
  void clear_matchid();
  const std::string& matchid() const;
  void set_matchid(const std::string& value);
  void set_matchid(std::string&& value);
  void set_matchid(const char* value);
  void set_matchid(const char* value, size_t size);
  std::string* mutable_matchid();
  std::string* release_matchid();
  void set_allocated_matchid(std::string* matchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_matchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_matchid(
      std::string* matchid);
  private:
  const std::string& _internal_matchid() const;
  void _internal_set_matchid(const std::string& value);
  std::string* _internal_mutable_matchid();
  public:

  // string homeUserId = 2;
  void clear_homeuserid();
  const std::string& homeuserid() const;
  void set_homeuserid(const std::string& value);
  void set_homeuserid(std::string&& value);
  void set_homeuserid(const char* value);
  void set_homeuserid(const char* value, size_t size);
  std::string* mutable_homeuserid();
  std::string* release_homeuserid();
  void set_allocated_homeuserid(std::string* homeuserid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_homeuserid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_homeuserid(
      std::string* homeuserid);
  private:
  const std::string& _internal_homeuserid() const;
  void _internal_set_homeuserid(const std::string& value);
  std::string* _internal_mutable_homeuserid();
  public:

  // string awayUserId = 3;
  void clear_awayuserid();
  const std::string& awayuserid() const;
  void set_awayuserid(const std::string& value);
  void set_awayuserid(std::string&& value);
  void set_awayuserid(const char* value);
  void set_awayuserid(const char* value, size_t size);
  std::string* mutable_awayuserid();
  std::string* release_awayuserid();
  void set_allocated_awayuserid(std::string* awayuserid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_awayuserid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_awayuserid(
      std::string* awayuserid);
  private:
  const std::string& _internal_awayuserid() const;
  void _internal_set_awayuserid(const std::string& value);
  std::string* _internal_mutable_awayuserid();
  public:

  // string firstBattingUser = 6;
  void clear_firstbattinguser();
  const std::string& firstbattinguser() const;
  void set_firstbattinguser(const std::string& value);
  void set_firstbattinguser(std::string&& value);
  void set_firstbattinguser(const char* value);
  void set_firstbattinguser(const char* value, size_t size);
  std::string* mutable_firstbattinguser();
  std::string* release_firstbattinguser();
  void set_allocated_firstbattinguser(std::string* firstbattinguser);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_firstbattinguser();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_firstbattinguser(
      std::string* firstbattinguser);
  private:
  const std::string& _internal_firstbattinguser() const;
  void _internal_set_firstbattinguser(const std::string& value);
  std::string* _internal_mutable_firstbattinguser();
  public:

  // int32 batsmanManaRequired = 9;
  void clear_batsmanmanarequired();
  ::PROTOBUF_NAMESPACE_ID::int32 batsmanmanarequired() const;
  void set_batsmanmanarequired(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_batsmanmanarequired() const;
  void _internal_set_batsmanmanarequired(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isHomeBot = 7;
  void clear_ishomebot();
  bool ishomebot() const;
  void set_ishomebot(bool value);
  private:
  bool _internal_ishomebot() const;
  void _internal_set_ishomebot(bool value);
  public:

  // bool isAwayBot = 8;
  void clear_isawaybot();
  bool isawaybot() const;
  void set_isawaybot(bool value);
  private:
  bool _internal_isawaybot() const;
  void _internal_set_isawaybot(bool value);
  public:

  // bool isRPSEnabled = 11;
  void clear_isrpsenabled();
  bool isrpsenabled() const;
  void set_isrpsenabled(bool value);
  private:
  bool _internal_isrpsenabled() const;
  void _internal_set_isrpsenabled(bool value);
  public:

  // bool isPassivesEnabled = 12;
  void clear_ispassivesenabled();
  bool ispassivesenabled() const;
  void set_ispassivesenabled(bool value);
  private:
  bool _internal_ispassivesenabled() const;
  void _internal_set_ispassivesenabled(bool value);
  public:

  // int32 bowlerManaRequired = 10;
  void clear_bowlermanarequired();
  ::PROTOBUF_NAMESPACE_ID::int32 bowlermanarequired() const;
  void set_bowlermanarequired(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bowlermanarequired() const;
  void _internal_set_bowlermanarequired(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxOvers = 13;
  void clear_maxovers();
  ::PROTOBUF_NAMESPACE_ID::int32 maxovers() const;
  void set_maxovers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxovers() const;
  void _internal_set_maxovers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isFtueMatch = 14;
  void clear_isftuematch();
  bool isftuematch() const;
  void set_isftuematch(bool value);
  private:
  bool _internal_isftuematch() const;
  void _internal_set_isftuematch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.CreateMatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player > home_lineup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player > away_lineup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homeuserid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr awayuserid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstbattinguser_;
  ::PROTOBUF_NAMESPACE_ID::int32 batsmanmanarequired_;
  bool ishomebot_;
  bool isawaybot_;
  bool isrpsenabled_;
  bool ispassivesenabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 bowlermanarequired_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxovers_;
  bool isftuematch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class EndMatchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.EndMatchRequest) */ {
 public:
  inline EndMatchRequest() : EndMatchRequest(nullptr) {};
  virtual ~EndMatchRequest();

  EndMatchRequest(const EndMatchRequest& from);
  EndMatchRequest(EndMatchRequest&& from) noexcept
    : EndMatchRequest() {
    *this = ::std::move(from);
  }

  inline EndMatchRequest& operator=(const EndMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndMatchRequest& operator=(EndMatchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndMatchRequest* internal_default_instance() {
    return reinterpret_cast<const EndMatchRequest*>(
               &_EndMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EndMatchRequest& a, EndMatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EndMatchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndMatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndMatchRequest* New() const final {
    return CreateMaybeMessage<EndMatchRequest>(nullptr);
  }

  EndMatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndMatchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndMatchRequest& from);
  void MergeFrom(const EndMatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndMatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.EndMatchRequest";
  }
  protected:
  explicit EndMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kWinnerIdFieldNumber = 4,
    kTeam1DataFieldNumber = 2,
    kTeam2DataFieldNumber = 3,
  };
  // string matchId = 1;
  void clear_matchid();
  const std::string& matchid() const;
  void set_matchid(const std::string& value);
  void set_matchid(std::string&& value);
  void set_matchid(const char* value);
  void set_matchid(const char* value, size_t size);
  std::string* mutable_matchid();
  std::string* release_matchid();
  void set_allocated_matchid(std::string* matchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_matchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_matchid(
      std::string* matchid);
  private:
  const std::string& _internal_matchid() const;
  void _internal_set_matchid(const std::string& value);
  std::string* _internal_mutable_matchid();
  public:

  // string winnerId = 4;
  void clear_winnerid();
  const std::string& winnerid() const;
  void set_winnerid(const std::string& value);
  void set_winnerid(std::string&& value);
  void set_winnerid(const char* value);
  void set_winnerid(const char* value, size_t size);
  std::string* mutable_winnerid();
  std::string* release_winnerid();
  void set_allocated_winnerid(std::string* winnerid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_winnerid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_winnerid(
      std::string* winnerid);
  private:
  const std::string& _internal_winnerid() const;
  void _internal_set_winnerid(const std::string& value);
  std::string* _internal_mutable_winnerid();
  public:

  // .MATCH.EndMatchUserData team1_data = 2;
  bool has_team1_data() const;
  private:
  bool _internal_has_team1_data() const;
  public:
  void clear_team1_data();
  const ::MATCH::EndMatchUserData& team1_data() const;
  ::MATCH::EndMatchUserData* release_team1_data();
  ::MATCH::EndMatchUserData* mutable_team1_data();
  void set_allocated_team1_data(::MATCH::EndMatchUserData* team1_data);
  private:
  const ::MATCH::EndMatchUserData& _internal_team1_data() const;
  ::MATCH::EndMatchUserData* _internal_mutable_team1_data();
  public:
  void unsafe_arena_set_allocated_team1_data(
      ::MATCH::EndMatchUserData* team1_data);
  ::MATCH::EndMatchUserData* unsafe_arena_release_team1_data();

  // .MATCH.EndMatchUserData team2_data = 3;
  bool has_team2_data() const;
  private:
  bool _internal_has_team2_data() const;
  public:
  void clear_team2_data();
  const ::MATCH::EndMatchUserData& team2_data() const;
  ::MATCH::EndMatchUserData* release_team2_data();
  ::MATCH::EndMatchUserData* mutable_team2_data();
  void set_allocated_team2_data(::MATCH::EndMatchUserData* team2_data);
  private:
  const ::MATCH::EndMatchUserData& _internal_team2_data() const;
  ::MATCH::EndMatchUserData* _internal_mutable_team2_data();
  public:
  void unsafe_arena_set_allocated_team2_data(
      ::MATCH::EndMatchUserData* team2_data);
  ::MATCH::EndMatchUserData* unsafe_arena_release_team2_data();

  // @@protoc_insertion_point(class_scope:MATCH.EndMatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr winnerid_;
  ::MATCH::EndMatchUserData* team1_data_;
  ::MATCH::EndMatchUserData* team2_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class EndMatchUserData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.EndMatchUserData) */ {
 public:
  inline EndMatchUserData() : EndMatchUserData(nullptr) {};
  virtual ~EndMatchUserData();

  EndMatchUserData(const EndMatchUserData& from);
  EndMatchUserData(EndMatchUserData&& from) noexcept
    : EndMatchUserData() {
    *this = ::std::move(from);
  }

  inline EndMatchUserData& operator=(const EndMatchUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndMatchUserData& operator=(EndMatchUserData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndMatchUserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndMatchUserData* internal_default_instance() {
    return reinterpret_cast<const EndMatchUserData*>(
               &_EndMatchUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EndMatchUserData& a, EndMatchUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(EndMatchUserData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndMatchUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndMatchUserData* New() const final {
    return CreateMaybeMessage<EndMatchUserData>(nullptr);
  }

  EndMatchUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndMatchUserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndMatchUserData& from);
  void MergeFrom(const EndMatchUserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndMatchUserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.EndMatchUserData";
  }
  protected:
  explicit EndMatchUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTotalFieldNumber = 2,
    kWicketsFieldNumber = 3,
    kBallsFacedFieldNumber = 4,
    kQuitFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wickets = 3;
  void clear_wickets();
  ::PROTOBUF_NAMESPACE_ID::int32 wickets() const;
  void set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wickets() const;
  void _internal_set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 balls_faced = 4;
  void clear_balls_faced();
  ::PROTOBUF_NAMESPACE_ID::int32 balls_faced() const;
  void set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_balls_faced() const;
  void _internal_set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool quit = 5;
  void clear_quit();
  bool quit() const;
  void set_quit(bool value);
  private:
  bool _internal_quit() const;
  void _internal_set_quit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.EndMatchUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  ::PROTOBUF_NAMESPACE_ID::int32 wickets_;
  ::PROTOBUF_NAMESPACE_ID::int32 balls_faced_;
  bool quit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class MatchList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.MatchList) */ {
 public:
  inline MatchList() : MatchList(nullptr) {};
  virtual ~MatchList();

  MatchList(const MatchList& from);
  MatchList(MatchList&& from) noexcept
    : MatchList() {
    *this = ::std::move(from);
  }

  inline MatchList& operator=(const MatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchList& operator=(MatchList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchList* internal_default_instance() {
    return reinterpret_cast<const MatchList*>(
               &_MatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MatchList& a, MatchList& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchList* New() const final {
    return CreateMaybeMessage<MatchList>(nullptr);
  }

  MatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchList& from);
  void MergeFrom(const MatchList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.MatchList";
  }
  protected:
  explicit MatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kHomeFieldNumber = 2,
    kAwayFieldNumber = 3,
  };
  // repeated string MatchId = 1;
  int matchid_size() const;
  private:
  int _internal_matchid_size() const;
  public:
  void clear_matchid();
  const std::string& matchid(int index) const;
  std::string* mutable_matchid(int index);
  void set_matchid(int index, const std::string& value);
  void set_matchid(int index, std::string&& value);
  void set_matchid(int index, const char* value);
  void set_matchid(int index, const char* value, size_t size);
  std::string* add_matchid();
  void add_matchid(const std::string& value);
  void add_matchid(std::string&& value);
  void add_matchid(const char* value);
  void add_matchid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& matchid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_matchid();
  private:
  const std::string& _internal_matchid(int index) const;
  std::string* _internal_add_matchid();
  public:

  // repeated string Home = 2;
  int home_size() const;
  private:
  int _internal_home_size() const;
  public:
  void clear_home();
  const std::string& home(int index) const;
  std::string* mutable_home(int index);
  void set_home(int index, const std::string& value);
  void set_home(int index, std::string&& value);
  void set_home(int index, const char* value);
  void set_home(int index, const char* value, size_t size);
  std::string* add_home();
  void add_home(const std::string& value);
  void add_home(std::string&& value);
  void add_home(const char* value);
  void add_home(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& home() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_home();
  private:
  const std::string& _internal_home(int index) const;
  std::string* _internal_add_home();
  public:

  // repeated string Away = 3;
  int away_size() const;
  private:
  int _internal_away_size() const;
  public:
  void clear_away();
  const std::string& away(int index) const;
  std::string* mutable_away(int index);
  void set_away(int index, const std::string& value);
  void set_away(int index, std::string&& value);
  void set_away(int index, const char* value);
  void set_away(int index, const char* value, size_t size);
  std::string* add_away();
  void add_away(const std::string& value);
  void add_away(std::string&& value);
  void add_away(const char* value);
  void add_away(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& away() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_away();
  private:
  const std::string& _internal_away(int index) const;
  std::string* _internal_add_away();
  public:

  // @@protoc_insertion_point(class_scope:MATCH.MatchList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> matchid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> home_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> away_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class SAInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.SAInfo) */ {
 public:
  inline SAInfo() : SAInfo(nullptr) {};
  virtual ~SAInfo();

  SAInfo(const SAInfo& from);
  SAInfo(SAInfo&& from) noexcept
    : SAInfo() {
    *this = ::std::move(from);
  }

  inline SAInfo& operator=(const SAInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAInfo& operator=(SAInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAInfo* internal_default_instance() {
    return reinterpret_cast<const SAInfo*>(
               &_SAInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SAInfo& a, SAInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SAInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAInfo* New() const final {
    return CreateMaybeMessage<SAInfo>(nullptr);
  }

  SAInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAInfo& from);
  void MergeFrom(const SAInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.SAInfo";
  }
  protected:
  explicit SAInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDurationLeftFieldNumber = 2,
    kAppliedForCurrentBallFieldNumber = 3,
    kMaxDurationFieldNumber = 4,
  };
  // .MATCH.SA type = 1;
  void clear_type();
  ::MATCH::SA type() const;
  void set_type(::MATCH::SA value);
  private:
  ::MATCH::SA _internal_type() const;
  void _internal_set_type(::MATCH::SA value);
  public:

  // int32 duration_left = 2;
  void clear_duration_left();
  ::PROTOBUF_NAMESPACE_ID::int32 duration_left() const;
  void set_duration_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration_left() const;
  void _internal_set_duration_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool applied_for_current_ball = 3;
  void clear_applied_for_current_ball();
  bool applied_for_current_ball() const;
  void set_applied_for_current_ball(bool value);
  private:
  bool _internal_applied_for_current_ball() const;
  void _internal_set_applied_for_current_ball(bool value);
  public:

  // int32 max_duration = 4;
  void clear_max_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 max_duration() const;
  void set_max_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_duration() const;
  void _internal_set_max_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.SAInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_left_;
  bool applied_for_current_ball_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class M_UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.M_UserInfo) */ {
 public:
  inline M_UserInfo() : M_UserInfo(nullptr) {};
  virtual ~M_UserInfo();

  M_UserInfo(const M_UserInfo& from);
  M_UserInfo(M_UserInfo&& from) noexcept
    : M_UserInfo() {
    *this = ::std::move(from);
  }

  inline M_UserInfo& operator=(const M_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline M_UserInfo& operator=(M_UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M_UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M_UserInfo* internal_default_instance() {
    return reinterpret_cast<const M_UserInfo*>(
               &_M_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(M_UserInfo& a, M_UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(M_UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M_UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M_UserInfo* New() const final {
    return CreateMaybeMessage<M_UserInfo>(nullptr);
  }

  M_UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M_UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M_UserInfo& from);
  void MergeFrom(const M_UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M_UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.M_UserInfo";
  }
  protected:
  explicit M_UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpponentUIDFieldNumber = 3,
    kIdFieldNumber = 8,
    kSaInfoFieldNumber = 7,
    kPlayStateFieldNumber = 1,
    kConnectionStateFieldNumber = 2,
    kAckFieldNumber = 4,
    kAutoPlayFieldNumber = 5,
    kManaFillFieldNumber = 6,
  };
  // string opponentUID = 3;
  void clear_opponentuid();
  const std::string& opponentuid() const;
  void set_opponentuid(const std::string& value);
  void set_opponentuid(std::string&& value);
  void set_opponentuid(const char* value);
  void set_opponentuid(const char* value, size_t size);
  std::string* mutable_opponentuid();
  std::string* release_opponentuid();
  void set_allocated_opponentuid(std::string* opponentuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_opponentuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_opponentuid(
      std::string* opponentuid);
  private:
  const std::string& _internal_opponentuid() const;
  void _internal_set_opponentuid(const std::string& value);
  std::string* _internal_mutable_opponentuid();
  public:

  // string id = 8;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .MATCH.SAInfo sa_info = 7;
  bool has_sa_info() const;
  private:
  bool _internal_has_sa_info() const;
  public:
  void clear_sa_info();
  const ::MATCH::SAInfo& sa_info() const;
  ::MATCH::SAInfo* release_sa_info();
  ::MATCH::SAInfo* mutable_sa_info();
  void set_allocated_sa_info(::MATCH::SAInfo* sa_info);
  private:
  const ::MATCH::SAInfo& _internal_sa_info() const;
  ::MATCH::SAInfo* _internal_mutable_sa_info();
  public:
  void unsafe_arena_set_allocated_sa_info(
      ::MATCH::SAInfo* sa_info);
  ::MATCH::SAInfo* unsafe_arena_release_sa_info();

  // .MATCH.M_PlayStates playState = 1;
  void clear_playstate();
  ::MATCH::M_PlayStates playstate() const;
  void set_playstate(::MATCH::M_PlayStates value);
  private:
  ::MATCH::M_PlayStates _internal_playstate() const;
  void _internal_set_playstate(::MATCH::M_PlayStates value);
  public:

  // .MATCH.ConnectionState connectionState = 2;
  void clear_connectionstate();
  ::MATCH::ConnectionState connectionstate() const;
  void set_connectionstate(::MATCH::ConnectionState value);
  private:
  ::MATCH::ConnectionState _internal_connectionstate() const;
  void _internal_set_connectionstate(::MATCH::ConnectionState value);
  public:

  // .MATCH.ACK ack = 4;
  void clear_ack();
  ::MATCH::ACK ack() const;
  void set_ack(::MATCH::ACK value);
  private:
  ::MATCH::ACK _internal_ack() const;
  void _internal_set_ack(::MATCH::ACK value);
  public:

  // bool auto_play = 5;
  void clear_auto_play();
  bool auto_play() const;
  void set_auto_play(bool value);
  private:
  bool _internal_auto_play() const;
  void _internal_set_auto_play(bool value);
  public:

  // int32 mana_fill = 6;
  void clear_mana_fill();
  ::PROTOBUF_NAMESPACE_ID::int32 mana_fill() const;
  void set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mana_fill() const;
  void _internal_set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.M_UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opponentuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::MATCH::SAInfo* sa_info_;
  int playstate_;
  int connectionstate_;
  int ack_;
  bool auto_play_;
  ::PROTOBUF_NAMESPACE_ID::int32 mana_fill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class M_TShot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.M_TShot) */ {
 public:
  inline M_TShot() : M_TShot(nullptr) {};
  virtual ~M_TShot();

  M_TShot(const M_TShot& from);
  M_TShot(M_TShot&& from) noexcept
    : M_TShot() {
    *this = ::std::move(from);
  }

  inline M_TShot& operator=(const M_TShot& from) {
    CopyFrom(from);
    return *this;
  }
  inline M_TShot& operator=(M_TShot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M_TShot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M_TShot* internal_default_instance() {
    return reinterpret_cast<const M_TShot*>(
               &_M_TShot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(M_TShot& a, M_TShot& b) {
    a.Swap(&b);
  }
  inline void Swap(M_TShot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M_TShot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M_TShot* New() const final {
    return CreateMaybeMessage<M_TShot>(nullptr);
  }

  M_TShot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M_TShot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M_TShot& from);
  void MergeFrom(const M_TShot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M_TShot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.M_TShot";
  }
  protected:
  explicit M_TShot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kRunFieldNumber = 3,
    kBracketFieldNumber = 4,
    kProbabilityFieldNumber = 5,
    kBallValueFieldNumber = 7,
    kShotValueFieldNumber = 8,
    kWicketChanceFieldNumber = 6,
    kLockedFieldNumber = 9,
    kShotHiddenFieldNumber = 10,
    kProbabilityHiddenFieldNumber = 11,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 run = 3;
  void clear_run();
  ::PROTOBUF_NAMESPACE_ID::int32 run() const;
  void set_run(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_run() const;
  void _internal_set_run(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MATCH.Brackets bracket = 4;
  void clear_bracket();
  ::MATCH::Brackets bracket() const;
  void set_bracket(::MATCH::Brackets value);
  private:
  ::MATCH::Brackets _internal_bracket() const;
  void _internal_set_bracket(::MATCH::Brackets value);
  public:

  // float probability = 5;
  void clear_probability();
  float probability() const;
  void set_probability(float value);
  private:
  float _internal_probability() const;
  void _internal_set_probability(float value);
  public:

  // double ball_value = 7;
  void clear_ball_value();
  double ball_value() const;
  void set_ball_value(double value);
  private:
  double _internal_ball_value() const;
  void _internal_set_ball_value(double value);
  public:

  // double shot_value = 8;
  void clear_shot_value();
  double shot_value() const;
  void set_shot_value(double value);
  private:
  double _internal_shot_value() const;
  void _internal_set_shot_value(double value);
  public:

  // float wicket_chance = 6;
  void clear_wicket_chance();
  float wicket_chance() const;
  void set_wicket_chance(float value);
  private:
  float _internal_wicket_chance() const;
  void _internal_set_wicket_chance(float value);
  public:

  // bool locked = 9;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // bool shot_hidden = 10;
  void clear_shot_hidden();
  bool shot_hidden() const;
  void set_shot_hidden(bool value);
  private:
  bool _internal_shot_hidden() const;
  void _internal_set_shot_hidden(bool value);
  public:

  // bool probability_hidden = 11;
  void clear_probability_hidden();
  bool probability_hidden() const;
  void set_probability_hidden(bool value);
  private:
  bool _internal_probability_hidden() const;
  void _internal_set_probability_hidden(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.M_TShot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 run_;
  int bracket_;
  float probability_;
  double ball_value_;
  double shot_value_;
  float wicket_chance_;
  bool locked_;
  bool shot_hidden_;
  bool probability_hidden_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class BracketData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.BracketData) */ {
 public:
  inline BracketData() : BracketData(nullptr) {};
  virtual ~BracketData();

  BracketData(const BracketData& from);
  BracketData(BracketData&& from) noexcept
    : BracketData() {
    *this = ::std::move(from);
  }

  inline BracketData& operator=(const BracketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BracketData& operator=(BracketData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BracketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BracketData* internal_default_instance() {
    return reinterpret_cast<const BracketData*>(
               &_BracketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BracketData& a, BracketData& b) {
    a.Swap(&b);
  }
  inline void Swap(BracketData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BracketData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BracketData* New() const final {
    return CreateMaybeMessage<BracketData>(nullptr);
  }

  BracketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BracketData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BracketData& from);
  void MergeFrom(const BracketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BracketData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.BracketData";
  }
  protected:
  explicit BracketData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBracketIdFieldNumber = 1,
    kShotIdFieldNumber = 2,
  };
  // .MATCH.Brackets bracket_id = 1;
  void clear_bracket_id();
  ::MATCH::Brackets bracket_id() const;
  void set_bracket_id(::MATCH::Brackets value);
  private:
  ::MATCH::Brackets _internal_bracket_id() const;
  void _internal_set_bracket_id(::MATCH::Brackets value);
  public:

  // int32 shot_id = 2;
  void clear_shot_id();
  ::PROTOBUF_NAMESPACE_ID::int32 shot_id() const;
  void set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shot_id() const;
  void _internal_set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.BracketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int bracket_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 shot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class M_TBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.M_TBall) */ {
 public:
  inline M_TBall() : M_TBall(nullptr) {};
  virtual ~M_TBall();

  M_TBall(const M_TBall& from);
  M_TBall(M_TBall&& from) noexcept
    : M_TBall() {
    *this = ::std::move(from);
  }

  inline M_TBall& operator=(const M_TBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline M_TBall& operator=(M_TBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M_TBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M_TBall* internal_default_instance() {
    return reinterpret_cast<const M_TBall*>(
               &_M_TBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(M_TBall& a, M_TBall& b) {
    a.Swap(&b);
  }
  inline void Swap(M_TBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M_TBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M_TBall* New() const final {
    return CreateMaybeMessage<M_TBall>(nullptr);
  }

  M_TBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M_TBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M_TBall& from);
  void MergeFrom(const M_TBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M_TBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.M_TBall";
  }
  protected:
  explicit M_TBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShotsPossibleFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kSkullFieldNumber = 4,
    kValueFieldNumber = 3,
  };
  // repeated .MATCH.BracketData shots_possible = 5;
  int shots_possible_size() const;
  private:
  int _internal_shots_possible_size() const;
  public:
  void clear_shots_possible();
  ::MATCH::BracketData* mutable_shots_possible(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::BracketData >*
      mutable_shots_possible();
  private:
  const ::MATCH::BracketData& _internal_shots_possible(int index) const;
  ::MATCH::BracketData* _internal_add_shots_possible();
  public:
  const ::MATCH::BracketData& shots_possible(int index) const;
  ::MATCH::BracketData* add_shots_possible();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::BracketData >&
      shots_possible() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MATCH.Skulls skull = 4;
  void clear_skull();
  ::MATCH::Skulls skull() const;
  void set_skull(::MATCH::Skulls value);
  private:
  ::MATCH::Skulls _internal_skull() const;
  void _internal_set_skull(::MATCH::Skulls value);
  public:

  // double value = 3;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.M_TBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::BracketData > shots_possible_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int skull_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class TOutcome PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.TOutcome) */ {
 public:
  inline TOutcome() : TOutcome(nullptr) {};
  virtual ~TOutcome();

  TOutcome(const TOutcome& from);
  TOutcome(TOutcome&& from) noexcept
    : TOutcome() {
    *this = ::std::move(from);
  }

  inline TOutcome& operator=(const TOutcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOutcome& operator=(TOutcome&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TOutcome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TOutcome* internal_default_instance() {
    return reinterpret_cast<const TOutcome*>(
               &_TOutcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TOutcome& a, TOutcome& b) {
    a.Swap(&b);
  }
  inline void Swap(TOutcome* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOutcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TOutcome* New() const final {
    return CreateMaybeMessage<TOutcome>(nullptr);
  }

  TOutcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TOutcome>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TOutcome& from);
  void MergeFrom(const TOutcome& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOutcome* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.TOutcome";
  }
  protected:
  explicit TOutcome(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutcomeFieldNumber = 1,
    kRunsFieldNumber = 2,
    kRandomFieldNumber = 3,
  };
  // .PAYLOAD.ShotOutcomes outcome = 1;
  void clear_outcome();
  ::PAYLOAD::ShotOutcomes outcome() const;
  void set_outcome(::PAYLOAD::ShotOutcomes value);
  private:
  ::PAYLOAD::ShotOutcomes _internal_outcome() const;
  void _internal_set_outcome(::PAYLOAD::ShotOutcomes value);
  public:

  // int32 runs = 2;
  void clear_runs();
  ::PROTOBUF_NAMESPACE_ID::int32 runs() const;
  void set_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runs() const;
  void _internal_set_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double random = 3;
  void clear_random();
  double random() const;
  void set_random(double value);
  private:
  double _internal_random() const;
  void _internal_set_random(double value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.TOutcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int outcome_;
  ::PROTOBUF_NAMESPACE_ID::int32 runs_;
  double random_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class M_CurrentBall PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.M_CurrentBall) */ {
 public:
  inline M_CurrentBall() : M_CurrentBall(nullptr) {};
  virtual ~M_CurrentBall();

  M_CurrentBall(const M_CurrentBall& from);
  M_CurrentBall(M_CurrentBall&& from) noexcept
    : M_CurrentBall() {
    *this = ::std::move(from);
  }

  inline M_CurrentBall& operator=(const M_CurrentBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline M_CurrentBall& operator=(M_CurrentBall&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M_CurrentBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M_CurrentBall* internal_default_instance() {
    return reinterpret_cast<const M_CurrentBall*>(
               &_M_CurrentBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(M_CurrentBall& a, M_CurrentBall& b) {
    a.Swap(&b);
  }
  inline void Swap(M_CurrentBall* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M_CurrentBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M_CurrentBall* New() const final {
    return CreateMaybeMessage<M_CurrentBall>(nullptr);
  }

  M_CurrentBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M_CurrentBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M_CurrentBall& from);
  void MergeFrom(const M_CurrentBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M_CurrentBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.M_CurrentBall";
  }
  protected:
  explicit M_CurrentBall(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShotsFieldNumber = 3,
    kBallsFieldNumber = 4,
    kOutcomeFieldNumber = 2,
    kSelectedBallFieldNumber = 5,
    kSelectedShotFieldNumber = 6,
    kStateFieldNumber = 1,
    kOverBallNumberFieldNumber = 7,
  };
  // repeated .MATCH.M_TShot shots = 3;
  int shots_size() const;
  private:
  int _internal_shots_size() const;
  public:
  void clear_shots();
  ::MATCH::M_TShot* mutable_shots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TShot >*
      mutable_shots();
  private:
  const ::MATCH::M_TShot& _internal_shots(int index) const;
  ::MATCH::M_TShot* _internal_add_shots();
  public:
  const ::MATCH::M_TShot& shots(int index) const;
  ::MATCH::M_TShot* add_shots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TShot >&
      shots() const;

  // repeated .MATCH.M_TBall balls = 4;
  int balls_size() const;
  private:
  int _internal_balls_size() const;
  public:
  void clear_balls();
  ::MATCH::M_TBall* mutable_balls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TBall >*
      mutable_balls();
  private:
  const ::MATCH::M_TBall& _internal_balls(int index) const;
  ::MATCH::M_TBall* _internal_add_balls();
  public:
  const ::MATCH::M_TBall& balls(int index) const;
  ::MATCH::M_TBall* add_balls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TBall >&
      balls() const;

  // .MATCH.TOutcome outcome = 2;
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  const ::MATCH::TOutcome& outcome() const;
  ::MATCH::TOutcome* release_outcome();
  ::MATCH::TOutcome* mutable_outcome();
  void set_allocated_outcome(::MATCH::TOutcome* outcome);
  private:
  const ::MATCH::TOutcome& _internal_outcome() const;
  ::MATCH::TOutcome* _internal_mutable_outcome();
  public:
  void unsafe_arena_set_allocated_outcome(
      ::MATCH::TOutcome* outcome);
  ::MATCH::TOutcome* unsafe_arena_release_outcome();

  // .MATCH.M_TBall selectedBall = 5;
  bool has_selectedball() const;
  private:
  bool _internal_has_selectedball() const;
  public:
  void clear_selectedball();
  const ::MATCH::M_TBall& selectedball() const;
  ::MATCH::M_TBall* release_selectedball();
  ::MATCH::M_TBall* mutable_selectedball();
  void set_allocated_selectedball(::MATCH::M_TBall* selectedball);
  private:
  const ::MATCH::M_TBall& _internal_selectedball() const;
  ::MATCH::M_TBall* _internal_mutable_selectedball();
  public:
  void unsafe_arena_set_allocated_selectedball(
      ::MATCH::M_TBall* selectedball);
  ::MATCH::M_TBall* unsafe_arena_release_selectedball();

  // .MATCH.M_TShot selectedShot = 6;
  bool has_selectedshot() const;
  private:
  bool _internal_has_selectedshot() const;
  public:
  void clear_selectedshot();
  const ::MATCH::M_TShot& selectedshot() const;
  ::MATCH::M_TShot* release_selectedshot();
  ::MATCH::M_TShot* mutable_selectedshot();
  void set_allocated_selectedshot(::MATCH::M_TShot* selectedshot);
  private:
  const ::MATCH::M_TShot& _internal_selectedshot() const;
  ::MATCH::M_TShot* _internal_mutable_selectedshot();
  public:
  void unsafe_arena_set_allocated_selectedshot(
      ::MATCH::M_TShot* selectedshot);
  ::MATCH::M_TShot* unsafe_arena_release_selectedshot();

  // .MATCH.BallStates state = 1;
  void clear_state();
  ::MATCH::BallStates state() const;
  void set_state(::MATCH::BallStates value);
  private:
  ::MATCH::BallStates _internal_state() const;
  void _internal_set_state(::MATCH::BallStates value);
  public:

  // int32 over_ball_number = 7;
  void clear_over_ball_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number() const;
  void set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_ball_number() const;
  void _internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.M_CurrentBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TShot > shots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TBall > balls_;
  ::MATCH::TOutcome* outcome_;
  ::MATCH::M_TBall* selectedball_;
  ::MATCH::M_TShot* selectedshot_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class M_Innings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.M_Innings) */ {
 public:
  inline M_Innings() : M_Innings(nullptr) {};
  virtual ~M_Innings();

  M_Innings(const M_Innings& from);
  M_Innings(M_Innings&& from) noexcept
    : M_Innings() {
    *this = ::std::move(from);
  }

  inline M_Innings& operator=(const M_Innings& from) {
    CopyFrom(from);
    return *this;
  }
  inline M_Innings& operator=(M_Innings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M_Innings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M_Innings* internal_default_instance() {
    return reinterpret_cast<const M_Innings*>(
               &_M_Innings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(M_Innings& a, M_Innings& b) {
    a.Swap(&b);
  }
  inline void Swap(M_Innings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M_Innings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M_Innings* New() const final {
    return CreateMaybeMessage<M_Innings>(nullptr);
  }

  M_Innings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M_Innings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M_Innings& from);
  void MergeFrom(const M_Innings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M_Innings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.M_Innings";
  }
  protected:
  explicit M_Innings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserOnBattingFieldNumber = 11,
    kUserOnBowlingFieldNumber = 12,
    kInningFieldNumber = 1,
    kRunsFieldNumber = 2,
    kBallsFieldNumber = 3,
    kWicketsFieldNumber = 4,
    kOverNumberFieldNumber = 5,
    kMaxBallsPerOverFieldNumber = 6,
    kMaxOversFieldNumber = 7,
    kBoundaryCounterFieldNumber = 8,
    kGreenShotMissedCounterFieldNumber = 9,
    kYellowShotMissedCounterFieldNumber = 10,
  };
  // string user_on_batting = 11;
  void clear_user_on_batting();
  const std::string& user_on_batting() const;
  void set_user_on_batting(const std::string& value);
  void set_user_on_batting(std::string&& value);
  void set_user_on_batting(const char* value);
  void set_user_on_batting(const char* value, size_t size);
  std::string* mutable_user_on_batting();
  std::string* release_user_on_batting();
  void set_allocated_user_on_batting(std::string* user_on_batting);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_on_batting();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_on_batting(
      std::string* user_on_batting);
  private:
  const std::string& _internal_user_on_batting() const;
  void _internal_set_user_on_batting(const std::string& value);
  std::string* _internal_mutable_user_on_batting();
  public:

  // string user_on_bowling = 12;
  void clear_user_on_bowling();
  const std::string& user_on_bowling() const;
  void set_user_on_bowling(const std::string& value);
  void set_user_on_bowling(std::string&& value);
  void set_user_on_bowling(const char* value);
  void set_user_on_bowling(const char* value, size_t size);
  std::string* mutable_user_on_bowling();
  std::string* release_user_on_bowling();
  void set_allocated_user_on_bowling(std::string* user_on_bowling);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_on_bowling();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_on_bowling(
      std::string* user_on_bowling);
  private:
  const std::string& _internal_user_on_bowling() const;
  void _internal_set_user_on_bowling(const std::string& value);
  std::string* _internal_mutable_user_on_bowling();
  public:

  // .PAYLOAD.Innings inning = 1;
  void clear_inning();
  ::PAYLOAD::Innings inning() const;
  void set_inning(::PAYLOAD::Innings value);
  private:
  ::PAYLOAD::Innings _internal_inning() const;
  void _internal_set_inning(::PAYLOAD::Innings value);
  public:

  // int32 runs = 2;
  void clear_runs();
  ::PROTOBUF_NAMESPACE_ID::int32 runs() const;
  void set_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runs() const;
  void _internal_set_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 balls = 3;
  void clear_balls();
  ::PROTOBUF_NAMESPACE_ID::int32 balls() const;
  void set_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_balls() const;
  void _internal_set_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wickets = 4;
  void clear_wickets();
  ::PROTOBUF_NAMESPACE_ID::int32 wickets() const;
  void set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wickets() const;
  void _internal_set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 over_number = 5;
  void clear_over_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_number() const;
  void set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_number() const;
  void _internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_balls_per_over = 6;
  void clear_max_balls_per_over();
  ::PROTOBUF_NAMESPACE_ID::int32 max_balls_per_over() const;
  void set_max_balls_per_over(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_balls_per_over() const;
  void _internal_set_max_balls_per_over(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_overs = 7;
  void clear_max_overs();
  ::PROTOBUF_NAMESPACE_ID::int32 max_overs() const;
  void set_max_overs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_overs() const;
  void _internal_set_max_overs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 boundary_counter = 8;
  void clear_boundary_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_counter() const;
  void set_boundary_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boundary_counter() const;
  void _internal_set_boundary_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 green_shot_missed_counter = 9;
  void clear_green_shot_missed_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 green_shot_missed_counter() const;
  void set_green_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_green_shot_missed_counter() const;
  void _internal_set_green_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 yellow_shot_missed_counter = 10;
  void clear_yellow_shot_missed_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 yellow_shot_missed_counter() const;
  void set_yellow_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yellow_shot_missed_counter() const;
  void _internal_set_yellow_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.M_Innings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_on_batting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_on_bowling_;
  int inning_;
  ::PROTOBUF_NAMESPACE_ID::int32 runs_;
  ::PROTOBUF_NAMESPACE_ID::int32 balls_;
  ::PROTOBUF_NAMESPACE_ID::int32 wickets_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_balls_per_over_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_overs_;
  ::PROTOBUF_NAMESPACE_ID::int32 boundary_counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 green_shot_missed_counter_;
  ::PROTOBUF_NAMESPACE_ID::int32 yellow_shot_missed_counter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class IOutcome PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.IOutcome) */ {
 public:
  inline IOutcome() : IOutcome(nullptr) {};
  virtual ~IOutcome();

  IOutcome(const IOutcome& from);
  IOutcome(IOutcome&& from) noexcept
    : IOutcome() {
    *this = ::std::move(from);
  }

  inline IOutcome& operator=(const IOutcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOutcome& operator=(IOutcome&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IOutcome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOutcome* internal_default_instance() {
    return reinterpret_cast<const IOutcome*>(
               &_IOutcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IOutcome& a, IOutcome& b) {
    a.Swap(&b);
  }
  inline void Swap(IOutcome* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOutcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IOutcome* New() const final {
    return CreateMaybeMessage<IOutcome>(nullptr);
  }

  IOutcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IOutcome>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IOutcome& from);
  void MergeFrom(const IOutcome& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOutcome* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.IOutcome";
  }
  protected:
  explicit IOutcome(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalRunsFieldNumber = 1,
    kTotalBallsFieldNumber = 2,
    kWicketsTakenFieldNumber = 3,
    kRunsScoredFieldNumber = 4,
    kOriginalRunsScoredFieldNumber = 5,
    kBracketIdFieldNumber = 6,
    kOverBallNumberFieldNumber = 7,
    kOverNumberFieldNumber = 8,
    kOutcomeFieldNumber = 9,
  };
  // int32 total_runs = 1;
  void clear_total_runs();
  ::PROTOBUF_NAMESPACE_ID::int32 total_runs() const;
  void set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_runs() const;
  void _internal_set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_balls = 2;
  void clear_total_balls();
  ::PROTOBUF_NAMESPACE_ID::int32 total_balls() const;
  void set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_balls() const;
  void _internal_set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wickets_taken = 3;
  void clear_wickets_taken();
  ::PROTOBUF_NAMESPACE_ID::int32 wickets_taken() const;
  void set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wickets_taken() const;
  void _internal_set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 runs_scored = 4;
  void clear_runs_scored();
  ::PROTOBUF_NAMESPACE_ID::int32 runs_scored() const;
  void set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runs_scored() const;
  void _internal_set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 original_runs_scored = 5;
  void clear_original_runs_scored();
  ::PROTOBUF_NAMESPACE_ID::int32 original_runs_scored() const;
  void set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_runs_scored() const;
  void _internal_set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MATCH.Brackets bracket_id = 6;
  void clear_bracket_id();
  ::MATCH::Brackets bracket_id() const;
  void set_bracket_id(::MATCH::Brackets value);
  private:
  ::MATCH::Brackets _internal_bracket_id() const;
  void _internal_set_bracket_id(::MATCH::Brackets value);
  public:

  // int32 over_ball_number = 7;
  void clear_over_ball_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number() const;
  void set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_ball_number() const;
  void _internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 over_number = 8;
  void clear_over_number();
  ::PROTOBUF_NAMESPACE_ID::int32 over_number() const;
  void set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_over_number() const;
  void _internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PAYLOAD.ShotOutcomes outcome = 9;
  void clear_outcome();
  ::PAYLOAD::ShotOutcomes outcome() const;
  void set_outcome(::PAYLOAD::ShotOutcomes value);
  private:
  ::PAYLOAD::ShotOutcomes _internal_outcome() const;
  void _internal_set_outcome(::PAYLOAD::ShotOutcomes value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.IOutcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_runs_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_balls_;
  ::PROTOBUF_NAMESPACE_ID::int32 wickets_taken_;
  ::PROTOBUF_NAMESPACE_ID::int32 runs_scored_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_runs_scored_;
  int bracket_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_ball_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 over_number_;
  int outcome_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class MatchPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.MatchPlayer) */ {
 public:
  inline MatchPlayer() : MatchPlayer(nullptr) {};
  virtual ~MatchPlayer();

  MatchPlayer(const MatchPlayer& from);
  MatchPlayer(MatchPlayer&& from) noexcept
    : MatchPlayer() {
    *this = ::std::move(from);
  }

  inline MatchPlayer& operator=(const MatchPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchPlayer& operator=(MatchPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchPlayer* internal_default_instance() {
    return reinterpret_cast<const MatchPlayer*>(
               &_MatchPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MatchPlayer& a, MatchPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchPlayer* New() const final {
    return CreateMaybeMessage<MatchPlayer>(nullptr);
  }

  MatchPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchPlayer& from);
  void MergeFrom(const MatchPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.MatchPlayer";
  }
  protected:
  explicit MatchPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kCharacterIdFieldNumber = 1,
    kImageNumberFieldNumber = 3,
    kPowerFieldNumber = 4,
    kLineupNumberFieldNumber = 5,
    kIsOutFieldNumber = 6,
    kUsedFieldNumber = 7,
    kHitsFieldNumber = 8,
    kLhbrhbFieldNumber = 10,
    kMissesFieldNumber = 9,
    kStrikeFieldNumber = 12,
    kConfidenceFieldNumber = 11,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nickname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nickname(
      std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 character_id = 1;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int32 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 image_number = 3;
  void clear_image_number();
  ::PROTOBUF_NAMESPACE_ID::int32 image_number() const;
  void set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_number() const;
  void _internal_set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 power = 4;
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::int32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lineup_number = 5;
  void clear_lineup_number();
  ::PROTOBUF_NAMESPACE_ID::int32 lineup_number() const;
  void set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lineup_number() const;
  void _internal_set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_out = 6;
  void clear_is_out();
  bool is_out() const;
  void set_is_out(bool value);
  private:
  bool _internal_is_out() const;
  void _internal_set_is_out(bool value);
  public:

  // bool used = 7;
  void clear_used();
  bool used() const;
  void set_used(bool value);
  private:
  bool _internal_used() const;
  void _internal_set_used(bool value);
  public:

  // int32 hits = 8;
  void clear_hits();
  ::PROTOBUF_NAMESPACE_ID::int32 hits() const;
  void set_hits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hits() const;
  void _internal_set_hits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double lhbrhb = 10;
  void clear_lhbrhb();
  double lhbrhb() const;
  void set_lhbrhb(double value);
  private:
  double _internal_lhbrhb() const;
  void _internal_set_lhbrhb(double value);
  public:

  // int32 misses = 9;
  void clear_misses();
  ::PROTOBUF_NAMESPACE_ID::int32 misses() const;
  void set_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_misses() const;
  void _internal_set_misses(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MATCH.Strike strike = 12;
  void clear_strike();
  ::MATCH::Strike strike() const;
  void set_strike(::MATCH::Strike value);
  private:
  ::MATCH::Strike _internal_strike() const;
  void _internal_set_strike(::MATCH::Strike value);
  public:

  // double confidence = 11;
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.MatchPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 character_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 image_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_;
  ::PROTOBUF_NAMESPACE_ID::int32 lineup_number_;
  bool is_out_;
  bool used_;
  ::PROTOBUF_NAMESPACE_ID::int32 hits_;
  double lhbrhb_;
  ::PROTOBUF_NAMESPACE_ID::int32 misses_;
  int strike_;
  double confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class MatchModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH.MatchModel) */ {
 public:
  inline MatchModel() : MatchModel(nullptr) {};
  virtual ~MatchModel();

  MatchModel(const MatchModel& from);
  MatchModel(MatchModel&& from) noexcept
    : MatchModel() {
    *this = ::std::move(from);
  }

  inline MatchModel& operator=(const MatchModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchModel& operator=(MatchModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchModel* internal_default_instance() {
    return reinterpret_cast<const MatchModel*>(
               &_MatchModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MatchModel& a, MatchModel& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchModel* New() const final {
    return CreateMaybeMessage<MatchModel>(nullptr);
  }

  MatchModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchModel& from);
  void MergeFrom(const MatchModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH.MatchModel";
  }
  protected:
  explicit MatchModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_match_2eproto);
    return ::descriptor_table_match_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kHomeLineupFieldNumber = 9,
    kAwayLineupFieldNumber = 10,
    kPreviousBallsFieldNumber = 12,
    kMatchIdFieldNumber = 1,
    kHomeFieldNumber = 3,
    kAwayFieldNumber = 4,
    kCurrentInningsFieldNumber = 7,
    kPreviousInningsFieldNumber = 8,
    kCurrentBallFieldNumber = 11,
    kSelectedFirstBatsmanFieldNumber = 13,
    kSelectedSecondBatsmanFieldNumber = 14,
    kSelectedBowlerFieldNumber = 15,
    kJoinStateFieldNumber = 5,
    kMatchStateFieldNumber = 6,
    kStateStartTimeFieldNumber = 17,
    kBothDisconnectTimePointFieldNumber = 18,
    kPreviousEventFieldNumber = 16,
  };
  // repeated .MATCH.M_UserInfo users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::MATCH::M_UserInfo* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_UserInfo >*
      mutable_users();
  private:
  const ::MATCH::M_UserInfo& _internal_users(int index) const;
  ::MATCH::M_UserInfo* _internal_add_users();
  public:
  const ::MATCH::M_UserInfo& users(int index) const;
  ::MATCH::M_UserInfo* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_UserInfo >&
      users() const;

  // repeated .MATCH.MatchPlayer home_lineup = 9;
  int home_lineup_size() const;
  private:
  int _internal_home_lineup_size() const;
  public:
  void clear_home_lineup();
  ::MATCH::MatchPlayer* mutable_home_lineup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >*
      mutable_home_lineup();
  private:
  const ::MATCH::MatchPlayer& _internal_home_lineup(int index) const;
  ::MATCH::MatchPlayer* _internal_add_home_lineup();
  public:
  const ::MATCH::MatchPlayer& home_lineup(int index) const;
  ::MATCH::MatchPlayer* add_home_lineup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >&
      home_lineup() const;

  // repeated .MATCH.MatchPlayer away_lineup = 10;
  int away_lineup_size() const;
  private:
  int _internal_away_lineup_size() const;
  public:
  void clear_away_lineup();
  ::MATCH::MatchPlayer* mutable_away_lineup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >*
      mutable_away_lineup();
  private:
  const ::MATCH::MatchPlayer& _internal_away_lineup(int index) const;
  ::MATCH::MatchPlayer* _internal_add_away_lineup();
  public:
  const ::MATCH::MatchPlayer& away_lineup(int index) const;
  ::MATCH::MatchPlayer* add_away_lineup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >&
      away_lineup() const;

  // repeated .MATCH.M_CurrentBall previousBalls = 12;
  int previousballs_size() const;
  private:
  int _internal_previousballs_size() const;
  public:
  void clear_previousballs();
  ::MATCH::M_CurrentBall* mutable_previousballs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_CurrentBall >*
      mutable_previousballs();
  private:
  const ::MATCH::M_CurrentBall& _internal_previousballs(int index) const;
  ::MATCH::M_CurrentBall* _internal_add_previousballs();
  public:
  const ::MATCH::M_CurrentBall& previousballs(int index) const;
  ::MATCH::M_CurrentBall* add_previousballs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_CurrentBall >&
      previousballs() const;

  // string matchId = 1;
  void clear_matchid();
  const std::string& matchid() const;
  void set_matchid(const std::string& value);
  void set_matchid(std::string&& value);
  void set_matchid(const char* value);
  void set_matchid(const char* value, size_t size);
  std::string* mutable_matchid();
  std::string* release_matchid();
  void set_allocated_matchid(std::string* matchid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_matchid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_matchid(
      std::string* matchid);
  private:
  const std::string& _internal_matchid() const;
  void _internal_set_matchid(const std::string& value);
  std::string* _internal_mutable_matchid();
  public:

  // string home = 3;
  void clear_home();
  const std::string& home() const;
  void set_home(const std::string& value);
  void set_home(std::string&& value);
  void set_home(const char* value);
  void set_home(const char* value, size_t size);
  std::string* mutable_home();
  std::string* release_home();
  void set_allocated_home(std::string* home);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_home();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_home(
      std::string* home);
  private:
  const std::string& _internal_home() const;
  void _internal_set_home(const std::string& value);
  std::string* _internal_mutable_home();
  public:

  // string away = 4;
  void clear_away();
  const std::string& away() const;
  void set_away(const std::string& value);
  void set_away(std::string&& value);
  void set_away(const char* value);
  void set_away(const char* value, size_t size);
  std::string* mutable_away();
  std::string* release_away();
  void set_allocated_away(std::string* away);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_away();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_away(
      std::string* away);
  private:
  const std::string& _internal_away() const;
  void _internal_set_away(const std::string& value);
  std::string* _internal_mutable_away();
  public:

  // .MATCH.M_Innings currentInnings = 7;
  bool has_currentinnings() const;
  private:
  bool _internal_has_currentinnings() const;
  public:
  void clear_currentinnings();
  const ::MATCH::M_Innings& currentinnings() const;
  ::MATCH::M_Innings* release_currentinnings();
  ::MATCH::M_Innings* mutable_currentinnings();
  void set_allocated_currentinnings(::MATCH::M_Innings* currentinnings);
  private:
  const ::MATCH::M_Innings& _internal_currentinnings() const;
  ::MATCH::M_Innings* _internal_mutable_currentinnings();
  public:
  void unsafe_arena_set_allocated_currentinnings(
      ::MATCH::M_Innings* currentinnings);
  ::MATCH::M_Innings* unsafe_arena_release_currentinnings();

  // .MATCH.M_Innings previousInnings = 8;
  bool has_previousinnings() const;
  private:
  bool _internal_has_previousinnings() const;
  public:
  void clear_previousinnings();
  const ::MATCH::M_Innings& previousinnings() const;
  ::MATCH::M_Innings* release_previousinnings();
  ::MATCH::M_Innings* mutable_previousinnings();
  void set_allocated_previousinnings(::MATCH::M_Innings* previousinnings);
  private:
  const ::MATCH::M_Innings& _internal_previousinnings() const;
  ::MATCH::M_Innings* _internal_mutable_previousinnings();
  public:
  void unsafe_arena_set_allocated_previousinnings(
      ::MATCH::M_Innings* previousinnings);
  ::MATCH::M_Innings* unsafe_arena_release_previousinnings();

  // .MATCH.M_CurrentBall currentBall = 11;
  bool has_currentball() const;
  private:
  bool _internal_has_currentball() const;
  public:
  void clear_currentball();
  const ::MATCH::M_CurrentBall& currentball() const;
  ::MATCH::M_CurrentBall* release_currentball();
  ::MATCH::M_CurrentBall* mutable_currentball();
  void set_allocated_currentball(::MATCH::M_CurrentBall* currentball);
  private:
  const ::MATCH::M_CurrentBall& _internal_currentball() const;
  ::MATCH::M_CurrentBall* _internal_mutable_currentball();
  public:
  void unsafe_arena_set_allocated_currentball(
      ::MATCH::M_CurrentBall* currentball);
  ::MATCH::M_CurrentBall* unsafe_arena_release_currentball();

  // .MATCH.MatchPlayer selectedFirstBatsman = 13;
  bool has_selectedfirstbatsman() const;
  private:
  bool _internal_has_selectedfirstbatsman() const;
  public:
  void clear_selectedfirstbatsman();
  const ::MATCH::MatchPlayer& selectedfirstbatsman() const;
  ::MATCH::MatchPlayer* release_selectedfirstbatsman();
  ::MATCH::MatchPlayer* mutable_selectedfirstbatsman();
  void set_allocated_selectedfirstbatsman(::MATCH::MatchPlayer* selectedfirstbatsman);
  private:
  const ::MATCH::MatchPlayer& _internal_selectedfirstbatsman() const;
  ::MATCH::MatchPlayer* _internal_mutable_selectedfirstbatsman();
  public:
  void unsafe_arena_set_allocated_selectedfirstbatsman(
      ::MATCH::MatchPlayer* selectedfirstbatsman);
  ::MATCH::MatchPlayer* unsafe_arena_release_selectedfirstbatsman();

  // .MATCH.MatchPlayer selectedSecondBatsman = 14;
  bool has_selectedsecondbatsman() const;
  private:
  bool _internal_has_selectedsecondbatsman() const;
  public:
  void clear_selectedsecondbatsman();
  const ::MATCH::MatchPlayer& selectedsecondbatsman() const;
  ::MATCH::MatchPlayer* release_selectedsecondbatsman();
  ::MATCH::MatchPlayer* mutable_selectedsecondbatsman();
  void set_allocated_selectedsecondbatsman(::MATCH::MatchPlayer* selectedsecondbatsman);
  private:
  const ::MATCH::MatchPlayer& _internal_selectedsecondbatsman() const;
  ::MATCH::MatchPlayer* _internal_mutable_selectedsecondbatsman();
  public:
  void unsafe_arena_set_allocated_selectedsecondbatsman(
      ::MATCH::MatchPlayer* selectedsecondbatsman);
  ::MATCH::MatchPlayer* unsafe_arena_release_selectedsecondbatsman();

  // .MATCH.MatchPlayer selectedBowler = 15;
  bool has_selectedbowler() const;
  private:
  bool _internal_has_selectedbowler() const;
  public:
  void clear_selectedbowler();
  const ::MATCH::MatchPlayer& selectedbowler() const;
  ::MATCH::MatchPlayer* release_selectedbowler();
  ::MATCH::MatchPlayer* mutable_selectedbowler();
  void set_allocated_selectedbowler(::MATCH::MatchPlayer* selectedbowler);
  private:
  const ::MATCH::MatchPlayer& _internal_selectedbowler() const;
  ::MATCH::MatchPlayer* _internal_mutable_selectedbowler();
  public:
  void unsafe_arena_set_allocated_selectedbowler(
      ::MATCH::MatchPlayer* selectedbowler);
  ::MATCH::MatchPlayer* unsafe_arena_release_selectedbowler();

  // .MATCH.JoinStates joinState = 5;
  void clear_joinstate();
  ::MATCH::JoinStates joinstate() const;
  void set_joinstate(::MATCH::JoinStates value);
  private:
  ::MATCH::JoinStates _internal_joinstate() const;
  void _internal_set_joinstate(::MATCH::JoinStates value);
  public:

  // .PAYLOAD.MatchStates matchState = 6;
  void clear_matchstate();
  ::PAYLOAD::MatchStates matchstate() const;
  void set_matchstate(::PAYLOAD::MatchStates value);
  private:
  ::PAYLOAD::MatchStates _internal_matchstate() const;
  void _internal_set_matchstate(::PAYLOAD::MatchStates value);
  public:

  // int64 stateStartTime = 17;
  void clear_statestarttime();
  ::PROTOBUF_NAMESPACE_ID::int64 statestarttime() const;
  void set_statestarttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_statestarttime() const;
  void _internal_set_statestarttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 both_disconnect_time_point = 18;
  void clear_both_disconnect_time_point();
  ::PROTOBUF_NAMESPACE_ID::int64 both_disconnect_time_point() const;
  void set_both_disconnect_time_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_both_disconnect_time_point() const;
  void _internal_set_both_disconnect_time_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .PAYLOAD.Events previousEvent = 16;
  void clear_previousevent();
  ::PAYLOAD::Events previousevent() const;
  void set_previousevent(::PAYLOAD::Events value);
  private:
  ::PAYLOAD::Events _internal_previousevent() const;
  void _internal_set_previousevent(::PAYLOAD::Events value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH.MatchModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_UserInfo > users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer > home_lineup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer > away_lineup_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_CurrentBall > previousballs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matchid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr away_;
  ::MATCH::M_Innings* currentinnings_;
  ::MATCH::M_Innings* previousinnings_;
  ::MATCH::M_CurrentBall* currentball_;
  ::MATCH::MatchPlayer* selectedfirstbatsman_;
  ::MATCH::MatchPlayer* selectedsecondbatsman_;
  ::MATCH::MatchPlayer* selectedbowler_;
  int joinstate_;
  int matchstate_;
  ::PROTOBUF_NAMESPACE_ID::int64 statestarttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 both_disconnect_time_point_;
  int previousevent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateMatchRequest

// string matchId = 1;
inline void CreateMatchRequest::clear_matchid() {
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateMatchRequest::matchid() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.matchId)
  return _internal_matchid();
}
inline void CreateMatchRequest::set_matchid(const std::string& value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.matchId)
}
inline std::string* CreateMatchRequest::mutable_matchid() {
  // @@protoc_insertion_point(field_mutable:MATCH.CreateMatchRequest.matchId)
  return _internal_mutable_matchid();
}
inline const std::string& CreateMatchRequest::_internal_matchid() const {
  return matchid_.Get();
}
inline void CreateMatchRequest::_internal_set_matchid(const std::string& value) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateMatchRequest::set_matchid(std::string&& value) {
  
  matchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.CreateMatchRequest.matchId)
}
inline void CreateMatchRequest::set_matchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.CreateMatchRequest.matchId)
}
inline void CreateMatchRequest::set_matchid(const char* value,
    size_t size) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.CreateMatchRequest.matchId)
}
inline std::string* CreateMatchRequest::_internal_mutable_matchid() {
  
  return matchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateMatchRequest::release_matchid() {
  // @@protoc_insertion_point(field_release:MATCH.CreateMatchRequest.matchId)
  return matchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateMatchRequest::set_allocated_matchid(std::string* matchid) {
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.CreateMatchRequest.matchId)
}
inline std::string* CreateMatchRequest::unsafe_arena_release_matchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.CreateMatchRequest.matchId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return matchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateMatchRequest::unsafe_arena_set_allocated_matchid(
    std::string* matchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      matchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.CreateMatchRequest.matchId)
}

// string homeUserId = 2;
inline void CreateMatchRequest::clear_homeuserid() {
  homeuserid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateMatchRequest::homeuserid() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.homeUserId)
  return _internal_homeuserid();
}
inline void CreateMatchRequest::set_homeuserid(const std::string& value) {
  _internal_set_homeuserid(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.homeUserId)
}
inline std::string* CreateMatchRequest::mutable_homeuserid() {
  // @@protoc_insertion_point(field_mutable:MATCH.CreateMatchRequest.homeUserId)
  return _internal_mutable_homeuserid();
}
inline const std::string& CreateMatchRequest::_internal_homeuserid() const {
  return homeuserid_.Get();
}
inline void CreateMatchRequest::_internal_set_homeuserid(const std::string& value) {
  
  homeuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateMatchRequest::set_homeuserid(std::string&& value) {
  
  homeuserid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.CreateMatchRequest.homeUserId)
}
inline void CreateMatchRequest::set_homeuserid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  homeuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.CreateMatchRequest.homeUserId)
}
inline void CreateMatchRequest::set_homeuserid(const char* value,
    size_t size) {
  
  homeuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.CreateMatchRequest.homeUserId)
}
inline std::string* CreateMatchRequest::_internal_mutable_homeuserid() {
  
  return homeuserid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateMatchRequest::release_homeuserid() {
  // @@protoc_insertion_point(field_release:MATCH.CreateMatchRequest.homeUserId)
  return homeuserid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateMatchRequest::set_allocated_homeuserid(std::string* homeuserid) {
  if (homeuserid != nullptr) {
    
  } else {
    
  }
  homeuserid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homeuserid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.CreateMatchRequest.homeUserId)
}
inline std::string* CreateMatchRequest::unsafe_arena_release_homeuserid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.CreateMatchRequest.homeUserId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return homeuserid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateMatchRequest::unsafe_arena_set_allocated_homeuserid(
    std::string* homeuserid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (homeuserid != nullptr) {
    
  } else {
    
  }
  homeuserid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      homeuserid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.CreateMatchRequest.homeUserId)
}

// string awayUserId = 3;
inline void CreateMatchRequest::clear_awayuserid() {
  awayuserid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateMatchRequest::awayuserid() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.awayUserId)
  return _internal_awayuserid();
}
inline void CreateMatchRequest::set_awayuserid(const std::string& value) {
  _internal_set_awayuserid(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.awayUserId)
}
inline std::string* CreateMatchRequest::mutable_awayuserid() {
  // @@protoc_insertion_point(field_mutable:MATCH.CreateMatchRequest.awayUserId)
  return _internal_mutable_awayuserid();
}
inline const std::string& CreateMatchRequest::_internal_awayuserid() const {
  return awayuserid_.Get();
}
inline void CreateMatchRequest::_internal_set_awayuserid(const std::string& value) {
  
  awayuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateMatchRequest::set_awayuserid(std::string&& value) {
  
  awayuserid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.CreateMatchRequest.awayUserId)
}
inline void CreateMatchRequest::set_awayuserid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  awayuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.CreateMatchRequest.awayUserId)
}
inline void CreateMatchRequest::set_awayuserid(const char* value,
    size_t size) {
  
  awayuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.CreateMatchRequest.awayUserId)
}
inline std::string* CreateMatchRequest::_internal_mutable_awayuserid() {
  
  return awayuserid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateMatchRequest::release_awayuserid() {
  // @@protoc_insertion_point(field_release:MATCH.CreateMatchRequest.awayUserId)
  return awayuserid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateMatchRequest::set_allocated_awayuserid(std::string* awayuserid) {
  if (awayuserid != nullptr) {
    
  } else {
    
  }
  awayuserid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), awayuserid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.CreateMatchRequest.awayUserId)
}
inline std::string* CreateMatchRequest::unsafe_arena_release_awayuserid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.CreateMatchRequest.awayUserId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return awayuserid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateMatchRequest::unsafe_arena_set_allocated_awayuserid(
    std::string* awayuserid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (awayuserid != nullptr) {
    
  } else {
    
  }
  awayuserid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      awayuserid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.CreateMatchRequest.awayUserId)
}

// repeated .PAYLOAD.Player home_lineup = 4;
inline int CreateMatchRequest::_internal_home_lineup_size() const {
  return home_lineup_.size();
}
inline int CreateMatchRequest::home_lineup_size() const {
  return _internal_home_lineup_size();
}
inline ::PAYLOAD::Player* CreateMatchRequest::mutable_home_lineup(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.CreateMatchRequest.home_lineup)
  return home_lineup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
CreateMatchRequest::mutable_home_lineup() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.CreateMatchRequest.home_lineup)
  return &home_lineup_;
}
inline const ::PAYLOAD::Player& CreateMatchRequest::_internal_home_lineup(int index) const {
  return home_lineup_.Get(index);
}
inline const ::PAYLOAD::Player& CreateMatchRequest::home_lineup(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.home_lineup)
  return _internal_home_lineup(index);
}
inline ::PAYLOAD::Player* CreateMatchRequest::_internal_add_home_lineup() {
  return home_lineup_.Add();
}
inline ::PAYLOAD::Player* CreateMatchRequest::add_home_lineup() {
  // @@protoc_insertion_point(field_add:MATCH.CreateMatchRequest.home_lineup)
  return _internal_add_home_lineup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
CreateMatchRequest::home_lineup() const {
  // @@protoc_insertion_point(field_list:MATCH.CreateMatchRequest.home_lineup)
  return home_lineup_;
}

// repeated .PAYLOAD.Player away_lineup = 5;
inline int CreateMatchRequest::_internal_away_lineup_size() const {
  return away_lineup_.size();
}
inline int CreateMatchRequest::away_lineup_size() const {
  return _internal_away_lineup_size();
}
inline ::PAYLOAD::Player* CreateMatchRequest::mutable_away_lineup(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.CreateMatchRequest.away_lineup)
  return away_lineup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >*
CreateMatchRequest::mutable_away_lineup() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.CreateMatchRequest.away_lineup)
  return &away_lineup_;
}
inline const ::PAYLOAD::Player& CreateMatchRequest::_internal_away_lineup(int index) const {
  return away_lineup_.Get(index);
}
inline const ::PAYLOAD::Player& CreateMatchRequest::away_lineup(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.away_lineup)
  return _internal_away_lineup(index);
}
inline ::PAYLOAD::Player* CreateMatchRequest::_internal_add_away_lineup() {
  return away_lineup_.Add();
}
inline ::PAYLOAD::Player* CreateMatchRequest::add_away_lineup() {
  // @@protoc_insertion_point(field_add:MATCH.CreateMatchRequest.away_lineup)
  return _internal_add_away_lineup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PAYLOAD::Player >&
CreateMatchRequest::away_lineup() const {
  // @@protoc_insertion_point(field_list:MATCH.CreateMatchRequest.away_lineup)
  return away_lineup_;
}

// string firstBattingUser = 6;
inline void CreateMatchRequest::clear_firstbattinguser() {
  firstbattinguser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateMatchRequest::firstbattinguser() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.firstBattingUser)
  return _internal_firstbattinguser();
}
inline void CreateMatchRequest::set_firstbattinguser(const std::string& value) {
  _internal_set_firstbattinguser(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.firstBattingUser)
}
inline std::string* CreateMatchRequest::mutable_firstbattinguser() {
  // @@protoc_insertion_point(field_mutable:MATCH.CreateMatchRequest.firstBattingUser)
  return _internal_mutable_firstbattinguser();
}
inline const std::string& CreateMatchRequest::_internal_firstbattinguser() const {
  return firstbattinguser_.Get();
}
inline void CreateMatchRequest::_internal_set_firstbattinguser(const std::string& value) {
  
  firstbattinguser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateMatchRequest::set_firstbattinguser(std::string&& value) {
  
  firstbattinguser_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.CreateMatchRequest.firstBattingUser)
}
inline void CreateMatchRequest::set_firstbattinguser(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firstbattinguser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.CreateMatchRequest.firstBattingUser)
}
inline void CreateMatchRequest::set_firstbattinguser(const char* value,
    size_t size) {
  
  firstbattinguser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.CreateMatchRequest.firstBattingUser)
}
inline std::string* CreateMatchRequest::_internal_mutable_firstbattinguser() {
  
  return firstbattinguser_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateMatchRequest::release_firstbattinguser() {
  // @@protoc_insertion_point(field_release:MATCH.CreateMatchRequest.firstBattingUser)
  return firstbattinguser_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateMatchRequest::set_allocated_firstbattinguser(std::string* firstbattinguser) {
  if (firstbattinguser != nullptr) {
    
  } else {
    
  }
  firstbattinguser_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstbattinguser,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.CreateMatchRequest.firstBattingUser)
}
inline std::string* CreateMatchRequest::unsafe_arena_release_firstbattinguser() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.CreateMatchRequest.firstBattingUser)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return firstbattinguser_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateMatchRequest::unsafe_arena_set_allocated_firstbattinguser(
    std::string* firstbattinguser) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (firstbattinguser != nullptr) {
    
  } else {
    
  }
  firstbattinguser_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      firstbattinguser, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.CreateMatchRequest.firstBattingUser)
}

// bool isHomeBot = 7;
inline void CreateMatchRequest::clear_ishomebot() {
  ishomebot_ = false;
}
inline bool CreateMatchRequest::_internal_ishomebot() const {
  return ishomebot_;
}
inline bool CreateMatchRequest::ishomebot() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.isHomeBot)
  return _internal_ishomebot();
}
inline void CreateMatchRequest::_internal_set_ishomebot(bool value) {
  
  ishomebot_ = value;
}
inline void CreateMatchRequest::set_ishomebot(bool value) {
  _internal_set_ishomebot(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.isHomeBot)
}

// bool isAwayBot = 8;
inline void CreateMatchRequest::clear_isawaybot() {
  isawaybot_ = false;
}
inline bool CreateMatchRequest::_internal_isawaybot() const {
  return isawaybot_;
}
inline bool CreateMatchRequest::isawaybot() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.isAwayBot)
  return _internal_isawaybot();
}
inline void CreateMatchRequest::_internal_set_isawaybot(bool value) {
  
  isawaybot_ = value;
}
inline void CreateMatchRequest::set_isawaybot(bool value) {
  _internal_set_isawaybot(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.isAwayBot)
}

// int32 batsmanManaRequired = 9;
inline void CreateMatchRequest::clear_batsmanmanarequired() {
  batsmanmanarequired_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMatchRequest::_internal_batsmanmanarequired() const {
  return batsmanmanarequired_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMatchRequest::batsmanmanarequired() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.batsmanManaRequired)
  return _internal_batsmanmanarequired();
}
inline void CreateMatchRequest::_internal_set_batsmanmanarequired(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  batsmanmanarequired_ = value;
}
inline void CreateMatchRequest::set_batsmanmanarequired(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_batsmanmanarequired(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.batsmanManaRequired)
}

// int32 bowlerManaRequired = 10;
inline void CreateMatchRequest::clear_bowlermanarequired() {
  bowlermanarequired_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMatchRequest::_internal_bowlermanarequired() const {
  return bowlermanarequired_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMatchRequest::bowlermanarequired() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.bowlerManaRequired)
  return _internal_bowlermanarequired();
}
inline void CreateMatchRequest::_internal_set_bowlermanarequired(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bowlermanarequired_ = value;
}
inline void CreateMatchRequest::set_bowlermanarequired(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bowlermanarequired(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.bowlerManaRequired)
}

// bool isRPSEnabled = 11;
inline void CreateMatchRequest::clear_isrpsenabled() {
  isrpsenabled_ = false;
}
inline bool CreateMatchRequest::_internal_isrpsenabled() const {
  return isrpsenabled_;
}
inline bool CreateMatchRequest::isrpsenabled() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.isRPSEnabled)
  return _internal_isrpsenabled();
}
inline void CreateMatchRequest::_internal_set_isrpsenabled(bool value) {
  
  isrpsenabled_ = value;
}
inline void CreateMatchRequest::set_isrpsenabled(bool value) {
  _internal_set_isrpsenabled(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.isRPSEnabled)
}

// bool isPassivesEnabled = 12;
inline void CreateMatchRequest::clear_ispassivesenabled() {
  ispassivesenabled_ = false;
}
inline bool CreateMatchRequest::_internal_ispassivesenabled() const {
  return ispassivesenabled_;
}
inline bool CreateMatchRequest::ispassivesenabled() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.isPassivesEnabled)
  return _internal_ispassivesenabled();
}
inline void CreateMatchRequest::_internal_set_ispassivesenabled(bool value) {
  
  ispassivesenabled_ = value;
}
inline void CreateMatchRequest::set_ispassivesenabled(bool value) {
  _internal_set_ispassivesenabled(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.isPassivesEnabled)
}

// int32 maxOvers = 13;
inline void CreateMatchRequest::clear_maxovers() {
  maxovers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMatchRequest::_internal_maxovers() const {
  return maxovers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateMatchRequest::maxovers() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.maxOvers)
  return _internal_maxovers();
}
inline void CreateMatchRequest::_internal_set_maxovers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxovers_ = value;
}
inline void CreateMatchRequest::set_maxovers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxovers(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.maxOvers)
}

// bool isFtueMatch = 14;
inline void CreateMatchRequest::clear_isftuematch() {
  isftuematch_ = false;
}
inline bool CreateMatchRequest::_internal_isftuematch() const {
  return isftuematch_;
}
inline bool CreateMatchRequest::isftuematch() const {
  // @@protoc_insertion_point(field_get:MATCH.CreateMatchRequest.isFtueMatch)
  return _internal_isftuematch();
}
inline void CreateMatchRequest::_internal_set_isftuematch(bool value) {
  
  isftuematch_ = value;
}
inline void CreateMatchRequest::set_isftuematch(bool value) {
  _internal_set_isftuematch(value);
  // @@protoc_insertion_point(field_set:MATCH.CreateMatchRequest.isFtueMatch)
}

// -------------------------------------------------------------------

// EndMatchRequest

// string matchId = 1;
inline void EndMatchRequest::clear_matchid() {
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndMatchRequest::matchid() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchRequest.matchId)
  return _internal_matchid();
}
inline void EndMatchRequest::set_matchid(const std::string& value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:MATCH.EndMatchRequest.matchId)
}
inline std::string* EndMatchRequest::mutable_matchid() {
  // @@protoc_insertion_point(field_mutable:MATCH.EndMatchRequest.matchId)
  return _internal_mutable_matchid();
}
inline const std::string& EndMatchRequest::_internal_matchid() const {
  return matchid_.Get();
}
inline void EndMatchRequest::_internal_set_matchid(const std::string& value) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndMatchRequest::set_matchid(std::string&& value) {
  
  matchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.EndMatchRequest.matchId)
}
inline void EndMatchRequest::set_matchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.EndMatchRequest.matchId)
}
inline void EndMatchRequest::set_matchid(const char* value,
    size_t size) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.EndMatchRequest.matchId)
}
inline std::string* EndMatchRequest::_internal_mutable_matchid() {
  
  return matchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndMatchRequest::release_matchid() {
  // @@protoc_insertion_point(field_release:MATCH.EndMatchRequest.matchId)
  return matchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndMatchRequest::set_allocated_matchid(std::string* matchid) {
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.EndMatchRequest.matchId)
}
inline std::string* EndMatchRequest::unsafe_arena_release_matchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.EndMatchRequest.matchId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return matchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndMatchRequest::unsafe_arena_set_allocated_matchid(
    std::string* matchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      matchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.EndMatchRequest.matchId)
}

// .MATCH.EndMatchUserData team1_data = 2;
inline bool EndMatchRequest::_internal_has_team1_data() const {
  return this != internal_default_instance() && team1_data_ != nullptr;
}
inline bool EndMatchRequest::has_team1_data() const {
  return _internal_has_team1_data();
}
inline void EndMatchRequest::clear_team1_data() {
  if (GetArena() == nullptr && team1_data_ != nullptr) {
    delete team1_data_;
  }
  team1_data_ = nullptr;
}
inline const ::MATCH::EndMatchUserData& EndMatchRequest::_internal_team1_data() const {
  const ::MATCH::EndMatchUserData* p = team1_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::EndMatchUserData*>(
      &::MATCH::_EndMatchUserData_default_instance_);
}
inline const ::MATCH::EndMatchUserData& EndMatchRequest::team1_data() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchRequest.team1_data)
  return _internal_team1_data();
}
inline void EndMatchRequest::unsafe_arena_set_allocated_team1_data(
    ::MATCH::EndMatchUserData* team1_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team1_data_);
  }
  team1_data_ = team1_data;
  if (team1_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.EndMatchRequest.team1_data)
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::release_team1_data() {
  auto temp = unsafe_arena_release_team1_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::unsafe_arena_release_team1_data() {
  // @@protoc_insertion_point(field_release:MATCH.EndMatchRequest.team1_data)
  
  ::MATCH::EndMatchUserData* temp = team1_data_;
  team1_data_ = nullptr;
  return temp;
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::_internal_mutable_team1_data() {
  
  if (team1_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::EndMatchUserData>(GetArena());
    team1_data_ = p;
  }
  return team1_data_;
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::mutable_team1_data() {
  // @@protoc_insertion_point(field_mutable:MATCH.EndMatchRequest.team1_data)
  return _internal_mutable_team1_data();
}
inline void EndMatchRequest::set_allocated_team1_data(::MATCH::EndMatchUserData* team1_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete team1_data_;
  }
  if (team1_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(team1_data);
    if (message_arena != submessage_arena) {
      team1_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team1_data, submessage_arena);
    }
    
  } else {
    
  }
  team1_data_ = team1_data;
  // @@protoc_insertion_point(field_set_allocated:MATCH.EndMatchRequest.team1_data)
}

// .MATCH.EndMatchUserData team2_data = 3;
inline bool EndMatchRequest::_internal_has_team2_data() const {
  return this != internal_default_instance() && team2_data_ != nullptr;
}
inline bool EndMatchRequest::has_team2_data() const {
  return _internal_has_team2_data();
}
inline void EndMatchRequest::clear_team2_data() {
  if (GetArena() == nullptr && team2_data_ != nullptr) {
    delete team2_data_;
  }
  team2_data_ = nullptr;
}
inline const ::MATCH::EndMatchUserData& EndMatchRequest::_internal_team2_data() const {
  const ::MATCH::EndMatchUserData* p = team2_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::EndMatchUserData*>(
      &::MATCH::_EndMatchUserData_default_instance_);
}
inline const ::MATCH::EndMatchUserData& EndMatchRequest::team2_data() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchRequest.team2_data)
  return _internal_team2_data();
}
inline void EndMatchRequest::unsafe_arena_set_allocated_team2_data(
    ::MATCH::EndMatchUserData* team2_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team2_data_);
  }
  team2_data_ = team2_data;
  if (team2_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.EndMatchRequest.team2_data)
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::release_team2_data() {
  auto temp = unsafe_arena_release_team2_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::unsafe_arena_release_team2_data() {
  // @@protoc_insertion_point(field_release:MATCH.EndMatchRequest.team2_data)
  
  ::MATCH::EndMatchUserData* temp = team2_data_;
  team2_data_ = nullptr;
  return temp;
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::_internal_mutable_team2_data() {
  
  if (team2_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::EndMatchUserData>(GetArena());
    team2_data_ = p;
  }
  return team2_data_;
}
inline ::MATCH::EndMatchUserData* EndMatchRequest::mutable_team2_data() {
  // @@protoc_insertion_point(field_mutable:MATCH.EndMatchRequest.team2_data)
  return _internal_mutable_team2_data();
}
inline void EndMatchRequest::set_allocated_team2_data(::MATCH::EndMatchUserData* team2_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete team2_data_;
  }
  if (team2_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(team2_data);
    if (message_arena != submessage_arena) {
      team2_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team2_data, submessage_arena);
    }
    
  } else {
    
  }
  team2_data_ = team2_data;
  // @@protoc_insertion_point(field_set_allocated:MATCH.EndMatchRequest.team2_data)
}

// string winnerId = 4;
inline void EndMatchRequest::clear_winnerid() {
  winnerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndMatchRequest::winnerid() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchRequest.winnerId)
  return _internal_winnerid();
}
inline void EndMatchRequest::set_winnerid(const std::string& value) {
  _internal_set_winnerid(value);
  // @@protoc_insertion_point(field_set:MATCH.EndMatchRequest.winnerId)
}
inline std::string* EndMatchRequest::mutable_winnerid() {
  // @@protoc_insertion_point(field_mutable:MATCH.EndMatchRequest.winnerId)
  return _internal_mutable_winnerid();
}
inline const std::string& EndMatchRequest::_internal_winnerid() const {
  return winnerid_.Get();
}
inline void EndMatchRequest::_internal_set_winnerid(const std::string& value) {
  
  winnerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndMatchRequest::set_winnerid(std::string&& value) {
  
  winnerid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.EndMatchRequest.winnerId)
}
inline void EndMatchRequest::set_winnerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  winnerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.EndMatchRequest.winnerId)
}
inline void EndMatchRequest::set_winnerid(const char* value,
    size_t size) {
  
  winnerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.EndMatchRequest.winnerId)
}
inline std::string* EndMatchRequest::_internal_mutable_winnerid() {
  
  return winnerid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndMatchRequest::release_winnerid() {
  // @@protoc_insertion_point(field_release:MATCH.EndMatchRequest.winnerId)
  return winnerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndMatchRequest::set_allocated_winnerid(std::string* winnerid) {
  if (winnerid != nullptr) {
    
  } else {
    
  }
  winnerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), winnerid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.EndMatchRequest.winnerId)
}
inline std::string* EndMatchRequest::unsafe_arena_release_winnerid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.EndMatchRequest.winnerId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return winnerid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndMatchRequest::unsafe_arena_set_allocated_winnerid(
    std::string* winnerid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (winnerid != nullptr) {
    
  } else {
    
  }
  winnerid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      winnerid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.EndMatchRequest.winnerId)
}

// -------------------------------------------------------------------

// EndMatchUserData

// string id = 1;
inline void EndMatchUserData::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EndMatchUserData::id() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchUserData.id)
  return _internal_id();
}
inline void EndMatchUserData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MATCH.EndMatchUserData.id)
}
inline std::string* EndMatchUserData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MATCH.EndMatchUserData.id)
  return _internal_mutable_id();
}
inline const std::string& EndMatchUserData::_internal_id() const {
  return id_.Get();
}
inline void EndMatchUserData::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EndMatchUserData::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.EndMatchUserData.id)
}
inline void EndMatchUserData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.EndMatchUserData.id)
}
inline void EndMatchUserData::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.EndMatchUserData.id)
}
inline std::string* EndMatchUserData::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EndMatchUserData::release_id() {
  // @@protoc_insertion_point(field_release:MATCH.EndMatchUserData.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EndMatchUserData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.EndMatchUserData.id)
}
inline std::string* EndMatchUserData::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.EndMatchUserData.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EndMatchUserData::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.EndMatchUserData.id)
}

// int32 total = 2;
inline void EndMatchUserData::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndMatchUserData::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndMatchUserData::total() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchUserData.total)
  return _internal_total();
}
inline void EndMatchUserData::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void EndMatchUserData::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:MATCH.EndMatchUserData.total)
}

// int32 wickets = 3;
inline void EndMatchUserData::clear_wickets() {
  wickets_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndMatchUserData::_internal_wickets() const {
  return wickets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndMatchUserData::wickets() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchUserData.wickets)
  return _internal_wickets();
}
inline void EndMatchUserData::_internal_set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wickets_ = value;
}
inline void EndMatchUserData::set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wickets(value);
  // @@protoc_insertion_point(field_set:MATCH.EndMatchUserData.wickets)
}

// int32 balls_faced = 4;
inline void EndMatchUserData::clear_balls_faced() {
  balls_faced_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndMatchUserData::_internal_balls_faced() const {
  return balls_faced_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndMatchUserData::balls_faced() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchUserData.balls_faced)
  return _internal_balls_faced();
}
inline void EndMatchUserData::_internal_set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  balls_faced_ = value;
}
inline void EndMatchUserData::set_balls_faced(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_balls_faced(value);
  // @@protoc_insertion_point(field_set:MATCH.EndMatchUserData.balls_faced)
}

// bool quit = 5;
inline void EndMatchUserData::clear_quit() {
  quit_ = false;
}
inline bool EndMatchUserData::_internal_quit() const {
  return quit_;
}
inline bool EndMatchUserData::quit() const {
  // @@protoc_insertion_point(field_get:MATCH.EndMatchUserData.quit)
  return _internal_quit();
}
inline void EndMatchUserData::_internal_set_quit(bool value) {
  
  quit_ = value;
}
inline void EndMatchUserData::set_quit(bool value) {
  _internal_set_quit(value);
  // @@protoc_insertion_point(field_set:MATCH.EndMatchUserData.quit)
}

// -------------------------------------------------------------------

// MatchList

// repeated string MatchId = 1;
inline int MatchList::_internal_matchid_size() const {
  return matchid_.size();
}
inline int MatchList::matchid_size() const {
  return _internal_matchid_size();
}
inline void MatchList::clear_matchid() {
  matchid_.Clear();
}
inline std::string* MatchList::add_matchid() {
  // @@protoc_insertion_point(field_add_mutable:MATCH.MatchList.MatchId)
  return _internal_add_matchid();
}
inline const std::string& MatchList::_internal_matchid(int index) const {
  return matchid_.Get(index);
}
inline const std::string& MatchList::matchid(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.MatchList.MatchId)
  return _internal_matchid(index);
}
inline std::string* MatchList::mutable_matchid(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchList.MatchId)
  return matchid_.Mutable(index);
}
inline void MatchList::set_matchid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MATCH.MatchList.MatchId)
  matchid_.Mutable(index)->assign(value);
}
inline void MatchList::set_matchid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MATCH.MatchList.MatchId)
  matchid_.Mutable(index)->assign(std::move(value));
}
inline void MatchList::set_matchid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matchid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MATCH.MatchList.MatchId)
}
inline void MatchList::set_matchid(int index, const char* value, size_t size) {
  matchid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MATCH.MatchList.MatchId)
}
inline std::string* MatchList::_internal_add_matchid() {
  return matchid_.Add();
}
inline void MatchList::add_matchid(const std::string& value) {
  matchid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MATCH.MatchList.MatchId)
}
inline void MatchList::add_matchid(std::string&& value) {
  matchid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MATCH.MatchList.MatchId)
}
inline void MatchList::add_matchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matchid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MATCH.MatchList.MatchId)
}
inline void MatchList::add_matchid(const char* value, size_t size) {
  matchid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MATCH.MatchList.MatchId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MatchList::matchid() const {
  // @@protoc_insertion_point(field_list:MATCH.MatchList.MatchId)
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MatchList::mutable_matchid() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.MatchList.MatchId)
  return &matchid_;
}

// repeated string Home = 2;
inline int MatchList::_internal_home_size() const {
  return home_.size();
}
inline int MatchList::home_size() const {
  return _internal_home_size();
}
inline void MatchList::clear_home() {
  home_.Clear();
}
inline std::string* MatchList::add_home() {
  // @@protoc_insertion_point(field_add_mutable:MATCH.MatchList.Home)
  return _internal_add_home();
}
inline const std::string& MatchList::_internal_home(int index) const {
  return home_.Get(index);
}
inline const std::string& MatchList::home(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.MatchList.Home)
  return _internal_home(index);
}
inline std::string* MatchList::mutable_home(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchList.Home)
  return home_.Mutable(index);
}
inline void MatchList::set_home(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MATCH.MatchList.Home)
  home_.Mutable(index)->assign(value);
}
inline void MatchList::set_home(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MATCH.MatchList.Home)
  home_.Mutable(index)->assign(std::move(value));
}
inline void MatchList::set_home(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  home_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MATCH.MatchList.Home)
}
inline void MatchList::set_home(int index, const char* value, size_t size) {
  home_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MATCH.MatchList.Home)
}
inline std::string* MatchList::_internal_add_home() {
  return home_.Add();
}
inline void MatchList::add_home(const std::string& value) {
  home_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MATCH.MatchList.Home)
}
inline void MatchList::add_home(std::string&& value) {
  home_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MATCH.MatchList.Home)
}
inline void MatchList::add_home(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  home_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MATCH.MatchList.Home)
}
inline void MatchList::add_home(const char* value, size_t size) {
  home_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MATCH.MatchList.Home)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MatchList::home() const {
  // @@protoc_insertion_point(field_list:MATCH.MatchList.Home)
  return home_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MatchList::mutable_home() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.MatchList.Home)
  return &home_;
}

// repeated string Away = 3;
inline int MatchList::_internal_away_size() const {
  return away_.size();
}
inline int MatchList::away_size() const {
  return _internal_away_size();
}
inline void MatchList::clear_away() {
  away_.Clear();
}
inline std::string* MatchList::add_away() {
  // @@protoc_insertion_point(field_add_mutable:MATCH.MatchList.Away)
  return _internal_add_away();
}
inline const std::string& MatchList::_internal_away(int index) const {
  return away_.Get(index);
}
inline const std::string& MatchList::away(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.MatchList.Away)
  return _internal_away(index);
}
inline std::string* MatchList::mutable_away(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchList.Away)
  return away_.Mutable(index);
}
inline void MatchList::set_away(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MATCH.MatchList.Away)
  away_.Mutable(index)->assign(value);
}
inline void MatchList::set_away(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MATCH.MatchList.Away)
  away_.Mutable(index)->assign(std::move(value));
}
inline void MatchList::set_away(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  away_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MATCH.MatchList.Away)
}
inline void MatchList::set_away(int index, const char* value, size_t size) {
  away_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MATCH.MatchList.Away)
}
inline std::string* MatchList::_internal_add_away() {
  return away_.Add();
}
inline void MatchList::add_away(const std::string& value) {
  away_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MATCH.MatchList.Away)
}
inline void MatchList::add_away(std::string&& value) {
  away_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MATCH.MatchList.Away)
}
inline void MatchList::add_away(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  away_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MATCH.MatchList.Away)
}
inline void MatchList::add_away(const char* value, size_t size) {
  away_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MATCH.MatchList.Away)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MatchList::away() const {
  // @@protoc_insertion_point(field_list:MATCH.MatchList.Away)
  return away_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MatchList::mutable_away() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.MatchList.Away)
  return &away_;
}

// -------------------------------------------------------------------

// SAInfo

// .MATCH.SA type = 1;
inline void SAInfo::clear_type() {
  type_ = 0;
}
inline ::MATCH::SA SAInfo::_internal_type() const {
  return static_cast< ::MATCH::SA >(type_);
}
inline ::MATCH::SA SAInfo::type() const {
  // @@protoc_insertion_point(field_get:MATCH.SAInfo.type)
  return _internal_type();
}
inline void SAInfo::_internal_set_type(::MATCH::SA value) {
  
  type_ = value;
}
inline void SAInfo::set_type(::MATCH::SA value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MATCH.SAInfo.type)
}

// int32 duration_left = 2;
inline void SAInfo::clear_duration_left() {
  duration_left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAInfo::_internal_duration_left() const {
  return duration_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAInfo::duration_left() const {
  // @@protoc_insertion_point(field_get:MATCH.SAInfo.duration_left)
  return _internal_duration_left();
}
inline void SAInfo::_internal_set_duration_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  duration_left_ = value;
}
inline void SAInfo::set_duration_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration_left(value);
  // @@protoc_insertion_point(field_set:MATCH.SAInfo.duration_left)
}

// bool applied_for_current_ball = 3;
inline void SAInfo::clear_applied_for_current_ball() {
  applied_for_current_ball_ = false;
}
inline bool SAInfo::_internal_applied_for_current_ball() const {
  return applied_for_current_ball_;
}
inline bool SAInfo::applied_for_current_ball() const {
  // @@protoc_insertion_point(field_get:MATCH.SAInfo.applied_for_current_ball)
  return _internal_applied_for_current_ball();
}
inline void SAInfo::_internal_set_applied_for_current_ball(bool value) {
  
  applied_for_current_ball_ = value;
}
inline void SAInfo::set_applied_for_current_ball(bool value) {
  _internal_set_applied_for_current_ball(value);
  // @@protoc_insertion_point(field_set:MATCH.SAInfo.applied_for_current_ball)
}

// int32 max_duration = 4;
inline void SAInfo::clear_max_duration() {
  max_duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAInfo::_internal_max_duration() const {
  return max_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAInfo::max_duration() const {
  // @@protoc_insertion_point(field_get:MATCH.SAInfo.max_duration)
  return _internal_max_duration();
}
inline void SAInfo::_internal_set_max_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_duration_ = value;
}
inline void SAInfo::set_max_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_duration(value);
  // @@protoc_insertion_point(field_set:MATCH.SAInfo.max_duration)
}

// -------------------------------------------------------------------

// M_UserInfo

// .MATCH.M_PlayStates playState = 1;
inline void M_UserInfo::clear_playstate() {
  playstate_ = 0;
}
inline ::MATCH::M_PlayStates M_UserInfo::_internal_playstate() const {
  return static_cast< ::MATCH::M_PlayStates >(playstate_);
}
inline ::MATCH::M_PlayStates M_UserInfo::playstate() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.playState)
  return _internal_playstate();
}
inline void M_UserInfo::_internal_set_playstate(::MATCH::M_PlayStates value) {
  
  playstate_ = value;
}
inline void M_UserInfo::set_playstate(::MATCH::M_PlayStates value) {
  _internal_set_playstate(value);
  // @@protoc_insertion_point(field_set:MATCH.M_UserInfo.playState)
}

// .MATCH.ConnectionState connectionState = 2;
inline void M_UserInfo::clear_connectionstate() {
  connectionstate_ = 0;
}
inline ::MATCH::ConnectionState M_UserInfo::_internal_connectionstate() const {
  return static_cast< ::MATCH::ConnectionState >(connectionstate_);
}
inline ::MATCH::ConnectionState M_UserInfo::connectionstate() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.connectionState)
  return _internal_connectionstate();
}
inline void M_UserInfo::_internal_set_connectionstate(::MATCH::ConnectionState value) {
  
  connectionstate_ = value;
}
inline void M_UserInfo::set_connectionstate(::MATCH::ConnectionState value) {
  _internal_set_connectionstate(value);
  // @@protoc_insertion_point(field_set:MATCH.M_UserInfo.connectionState)
}

// string opponentUID = 3;
inline void M_UserInfo::clear_opponentuid() {
  opponentuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& M_UserInfo::opponentuid() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.opponentUID)
  return _internal_opponentuid();
}
inline void M_UserInfo::set_opponentuid(const std::string& value) {
  _internal_set_opponentuid(value);
  // @@protoc_insertion_point(field_set:MATCH.M_UserInfo.opponentUID)
}
inline std::string* M_UserInfo::mutable_opponentuid() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_UserInfo.opponentUID)
  return _internal_mutable_opponentuid();
}
inline const std::string& M_UserInfo::_internal_opponentuid() const {
  return opponentuid_.Get();
}
inline void M_UserInfo::_internal_set_opponentuid(const std::string& value) {
  
  opponentuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void M_UserInfo::set_opponentuid(std::string&& value) {
  
  opponentuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.M_UserInfo.opponentUID)
}
inline void M_UserInfo::set_opponentuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  opponentuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.M_UserInfo.opponentUID)
}
inline void M_UserInfo::set_opponentuid(const char* value,
    size_t size) {
  
  opponentuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.M_UserInfo.opponentUID)
}
inline std::string* M_UserInfo::_internal_mutable_opponentuid() {
  
  return opponentuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* M_UserInfo::release_opponentuid() {
  // @@protoc_insertion_point(field_release:MATCH.M_UserInfo.opponentUID)
  return opponentuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void M_UserInfo::set_allocated_opponentuid(std::string* opponentuid) {
  if (opponentuid != nullptr) {
    
  } else {
    
  }
  opponentuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opponentuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_UserInfo.opponentUID)
}
inline std::string* M_UserInfo::unsafe_arena_release_opponentuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.M_UserInfo.opponentUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return opponentuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void M_UserInfo::unsafe_arena_set_allocated_opponentuid(
    std::string* opponentuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (opponentuid != nullptr) {
    
  } else {
    
  }
  opponentuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      opponentuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_UserInfo.opponentUID)
}

// .MATCH.ACK ack = 4;
inline void M_UserInfo::clear_ack() {
  ack_ = 0;
}
inline ::MATCH::ACK M_UserInfo::_internal_ack() const {
  return static_cast< ::MATCH::ACK >(ack_);
}
inline ::MATCH::ACK M_UserInfo::ack() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.ack)
  return _internal_ack();
}
inline void M_UserInfo::_internal_set_ack(::MATCH::ACK value) {
  
  ack_ = value;
}
inline void M_UserInfo::set_ack(::MATCH::ACK value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:MATCH.M_UserInfo.ack)
}

// bool auto_play = 5;
inline void M_UserInfo::clear_auto_play() {
  auto_play_ = false;
}
inline bool M_UserInfo::_internal_auto_play() const {
  return auto_play_;
}
inline bool M_UserInfo::auto_play() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.auto_play)
  return _internal_auto_play();
}
inline void M_UserInfo::_internal_set_auto_play(bool value) {
  
  auto_play_ = value;
}
inline void M_UserInfo::set_auto_play(bool value) {
  _internal_set_auto_play(value);
  // @@protoc_insertion_point(field_set:MATCH.M_UserInfo.auto_play)
}

// int32 mana_fill = 6;
inline void M_UserInfo::clear_mana_fill() {
  mana_fill_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_UserInfo::_internal_mana_fill() const {
  return mana_fill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_UserInfo::mana_fill() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.mana_fill)
  return _internal_mana_fill();
}
inline void M_UserInfo::_internal_set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mana_fill_ = value;
}
inline void M_UserInfo::set_mana_fill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mana_fill(value);
  // @@protoc_insertion_point(field_set:MATCH.M_UserInfo.mana_fill)
}

// .MATCH.SAInfo sa_info = 7;
inline bool M_UserInfo::_internal_has_sa_info() const {
  return this != internal_default_instance() && sa_info_ != nullptr;
}
inline bool M_UserInfo::has_sa_info() const {
  return _internal_has_sa_info();
}
inline void M_UserInfo::clear_sa_info() {
  if (GetArena() == nullptr && sa_info_ != nullptr) {
    delete sa_info_;
  }
  sa_info_ = nullptr;
}
inline const ::MATCH::SAInfo& M_UserInfo::_internal_sa_info() const {
  const ::MATCH::SAInfo* p = sa_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::SAInfo*>(
      &::MATCH::_SAInfo_default_instance_);
}
inline const ::MATCH::SAInfo& M_UserInfo::sa_info() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.sa_info)
  return _internal_sa_info();
}
inline void M_UserInfo::unsafe_arena_set_allocated_sa_info(
    ::MATCH::SAInfo* sa_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sa_info_);
  }
  sa_info_ = sa_info;
  if (sa_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_UserInfo.sa_info)
}
inline ::MATCH::SAInfo* M_UserInfo::release_sa_info() {
  auto temp = unsafe_arena_release_sa_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::SAInfo* M_UserInfo::unsafe_arena_release_sa_info() {
  // @@protoc_insertion_point(field_release:MATCH.M_UserInfo.sa_info)
  
  ::MATCH::SAInfo* temp = sa_info_;
  sa_info_ = nullptr;
  return temp;
}
inline ::MATCH::SAInfo* M_UserInfo::_internal_mutable_sa_info() {
  
  if (sa_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::SAInfo>(GetArena());
    sa_info_ = p;
  }
  return sa_info_;
}
inline ::MATCH::SAInfo* M_UserInfo::mutable_sa_info() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_UserInfo.sa_info)
  return _internal_mutable_sa_info();
}
inline void M_UserInfo::set_allocated_sa_info(::MATCH::SAInfo* sa_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sa_info_;
  }
  if (sa_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sa_info);
    if (message_arena != submessage_arena) {
      sa_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sa_info, submessage_arena);
    }
    
  } else {
    
  }
  sa_info_ = sa_info;
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_UserInfo.sa_info)
}

// string id = 8;
inline void M_UserInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& M_UserInfo::id() const {
  // @@protoc_insertion_point(field_get:MATCH.M_UserInfo.id)
  return _internal_id();
}
inline void M_UserInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MATCH.M_UserInfo.id)
}
inline std::string* M_UserInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_UserInfo.id)
  return _internal_mutable_id();
}
inline const std::string& M_UserInfo::_internal_id() const {
  return id_.Get();
}
inline void M_UserInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void M_UserInfo::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.M_UserInfo.id)
}
inline void M_UserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.M_UserInfo.id)
}
inline void M_UserInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.M_UserInfo.id)
}
inline std::string* M_UserInfo::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* M_UserInfo::release_id() {
  // @@protoc_insertion_point(field_release:MATCH.M_UserInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void M_UserInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_UserInfo.id)
}
inline std::string* M_UserInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.M_UserInfo.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void M_UserInfo::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_UserInfo.id)
}

// -------------------------------------------------------------------

// M_TShot

// int32 id = 1;
inline void M_TShot::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_TShot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_TShot::id() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.id)
  return _internal_id();
}
inline void M_TShot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void M_TShot::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.id)
}

// string name = 2;
inline void M_TShot::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& M_TShot::name() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.name)
  return _internal_name();
}
inline void M_TShot::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.name)
}
inline std::string* M_TShot::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_TShot.name)
  return _internal_mutable_name();
}
inline const std::string& M_TShot::_internal_name() const {
  return name_.Get();
}
inline void M_TShot::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void M_TShot::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.M_TShot.name)
}
inline void M_TShot::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.M_TShot.name)
}
inline void M_TShot::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.M_TShot.name)
}
inline std::string* M_TShot::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* M_TShot::release_name() {
  // @@protoc_insertion_point(field_release:MATCH.M_TShot.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void M_TShot::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_TShot.name)
}
inline std::string* M_TShot::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.M_TShot.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void M_TShot::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_TShot.name)
}

// int32 run = 3;
inline void M_TShot::clear_run() {
  run_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_TShot::_internal_run() const {
  return run_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_TShot::run() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.run)
  return _internal_run();
}
inline void M_TShot::_internal_set_run(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  run_ = value;
}
inline void M_TShot::set_run(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_run(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.run)
}

// .MATCH.Brackets bracket = 4;
inline void M_TShot::clear_bracket() {
  bracket_ = 0;
}
inline ::MATCH::Brackets M_TShot::_internal_bracket() const {
  return static_cast< ::MATCH::Brackets >(bracket_);
}
inline ::MATCH::Brackets M_TShot::bracket() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.bracket)
  return _internal_bracket();
}
inline void M_TShot::_internal_set_bracket(::MATCH::Brackets value) {
  
  bracket_ = value;
}
inline void M_TShot::set_bracket(::MATCH::Brackets value) {
  _internal_set_bracket(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.bracket)
}

// float probability = 5;
inline void M_TShot::clear_probability() {
  probability_ = 0;
}
inline float M_TShot::_internal_probability() const {
  return probability_;
}
inline float M_TShot::probability() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.probability)
  return _internal_probability();
}
inline void M_TShot::_internal_set_probability(float value) {
  
  probability_ = value;
}
inline void M_TShot::set_probability(float value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.probability)
}

// float wicket_chance = 6;
inline void M_TShot::clear_wicket_chance() {
  wicket_chance_ = 0;
}
inline float M_TShot::_internal_wicket_chance() const {
  return wicket_chance_;
}
inline float M_TShot::wicket_chance() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.wicket_chance)
  return _internal_wicket_chance();
}
inline void M_TShot::_internal_set_wicket_chance(float value) {
  
  wicket_chance_ = value;
}
inline void M_TShot::set_wicket_chance(float value) {
  _internal_set_wicket_chance(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.wicket_chance)
}

// double ball_value = 7;
inline void M_TShot::clear_ball_value() {
  ball_value_ = 0;
}
inline double M_TShot::_internal_ball_value() const {
  return ball_value_;
}
inline double M_TShot::ball_value() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.ball_value)
  return _internal_ball_value();
}
inline void M_TShot::_internal_set_ball_value(double value) {
  
  ball_value_ = value;
}
inline void M_TShot::set_ball_value(double value) {
  _internal_set_ball_value(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.ball_value)
}

// double shot_value = 8;
inline void M_TShot::clear_shot_value() {
  shot_value_ = 0;
}
inline double M_TShot::_internal_shot_value() const {
  return shot_value_;
}
inline double M_TShot::shot_value() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.shot_value)
  return _internal_shot_value();
}
inline void M_TShot::_internal_set_shot_value(double value) {
  
  shot_value_ = value;
}
inline void M_TShot::set_shot_value(double value) {
  _internal_set_shot_value(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.shot_value)
}

// bool locked = 9;
inline void M_TShot::clear_locked() {
  locked_ = false;
}
inline bool M_TShot::_internal_locked() const {
  return locked_;
}
inline bool M_TShot::locked() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.locked)
  return _internal_locked();
}
inline void M_TShot::_internal_set_locked(bool value) {
  
  locked_ = value;
}
inline void M_TShot::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.locked)
}

// bool shot_hidden = 10;
inline void M_TShot::clear_shot_hidden() {
  shot_hidden_ = false;
}
inline bool M_TShot::_internal_shot_hidden() const {
  return shot_hidden_;
}
inline bool M_TShot::shot_hidden() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.shot_hidden)
  return _internal_shot_hidden();
}
inline void M_TShot::_internal_set_shot_hidden(bool value) {
  
  shot_hidden_ = value;
}
inline void M_TShot::set_shot_hidden(bool value) {
  _internal_set_shot_hidden(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.shot_hidden)
}

// bool probability_hidden = 11;
inline void M_TShot::clear_probability_hidden() {
  probability_hidden_ = false;
}
inline bool M_TShot::_internal_probability_hidden() const {
  return probability_hidden_;
}
inline bool M_TShot::probability_hidden() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TShot.probability_hidden)
  return _internal_probability_hidden();
}
inline void M_TShot::_internal_set_probability_hidden(bool value) {
  
  probability_hidden_ = value;
}
inline void M_TShot::set_probability_hidden(bool value) {
  _internal_set_probability_hidden(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TShot.probability_hidden)
}

// -------------------------------------------------------------------

// BracketData

// .MATCH.Brackets bracket_id = 1;
inline void BracketData::clear_bracket_id() {
  bracket_id_ = 0;
}
inline ::MATCH::Brackets BracketData::_internal_bracket_id() const {
  return static_cast< ::MATCH::Brackets >(bracket_id_);
}
inline ::MATCH::Brackets BracketData::bracket_id() const {
  // @@protoc_insertion_point(field_get:MATCH.BracketData.bracket_id)
  return _internal_bracket_id();
}
inline void BracketData::_internal_set_bracket_id(::MATCH::Brackets value) {
  
  bracket_id_ = value;
}
inline void BracketData::set_bracket_id(::MATCH::Brackets value) {
  _internal_set_bracket_id(value);
  // @@protoc_insertion_point(field_set:MATCH.BracketData.bracket_id)
}

// int32 shot_id = 2;
inline void BracketData::clear_shot_id() {
  shot_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BracketData::_internal_shot_id() const {
  return shot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BracketData::shot_id() const {
  // @@protoc_insertion_point(field_get:MATCH.BracketData.shot_id)
  return _internal_shot_id();
}
inline void BracketData::_internal_set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shot_id_ = value;
}
inline void BracketData::set_shot_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shot_id(value);
  // @@protoc_insertion_point(field_set:MATCH.BracketData.shot_id)
}

// -------------------------------------------------------------------

// M_TBall

// int32 id = 1;
inline void M_TBall::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_TBall::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_TBall::id() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TBall.id)
  return _internal_id();
}
inline void M_TBall::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void M_TBall::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TBall.id)
}

// string name = 2;
inline void M_TBall::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& M_TBall::name() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TBall.name)
  return _internal_name();
}
inline void M_TBall::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TBall.name)
}
inline std::string* M_TBall::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_TBall.name)
  return _internal_mutable_name();
}
inline const std::string& M_TBall::_internal_name() const {
  return name_.Get();
}
inline void M_TBall::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void M_TBall::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.M_TBall.name)
}
inline void M_TBall::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.M_TBall.name)
}
inline void M_TBall::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.M_TBall.name)
}
inline std::string* M_TBall::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* M_TBall::release_name() {
  // @@protoc_insertion_point(field_release:MATCH.M_TBall.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void M_TBall::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_TBall.name)
}
inline std::string* M_TBall::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.M_TBall.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void M_TBall::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_TBall.name)
}

// double value = 3;
inline void M_TBall::clear_value() {
  value_ = 0;
}
inline double M_TBall::_internal_value() const {
  return value_;
}
inline double M_TBall::value() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TBall.value)
  return _internal_value();
}
inline void M_TBall::_internal_set_value(double value) {
  
  value_ = value;
}
inline void M_TBall::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TBall.value)
}

// .MATCH.Skulls skull = 4;
inline void M_TBall::clear_skull() {
  skull_ = 0;
}
inline ::MATCH::Skulls M_TBall::_internal_skull() const {
  return static_cast< ::MATCH::Skulls >(skull_);
}
inline ::MATCH::Skulls M_TBall::skull() const {
  // @@protoc_insertion_point(field_get:MATCH.M_TBall.skull)
  return _internal_skull();
}
inline void M_TBall::_internal_set_skull(::MATCH::Skulls value) {
  
  skull_ = value;
}
inline void M_TBall::set_skull(::MATCH::Skulls value) {
  _internal_set_skull(value);
  // @@protoc_insertion_point(field_set:MATCH.M_TBall.skull)
}

// repeated .MATCH.BracketData shots_possible = 5;
inline int M_TBall::_internal_shots_possible_size() const {
  return shots_possible_.size();
}
inline int M_TBall::shots_possible_size() const {
  return _internal_shots_possible_size();
}
inline void M_TBall::clear_shots_possible() {
  shots_possible_.Clear();
}
inline ::MATCH::BracketData* M_TBall::mutable_shots_possible(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.M_TBall.shots_possible)
  return shots_possible_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::BracketData >*
M_TBall::mutable_shots_possible() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.M_TBall.shots_possible)
  return &shots_possible_;
}
inline const ::MATCH::BracketData& M_TBall::_internal_shots_possible(int index) const {
  return shots_possible_.Get(index);
}
inline const ::MATCH::BracketData& M_TBall::shots_possible(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.M_TBall.shots_possible)
  return _internal_shots_possible(index);
}
inline ::MATCH::BracketData* M_TBall::_internal_add_shots_possible() {
  return shots_possible_.Add();
}
inline ::MATCH::BracketData* M_TBall::add_shots_possible() {
  // @@protoc_insertion_point(field_add:MATCH.M_TBall.shots_possible)
  return _internal_add_shots_possible();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::BracketData >&
M_TBall::shots_possible() const {
  // @@protoc_insertion_point(field_list:MATCH.M_TBall.shots_possible)
  return shots_possible_;
}

// -------------------------------------------------------------------

// TOutcome

// .PAYLOAD.ShotOutcomes outcome = 1;
inline void TOutcome::clear_outcome() {
  outcome_ = 0;
}
inline ::PAYLOAD::ShotOutcomes TOutcome::_internal_outcome() const {
  return static_cast< ::PAYLOAD::ShotOutcomes >(outcome_);
}
inline ::PAYLOAD::ShotOutcomes TOutcome::outcome() const {
  // @@protoc_insertion_point(field_get:MATCH.TOutcome.outcome)
  return _internal_outcome();
}
inline void TOutcome::_internal_set_outcome(::PAYLOAD::ShotOutcomes value) {
  
  outcome_ = value;
}
inline void TOutcome::set_outcome(::PAYLOAD::ShotOutcomes value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:MATCH.TOutcome.outcome)
}

// int32 runs = 2;
inline void TOutcome::clear_runs() {
  runs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TOutcome::_internal_runs() const {
  return runs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TOutcome::runs() const {
  // @@protoc_insertion_point(field_get:MATCH.TOutcome.runs)
  return _internal_runs();
}
inline void TOutcome::_internal_set_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runs_ = value;
}
inline void TOutcome::set_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runs(value);
  // @@protoc_insertion_point(field_set:MATCH.TOutcome.runs)
}

// double random = 3;
inline void TOutcome::clear_random() {
  random_ = 0;
}
inline double TOutcome::_internal_random() const {
  return random_;
}
inline double TOutcome::random() const {
  // @@protoc_insertion_point(field_get:MATCH.TOutcome.random)
  return _internal_random();
}
inline void TOutcome::_internal_set_random(double value) {
  
  random_ = value;
}
inline void TOutcome::set_random(double value) {
  _internal_set_random(value);
  // @@protoc_insertion_point(field_set:MATCH.TOutcome.random)
}

// -------------------------------------------------------------------

// M_CurrentBall

// .MATCH.BallStates state = 1;
inline void M_CurrentBall::clear_state() {
  state_ = 0;
}
inline ::MATCH::BallStates M_CurrentBall::_internal_state() const {
  return static_cast< ::MATCH::BallStates >(state_);
}
inline ::MATCH::BallStates M_CurrentBall::state() const {
  // @@protoc_insertion_point(field_get:MATCH.M_CurrentBall.state)
  return _internal_state();
}
inline void M_CurrentBall::_internal_set_state(::MATCH::BallStates value) {
  
  state_ = value;
}
inline void M_CurrentBall::set_state(::MATCH::BallStates value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:MATCH.M_CurrentBall.state)
}

// .MATCH.TOutcome outcome = 2;
inline bool M_CurrentBall::_internal_has_outcome() const {
  return this != internal_default_instance() && outcome_ != nullptr;
}
inline bool M_CurrentBall::has_outcome() const {
  return _internal_has_outcome();
}
inline void M_CurrentBall::clear_outcome() {
  if (GetArena() == nullptr && outcome_ != nullptr) {
    delete outcome_;
  }
  outcome_ = nullptr;
}
inline const ::MATCH::TOutcome& M_CurrentBall::_internal_outcome() const {
  const ::MATCH::TOutcome* p = outcome_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::TOutcome*>(
      &::MATCH::_TOutcome_default_instance_);
}
inline const ::MATCH::TOutcome& M_CurrentBall::outcome() const {
  // @@protoc_insertion_point(field_get:MATCH.M_CurrentBall.outcome)
  return _internal_outcome();
}
inline void M_CurrentBall::unsafe_arena_set_allocated_outcome(
    ::MATCH::TOutcome* outcome) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outcome_);
  }
  outcome_ = outcome;
  if (outcome) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_CurrentBall.outcome)
}
inline ::MATCH::TOutcome* M_CurrentBall::release_outcome() {
  auto temp = unsafe_arena_release_outcome();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::TOutcome* M_CurrentBall::unsafe_arena_release_outcome() {
  // @@protoc_insertion_point(field_release:MATCH.M_CurrentBall.outcome)
  
  ::MATCH::TOutcome* temp = outcome_;
  outcome_ = nullptr;
  return temp;
}
inline ::MATCH::TOutcome* M_CurrentBall::_internal_mutable_outcome() {
  
  if (outcome_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::TOutcome>(GetArena());
    outcome_ = p;
  }
  return outcome_;
}
inline ::MATCH::TOutcome* M_CurrentBall::mutable_outcome() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_CurrentBall.outcome)
  return _internal_mutable_outcome();
}
inline void M_CurrentBall::set_allocated_outcome(::MATCH::TOutcome* outcome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete outcome_;
  }
  if (outcome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(outcome);
    if (message_arena != submessage_arena) {
      outcome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outcome, submessage_arena);
    }
    
  } else {
    
  }
  outcome_ = outcome;
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_CurrentBall.outcome)
}

// repeated .MATCH.M_TShot shots = 3;
inline int M_CurrentBall::_internal_shots_size() const {
  return shots_.size();
}
inline int M_CurrentBall::shots_size() const {
  return _internal_shots_size();
}
inline void M_CurrentBall::clear_shots() {
  shots_.Clear();
}
inline ::MATCH::M_TShot* M_CurrentBall::mutable_shots(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.M_CurrentBall.shots)
  return shots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TShot >*
M_CurrentBall::mutable_shots() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.M_CurrentBall.shots)
  return &shots_;
}
inline const ::MATCH::M_TShot& M_CurrentBall::_internal_shots(int index) const {
  return shots_.Get(index);
}
inline const ::MATCH::M_TShot& M_CurrentBall::shots(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.M_CurrentBall.shots)
  return _internal_shots(index);
}
inline ::MATCH::M_TShot* M_CurrentBall::_internal_add_shots() {
  return shots_.Add();
}
inline ::MATCH::M_TShot* M_CurrentBall::add_shots() {
  // @@protoc_insertion_point(field_add:MATCH.M_CurrentBall.shots)
  return _internal_add_shots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TShot >&
M_CurrentBall::shots() const {
  // @@protoc_insertion_point(field_list:MATCH.M_CurrentBall.shots)
  return shots_;
}

// repeated .MATCH.M_TBall balls = 4;
inline int M_CurrentBall::_internal_balls_size() const {
  return balls_.size();
}
inline int M_CurrentBall::balls_size() const {
  return _internal_balls_size();
}
inline void M_CurrentBall::clear_balls() {
  balls_.Clear();
}
inline ::MATCH::M_TBall* M_CurrentBall::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.M_CurrentBall.balls)
  return balls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TBall >*
M_CurrentBall::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.M_CurrentBall.balls)
  return &balls_;
}
inline const ::MATCH::M_TBall& M_CurrentBall::_internal_balls(int index) const {
  return balls_.Get(index);
}
inline const ::MATCH::M_TBall& M_CurrentBall::balls(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.M_CurrentBall.balls)
  return _internal_balls(index);
}
inline ::MATCH::M_TBall* M_CurrentBall::_internal_add_balls() {
  return balls_.Add();
}
inline ::MATCH::M_TBall* M_CurrentBall::add_balls() {
  // @@protoc_insertion_point(field_add:MATCH.M_CurrentBall.balls)
  return _internal_add_balls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_TBall >&
M_CurrentBall::balls() const {
  // @@protoc_insertion_point(field_list:MATCH.M_CurrentBall.balls)
  return balls_;
}

// .MATCH.M_TBall selectedBall = 5;
inline bool M_CurrentBall::_internal_has_selectedball() const {
  return this != internal_default_instance() && selectedball_ != nullptr;
}
inline bool M_CurrentBall::has_selectedball() const {
  return _internal_has_selectedball();
}
inline void M_CurrentBall::clear_selectedball() {
  if (GetArena() == nullptr && selectedball_ != nullptr) {
    delete selectedball_;
  }
  selectedball_ = nullptr;
}
inline const ::MATCH::M_TBall& M_CurrentBall::_internal_selectedball() const {
  const ::MATCH::M_TBall* p = selectedball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::M_TBall*>(
      &::MATCH::_M_TBall_default_instance_);
}
inline const ::MATCH::M_TBall& M_CurrentBall::selectedball() const {
  // @@protoc_insertion_point(field_get:MATCH.M_CurrentBall.selectedBall)
  return _internal_selectedball();
}
inline void M_CurrentBall::unsafe_arena_set_allocated_selectedball(
    ::MATCH::M_TBall* selectedball) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectedball_);
  }
  selectedball_ = selectedball;
  if (selectedball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_CurrentBall.selectedBall)
}
inline ::MATCH::M_TBall* M_CurrentBall::release_selectedball() {
  auto temp = unsafe_arena_release_selectedball();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::M_TBall* M_CurrentBall::unsafe_arena_release_selectedball() {
  // @@protoc_insertion_point(field_release:MATCH.M_CurrentBall.selectedBall)
  
  ::MATCH::M_TBall* temp = selectedball_;
  selectedball_ = nullptr;
  return temp;
}
inline ::MATCH::M_TBall* M_CurrentBall::_internal_mutable_selectedball() {
  
  if (selectedball_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::M_TBall>(GetArena());
    selectedball_ = p;
  }
  return selectedball_;
}
inline ::MATCH::M_TBall* M_CurrentBall::mutable_selectedball() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_CurrentBall.selectedBall)
  return _internal_mutable_selectedball();
}
inline void M_CurrentBall::set_allocated_selectedball(::MATCH::M_TBall* selectedball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectedball_;
  }
  if (selectedball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectedball);
    if (message_arena != submessage_arena) {
      selectedball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedball, submessage_arena);
    }
    
  } else {
    
  }
  selectedball_ = selectedball;
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_CurrentBall.selectedBall)
}

// .MATCH.M_TShot selectedShot = 6;
inline bool M_CurrentBall::_internal_has_selectedshot() const {
  return this != internal_default_instance() && selectedshot_ != nullptr;
}
inline bool M_CurrentBall::has_selectedshot() const {
  return _internal_has_selectedshot();
}
inline void M_CurrentBall::clear_selectedshot() {
  if (GetArena() == nullptr && selectedshot_ != nullptr) {
    delete selectedshot_;
  }
  selectedshot_ = nullptr;
}
inline const ::MATCH::M_TShot& M_CurrentBall::_internal_selectedshot() const {
  const ::MATCH::M_TShot* p = selectedshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::M_TShot*>(
      &::MATCH::_M_TShot_default_instance_);
}
inline const ::MATCH::M_TShot& M_CurrentBall::selectedshot() const {
  // @@protoc_insertion_point(field_get:MATCH.M_CurrentBall.selectedShot)
  return _internal_selectedshot();
}
inline void M_CurrentBall::unsafe_arena_set_allocated_selectedshot(
    ::MATCH::M_TShot* selectedshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectedshot_);
  }
  selectedshot_ = selectedshot;
  if (selectedshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_CurrentBall.selectedShot)
}
inline ::MATCH::M_TShot* M_CurrentBall::release_selectedshot() {
  auto temp = unsafe_arena_release_selectedshot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::M_TShot* M_CurrentBall::unsafe_arena_release_selectedshot() {
  // @@protoc_insertion_point(field_release:MATCH.M_CurrentBall.selectedShot)
  
  ::MATCH::M_TShot* temp = selectedshot_;
  selectedshot_ = nullptr;
  return temp;
}
inline ::MATCH::M_TShot* M_CurrentBall::_internal_mutable_selectedshot() {
  
  if (selectedshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::M_TShot>(GetArena());
    selectedshot_ = p;
  }
  return selectedshot_;
}
inline ::MATCH::M_TShot* M_CurrentBall::mutable_selectedshot() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_CurrentBall.selectedShot)
  return _internal_mutable_selectedshot();
}
inline void M_CurrentBall::set_allocated_selectedshot(::MATCH::M_TShot* selectedshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectedshot_;
  }
  if (selectedshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectedshot);
    if (message_arena != submessage_arena) {
      selectedshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedshot, submessage_arena);
    }
    
  } else {
    
  }
  selectedshot_ = selectedshot;
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_CurrentBall.selectedShot)
}

// int32 over_ball_number = 7;
inline void M_CurrentBall::clear_over_ball_number() {
  over_ball_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_CurrentBall::_internal_over_ball_number() const {
  return over_ball_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_CurrentBall::over_ball_number() const {
  // @@protoc_insertion_point(field_get:MATCH.M_CurrentBall.over_ball_number)
  return _internal_over_ball_number();
}
inline void M_CurrentBall::_internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_ball_number_ = value;
}
inline void M_CurrentBall::set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_ball_number(value);
  // @@protoc_insertion_point(field_set:MATCH.M_CurrentBall.over_ball_number)
}

// -------------------------------------------------------------------

// M_Innings

// .PAYLOAD.Innings inning = 1;
inline void M_Innings::clear_inning() {
  inning_ = 0;
}
inline ::PAYLOAD::Innings M_Innings::_internal_inning() const {
  return static_cast< ::PAYLOAD::Innings >(inning_);
}
inline ::PAYLOAD::Innings M_Innings::inning() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.inning)
  return _internal_inning();
}
inline void M_Innings::_internal_set_inning(::PAYLOAD::Innings value) {
  
  inning_ = value;
}
inline void M_Innings::set_inning(::PAYLOAD::Innings value) {
  _internal_set_inning(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.inning)
}

// int32 runs = 2;
inline void M_Innings::clear_runs() {
  runs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_runs() const {
  return runs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::runs() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.runs)
  return _internal_runs();
}
inline void M_Innings::_internal_set_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runs_ = value;
}
inline void M_Innings::set_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runs(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.runs)
}

// int32 balls = 3;
inline void M_Innings::clear_balls() {
  balls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_balls() const {
  return balls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::balls() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.balls)
  return _internal_balls();
}
inline void M_Innings::_internal_set_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  balls_ = value;
}
inline void M_Innings::set_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_balls(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.balls)
}

// int32 wickets = 4;
inline void M_Innings::clear_wickets() {
  wickets_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_wickets() const {
  return wickets_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::wickets() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.wickets)
  return _internal_wickets();
}
inline void M_Innings::_internal_set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wickets_ = value;
}
inline void M_Innings::set_wickets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wickets(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.wickets)
}

// int32 over_number = 5;
inline void M_Innings::clear_over_number() {
  over_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_over_number() const {
  return over_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::over_number() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.over_number)
  return _internal_over_number();
}
inline void M_Innings::_internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_number_ = value;
}
inline void M_Innings::set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_number(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.over_number)
}

// int32 max_balls_per_over = 6;
inline void M_Innings::clear_max_balls_per_over() {
  max_balls_per_over_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_max_balls_per_over() const {
  return max_balls_per_over_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::max_balls_per_over() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.max_balls_per_over)
  return _internal_max_balls_per_over();
}
inline void M_Innings::_internal_set_max_balls_per_over(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_balls_per_over_ = value;
}
inline void M_Innings::set_max_balls_per_over(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_balls_per_over(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.max_balls_per_over)
}

// int32 max_overs = 7;
inline void M_Innings::clear_max_overs() {
  max_overs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_max_overs() const {
  return max_overs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::max_overs() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.max_overs)
  return _internal_max_overs();
}
inline void M_Innings::_internal_set_max_overs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_overs_ = value;
}
inline void M_Innings::set_max_overs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_overs(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.max_overs)
}

// int32 boundary_counter = 8;
inline void M_Innings::clear_boundary_counter() {
  boundary_counter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_boundary_counter() const {
  return boundary_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::boundary_counter() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.boundary_counter)
  return _internal_boundary_counter();
}
inline void M_Innings::_internal_set_boundary_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boundary_counter_ = value;
}
inline void M_Innings::set_boundary_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boundary_counter(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.boundary_counter)
}

// int32 green_shot_missed_counter = 9;
inline void M_Innings::clear_green_shot_missed_counter() {
  green_shot_missed_counter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_green_shot_missed_counter() const {
  return green_shot_missed_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::green_shot_missed_counter() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.green_shot_missed_counter)
  return _internal_green_shot_missed_counter();
}
inline void M_Innings::_internal_set_green_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  green_shot_missed_counter_ = value;
}
inline void M_Innings::set_green_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_green_shot_missed_counter(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.green_shot_missed_counter)
}

// int32 yellow_shot_missed_counter = 10;
inline void M_Innings::clear_yellow_shot_missed_counter() {
  yellow_shot_missed_counter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::_internal_yellow_shot_missed_counter() const {
  return yellow_shot_missed_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M_Innings::yellow_shot_missed_counter() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.yellow_shot_missed_counter)
  return _internal_yellow_shot_missed_counter();
}
inline void M_Innings::_internal_set_yellow_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yellow_shot_missed_counter_ = value;
}
inline void M_Innings::set_yellow_shot_missed_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yellow_shot_missed_counter(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.yellow_shot_missed_counter)
}

// string user_on_batting = 11;
inline void M_Innings::clear_user_on_batting() {
  user_on_batting_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& M_Innings::user_on_batting() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.user_on_batting)
  return _internal_user_on_batting();
}
inline void M_Innings::set_user_on_batting(const std::string& value) {
  _internal_set_user_on_batting(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.user_on_batting)
}
inline std::string* M_Innings::mutable_user_on_batting() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_Innings.user_on_batting)
  return _internal_mutable_user_on_batting();
}
inline const std::string& M_Innings::_internal_user_on_batting() const {
  return user_on_batting_.Get();
}
inline void M_Innings::_internal_set_user_on_batting(const std::string& value) {
  
  user_on_batting_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void M_Innings::set_user_on_batting(std::string&& value) {
  
  user_on_batting_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.M_Innings.user_on_batting)
}
inline void M_Innings::set_user_on_batting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_on_batting_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.M_Innings.user_on_batting)
}
inline void M_Innings::set_user_on_batting(const char* value,
    size_t size) {
  
  user_on_batting_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.M_Innings.user_on_batting)
}
inline std::string* M_Innings::_internal_mutable_user_on_batting() {
  
  return user_on_batting_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* M_Innings::release_user_on_batting() {
  // @@protoc_insertion_point(field_release:MATCH.M_Innings.user_on_batting)
  return user_on_batting_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void M_Innings::set_allocated_user_on_batting(std::string* user_on_batting) {
  if (user_on_batting != nullptr) {
    
  } else {
    
  }
  user_on_batting_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_on_batting,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_Innings.user_on_batting)
}
inline std::string* M_Innings::unsafe_arena_release_user_on_batting() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.M_Innings.user_on_batting)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_on_batting_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void M_Innings::unsafe_arena_set_allocated_user_on_batting(
    std::string* user_on_batting) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_on_batting != nullptr) {
    
  } else {
    
  }
  user_on_batting_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_on_batting, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_Innings.user_on_batting)
}

// string user_on_bowling = 12;
inline void M_Innings::clear_user_on_bowling() {
  user_on_bowling_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& M_Innings::user_on_bowling() const {
  // @@protoc_insertion_point(field_get:MATCH.M_Innings.user_on_bowling)
  return _internal_user_on_bowling();
}
inline void M_Innings::set_user_on_bowling(const std::string& value) {
  _internal_set_user_on_bowling(value);
  // @@protoc_insertion_point(field_set:MATCH.M_Innings.user_on_bowling)
}
inline std::string* M_Innings::mutable_user_on_bowling() {
  // @@protoc_insertion_point(field_mutable:MATCH.M_Innings.user_on_bowling)
  return _internal_mutable_user_on_bowling();
}
inline const std::string& M_Innings::_internal_user_on_bowling() const {
  return user_on_bowling_.Get();
}
inline void M_Innings::_internal_set_user_on_bowling(const std::string& value) {
  
  user_on_bowling_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void M_Innings::set_user_on_bowling(std::string&& value) {
  
  user_on_bowling_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.M_Innings.user_on_bowling)
}
inline void M_Innings::set_user_on_bowling(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_on_bowling_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.M_Innings.user_on_bowling)
}
inline void M_Innings::set_user_on_bowling(const char* value,
    size_t size) {
  
  user_on_bowling_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.M_Innings.user_on_bowling)
}
inline std::string* M_Innings::_internal_mutable_user_on_bowling() {
  
  return user_on_bowling_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* M_Innings::release_user_on_bowling() {
  // @@protoc_insertion_point(field_release:MATCH.M_Innings.user_on_bowling)
  return user_on_bowling_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void M_Innings::set_allocated_user_on_bowling(std::string* user_on_bowling) {
  if (user_on_bowling != nullptr) {
    
  } else {
    
  }
  user_on_bowling_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_on_bowling,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.M_Innings.user_on_bowling)
}
inline std::string* M_Innings::unsafe_arena_release_user_on_bowling() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.M_Innings.user_on_bowling)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_on_bowling_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void M_Innings::unsafe_arena_set_allocated_user_on_bowling(
    std::string* user_on_bowling) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_on_bowling != nullptr) {
    
  } else {
    
  }
  user_on_bowling_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_on_bowling, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.M_Innings.user_on_bowling)
}

// -------------------------------------------------------------------

// IOutcome

// int32 total_runs = 1;
inline void IOutcome::clear_total_runs() {
  total_runs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::_internal_total_runs() const {
  return total_runs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::total_runs() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.total_runs)
  return _internal_total_runs();
}
inline void IOutcome::_internal_set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_runs_ = value;
}
inline void IOutcome::set_total_runs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_runs(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.total_runs)
}

// int32 total_balls = 2;
inline void IOutcome::clear_total_balls() {
  total_balls_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::_internal_total_balls() const {
  return total_balls_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::total_balls() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.total_balls)
  return _internal_total_balls();
}
inline void IOutcome::_internal_set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_balls_ = value;
}
inline void IOutcome::set_total_balls(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_balls(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.total_balls)
}

// int32 wickets_taken = 3;
inline void IOutcome::clear_wickets_taken() {
  wickets_taken_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::_internal_wickets_taken() const {
  return wickets_taken_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::wickets_taken() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.wickets_taken)
  return _internal_wickets_taken();
}
inline void IOutcome::_internal_set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wickets_taken_ = value;
}
inline void IOutcome::set_wickets_taken(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wickets_taken(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.wickets_taken)
}

// int32 runs_scored = 4;
inline void IOutcome::clear_runs_scored() {
  runs_scored_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::_internal_runs_scored() const {
  return runs_scored_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::runs_scored() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.runs_scored)
  return _internal_runs_scored();
}
inline void IOutcome::_internal_set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  runs_scored_ = value;
}
inline void IOutcome::set_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runs_scored(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.runs_scored)
}

// int32 original_runs_scored = 5;
inline void IOutcome::clear_original_runs_scored() {
  original_runs_scored_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::_internal_original_runs_scored() const {
  return original_runs_scored_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::original_runs_scored() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.original_runs_scored)
  return _internal_original_runs_scored();
}
inline void IOutcome::_internal_set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_runs_scored_ = value;
}
inline void IOutcome::set_original_runs_scored(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_runs_scored(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.original_runs_scored)
}

// .MATCH.Brackets bracket_id = 6;
inline void IOutcome::clear_bracket_id() {
  bracket_id_ = 0;
}
inline ::MATCH::Brackets IOutcome::_internal_bracket_id() const {
  return static_cast< ::MATCH::Brackets >(bracket_id_);
}
inline ::MATCH::Brackets IOutcome::bracket_id() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.bracket_id)
  return _internal_bracket_id();
}
inline void IOutcome::_internal_set_bracket_id(::MATCH::Brackets value) {
  
  bracket_id_ = value;
}
inline void IOutcome::set_bracket_id(::MATCH::Brackets value) {
  _internal_set_bracket_id(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.bracket_id)
}

// int32 over_ball_number = 7;
inline void IOutcome::clear_over_ball_number() {
  over_ball_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::_internal_over_ball_number() const {
  return over_ball_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::over_ball_number() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.over_ball_number)
  return _internal_over_ball_number();
}
inline void IOutcome::_internal_set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_ball_number_ = value;
}
inline void IOutcome::set_over_ball_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_ball_number(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.over_ball_number)
}

// int32 over_number = 8;
inline void IOutcome::clear_over_number() {
  over_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::_internal_over_number() const {
  return over_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IOutcome::over_number() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.over_number)
  return _internal_over_number();
}
inline void IOutcome::_internal_set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  over_number_ = value;
}
inline void IOutcome::set_over_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_over_number(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.over_number)
}

// .PAYLOAD.ShotOutcomes outcome = 9;
inline void IOutcome::clear_outcome() {
  outcome_ = 0;
}
inline ::PAYLOAD::ShotOutcomes IOutcome::_internal_outcome() const {
  return static_cast< ::PAYLOAD::ShotOutcomes >(outcome_);
}
inline ::PAYLOAD::ShotOutcomes IOutcome::outcome() const {
  // @@protoc_insertion_point(field_get:MATCH.IOutcome.outcome)
  return _internal_outcome();
}
inline void IOutcome::_internal_set_outcome(::PAYLOAD::ShotOutcomes value) {
  
  outcome_ = value;
}
inline void IOutcome::set_outcome(::PAYLOAD::ShotOutcomes value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:MATCH.IOutcome.outcome)
}

// -------------------------------------------------------------------

// MatchPlayer

// int32 character_id = 1;
inline void MatchPlayer::clear_character_id() {
  character_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::character_id() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.character_id)
  return _internal_character_id();
}
inline void MatchPlayer::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  character_id_ = value;
}
inline void MatchPlayer::set_character_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.character_id)
}

// string nickname = 2;
inline void MatchPlayer::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchPlayer::nickname() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.nickname)
  return _internal_nickname();
}
inline void MatchPlayer::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.nickname)
}
inline std::string* MatchPlayer::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchPlayer.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MatchPlayer::_internal_nickname() const {
  return nickname_.Get();
}
inline void MatchPlayer::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchPlayer::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.MatchPlayer.nickname)
}
inline void MatchPlayer::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.MatchPlayer.nickname)
}
inline void MatchPlayer::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.MatchPlayer.nickname)
}
inline std::string* MatchPlayer::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchPlayer::release_nickname() {
  // @@protoc_insertion_point(field_release:MATCH.MatchPlayer.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchPlayer::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchPlayer.nickname)
}
inline std::string* MatchPlayer::unsafe_arena_release_nickname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.MatchPlayer.nickname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nickname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MatchPlayer::unsafe_arena_set_allocated_nickname(
    std::string* nickname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nickname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchPlayer.nickname)
}

// int32 image_number = 3;
inline void MatchPlayer::clear_image_number() {
  image_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::_internal_image_number() const {
  return image_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::image_number() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.image_number)
  return _internal_image_number();
}
inline void MatchPlayer::_internal_set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  image_number_ = value;
}
inline void MatchPlayer::set_image_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_image_number(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.image_number)
}

// int32 power = 4;
inline void MatchPlayer::clear_power() {
  power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::power() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.power)
  return _internal_power();
}
inline void MatchPlayer::_internal_set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_ = value;
}
inline void MatchPlayer::set_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.power)
}

// int32 lineup_number = 5;
inline void MatchPlayer::clear_lineup_number() {
  lineup_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::_internal_lineup_number() const {
  return lineup_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::lineup_number() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.lineup_number)
  return _internal_lineup_number();
}
inline void MatchPlayer::_internal_set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lineup_number_ = value;
}
inline void MatchPlayer::set_lineup_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lineup_number(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.lineup_number)
}

// bool is_out = 6;
inline void MatchPlayer::clear_is_out() {
  is_out_ = false;
}
inline bool MatchPlayer::_internal_is_out() const {
  return is_out_;
}
inline bool MatchPlayer::is_out() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.is_out)
  return _internal_is_out();
}
inline void MatchPlayer::_internal_set_is_out(bool value) {
  
  is_out_ = value;
}
inline void MatchPlayer::set_is_out(bool value) {
  _internal_set_is_out(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.is_out)
}

// bool used = 7;
inline void MatchPlayer::clear_used() {
  used_ = false;
}
inline bool MatchPlayer::_internal_used() const {
  return used_;
}
inline bool MatchPlayer::used() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.used)
  return _internal_used();
}
inline void MatchPlayer::_internal_set_used(bool value) {
  
  used_ = value;
}
inline void MatchPlayer::set_used(bool value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.used)
}

// int32 hits = 8;
inline void MatchPlayer::clear_hits() {
  hits_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::_internal_hits() const {
  return hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::hits() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.hits)
  return _internal_hits();
}
inline void MatchPlayer::_internal_set_hits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hits_ = value;
}
inline void MatchPlayer::set_hits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hits(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.hits)
}

// int32 misses = 9;
inline void MatchPlayer::clear_misses() {
  misses_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::_internal_misses() const {
  return misses_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchPlayer::misses() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.misses)
  return _internal_misses();
}
inline void MatchPlayer::_internal_set_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  misses_ = value;
}
inline void MatchPlayer::set_misses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_misses(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.misses)
}

// double lhbrhb = 10;
inline void MatchPlayer::clear_lhbrhb() {
  lhbrhb_ = 0;
}
inline double MatchPlayer::_internal_lhbrhb() const {
  return lhbrhb_;
}
inline double MatchPlayer::lhbrhb() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.lhbrhb)
  return _internal_lhbrhb();
}
inline void MatchPlayer::_internal_set_lhbrhb(double value) {
  
  lhbrhb_ = value;
}
inline void MatchPlayer::set_lhbrhb(double value) {
  _internal_set_lhbrhb(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.lhbrhb)
}

// double confidence = 11;
inline void MatchPlayer::clear_confidence() {
  confidence_ = 0;
}
inline double MatchPlayer::_internal_confidence() const {
  return confidence_;
}
inline double MatchPlayer::confidence() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.confidence)
  return _internal_confidence();
}
inline void MatchPlayer::_internal_set_confidence(double value) {
  
  confidence_ = value;
}
inline void MatchPlayer::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.confidence)
}

// .MATCH.Strike strike = 12;
inline void MatchPlayer::clear_strike() {
  strike_ = 0;
}
inline ::MATCH::Strike MatchPlayer::_internal_strike() const {
  return static_cast< ::MATCH::Strike >(strike_);
}
inline ::MATCH::Strike MatchPlayer::strike() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchPlayer.strike)
  return _internal_strike();
}
inline void MatchPlayer::_internal_set_strike(::MATCH::Strike value) {
  
  strike_ = value;
}
inline void MatchPlayer::set_strike(::MATCH::Strike value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchPlayer.strike)
}

// -------------------------------------------------------------------

// MatchModel

// string matchId = 1;
inline void MatchModel::clear_matchid() {
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchModel::matchid() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.matchId)
  return _internal_matchid();
}
inline void MatchModel::set_matchid(const std::string& value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.matchId)
}
inline std::string* MatchModel::mutable_matchid() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.matchId)
  return _internal_mutable_matchid();
}
inline const std::string& MatchModel::_internal_matchid() const {
  return matchid_.Get();
}
inline void MatchModel::_internal_set_matchid(const std::string& value) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchModel::set_matchid(std::string&& value) {
  
  matchid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.MatchModel.matchId)
}
inline void MatchModel::set_matchid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.MatchModel.matchId)
}
inline void MatchModel::set_matchid(const char* value,
    size_t size) {
  
  matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.MatchModel.matchId)
}
inline std::string* MatchModel::_internal_mutable_matchid() {
  
  return matchid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchModel::release_matchid() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.matchId)
  return matchid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchModel::set_allocated_matchid(std::string* matchid) {
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matchid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.matchId)
}
inline std::string* MatchModel::unsafe_arena_release_matchid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.MatchModel.matchId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return matchid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MatchModel::unsafe_arena_set_allocated_matchid(
    std::string* matchid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (matchid != nullptr) {
    
  } else {
    
  }
  matchid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      matchid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.matchId)
}

// repeated .MATCH.M_UserInfo users = 2;
inline int MatchModel::_internal_users_size() const {
  return users_.size();
}
inline int MatchModel::users_size() const {
  return _internal_users_size();
}
inline void MatchModel::clear_users() {
  users_.Clear();
}
inline ::MATCH::M_UserInfo* MatchModel::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_UserInfo >*
MatchModel::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.MatchModel.users)
  return &users_;
}
inline const ::MATCH::M_UserInfo& MatchModel::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::MATCH::M_UserInfo& MatchModel::users(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.users)
  return _internal_users(index);
}
inline ::MATCH::M_UserInfo* MatchModel::_internal_add_users() {
  return users_.Add();
}
inline ::MATCH::M_UserInfo* MatchModel::add_users() {
  // @@protoc_insertion_point(field_add:MATCH.MatchModel.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_UserInfo >&
MatchModel::users() const {
  // @@protoc_insertion_point(field_list:MATCH.MatchModel.users)
  return users_;
}

// string home = 3;
inline void MatchModel::clear_home() {
  home_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchModel::home() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.home)
  return _internal_home();
}
inline void MatchModel::set_home(const std::string& value) {
  _internal_set_home(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.home)
}
inline std::string* MatchModel::mutable_home() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.home)
  return _internal_mutable_home();
}
inline const std::string& MatchModel::_internal_home() const {
  return home_.Get();
}
inline void MatchModel::_internal_set_home(const std::string& value) {
  
  home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchModel::set_home(std::string&& value) {
  
  home_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.MatchModel.home)
}
inline void MatchModel::set_home(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.MatchModel.home)
}
inline void MatchModel::set_home(const char* value,
    size_t size) {
  
  home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.MatchModel.home)
}
inline std::string* MatchModel::_internal_mutable_home() {
  
  return home_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchModel::release_home() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.home)
  return home_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchModel::set_allocated_home(std::string* home) {
  if (home != nullptr) {
    
  } else {
    
  }
  home_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), home,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.home)
}
inline std::string* MatchModel::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.MatchModel.home)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return home_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MatchModel::unsafe_arena_set_allocated_home(
    std::string* home) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (home != nullptr) {
    
  } else {
    
  }
  home_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      home, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.home)
}

// string away = 4;
inline void MatchModel::clear_away() {
  away_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchModel::away() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.away)
  return _internal_away();
}
inline void MatchModel::set_away(const std::string& value) {
  _internal_set_away(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.away)
}
inline std::string* MatchModel::mutable_away() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.away)
  return _internal_mutable_away();
}
inline const std::string& MatchModel::_internal_away() const {
  return away_.Get();
}
inline void MatchModel::_internal_set_away(const std::string& value) {
  
  away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchModel::set_away(std::string&& value) {
  
  away_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MATCH.MatchModel.away)
}
inline void MatchModel::set_away(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MATCH.MatchModel.away)
}
inline void MatchModel::set_away(const char* value,
    size_t size) {
  
  away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MATCH.MatchModel.away)
}
inline std::string* MatchModel::_internal_mutable_away() {
  
  return away_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchModel::release_away() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.away)
  return away_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchModel::set_allocated_away(std::string* away) {
  if (away != nullptr) {
    
  } else {
    
  }
  away_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), away,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.away)
}
inline std::string* MatchModel::unsafe_arena_release_away() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MATCH.MatchModel.away)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return away_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MatchModel::unsafe_arena_set_allocated_away(
    std::string* away) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (away != nullptr) {
    
  } else {
    
  }
  away_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      away, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.away)
}

// .MATCH.JoinStates joinState = 5;
inline void MatchModel::clear_joinstate() {
  joinstate_ = 0;
}
inline ::MATCH::JoinStates MatchModel::_internal_joinstate() const {
  return static_cast< ::MATCH::JoinStates >(joinstate_);
}
inline ::MATCH::JoinStates MatchModel::joinstate() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.joinState)
  return _internal_joinstate();
}
inline void MatchModel::_internal_set_joinstate(::MATCH::JoinStates value) {
  
  joinstate_ = value;
}
inline void MatchModel::set_joinstate(::MATCH::JoinStates value) {
  _internal_set_joinstate(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.joinState)
}

// .PAYLOAD.MatchStates matchState = 6;
inline void MatchModel::clear_matchstate() {
  matchstate_ = 0;
}
inline ::PAYLOAD::MatchStates MatchModel::_internal_matchstate() const {
  return static_cast< ::PAYLOAD::MatchStates >(matchstate_);
}
inline ::PAYLOAD::MatchStates MatchModel::matchstate() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.matchState)
  return _internal_matchstate();
}
inline void MatchModel::_internal_set_matchstate(::PAYLOAD::MatchStates value) {
  
  matchstate_ = value;
}
inline void MatchModel::set_matchstate(::PAYLOAD::MatchStates value) {
  _internal_set_matchstate(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.matchState)
}

// .MATCH.M_Innings currentInnings = 7;
inline bool MatchModel::_internal_has_currentinnings() const {
  return this != internal_default_instance() && currentinnings_ != nullptr;
}
inline bool MatchModel::has_currentinnings() const {
  return _internal_has_currentinnings();
}
inline void MatchModel::clear_currentinnings() {
  if (GetArena() == nullptr && currentinnings_ != nullptr) {
    delete currentinnings_;
  }
  currentinnings_ = nullptr;
}
inline const ::MATCH::M_Innings& MatchModel::_internal_currentinnings() const {
  const ::MATCH::M_Innings* p = currentinnings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::M_Innings*>(
      &::MATCH::_M_Innings_default_instance_);
}
inline const ::MATCH::M_Innings& MatchModel::currentinnings() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.currentInnings)
  return _internal_currentinnings();
}
inline void MatchModel::unsafe_arena_set_allocated_currentinnings(
    ::MATCH::M_Innings* currentinnings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentinnings_);
  }
  currentinnings_ = currentinnings;
  if (currentinnings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.currentInnings)
}
inline ::MATCH::M_Innings* MatchModel::release_currentinnings() {
  auto temp = unsafe_arena_release_currentinnings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::M_Innings* MatchModel::unsafe_arena_release_currentinnings() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.currentInnings)
  
  ::MATCH::M_Innings* temp = currentinnings_;
  currentinnings_ = nullptr;
  return temp;
}
inline ::MATCH::M_Innings* MatchModel::_internal_mutable_currentinnings() {
  
  if (currentinnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::M_Innings>(GetArena());
    currentinnings_ = p;
  }
  return currentinnings_;
}
inline ::MATCH::M_Innings* MatchModel::mutable_currentinnings() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.currentInnings)
  return _internal_mutable_currentinnings();
}
inline void MatchModel::set_allocated_currentinnings(::MATCH::M_Innings* currentinnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete currentinnings_;
  }
  if (currentinnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(currentinnings);
    if (message_arena != submessage_arena) {
      currentinnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentinnings, submessage_arena);
    }
    
  } else {
    
  }
  currentinnings_ = currentinnings;
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.currentInnings)
}

// .MATCH.M_Innings previousInnings = 8;
inline bool MatchModel::_internal_has_previousinnings() const {
  return this != internal_default_instance() && previousinnings_ != nullptr;
}
inline bool MatchModel::has_previousinnings() const {
  return _internal_has_previousinnings();
}
inline void MatchModel::clear_previousinnings() {
  if (GetArena() == nullptr && previousinnings_ != nullptr) {
    delete previousinnings_;
  }
  previousinnings_ = nullptr;
}
inline const ::MATCH::M_Innings& MatchModel::_internal_previousinnings() const {
  const ::MATCH::M_Innings* p = previousinnings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::M_Innings*>(
      &::MATCH::_M_Innings_default_instance_);
}
inline const ::MATCH::M_Innings& MatchModel::previousinnings() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.previousInnings)
  return _internal_previousinnings();
}
inline void MatchModel::unsafe_arena_set_allocated_previousinnings(
    ::MATCH::M_Innings* previousinnings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previousinnings_);
  }
  previousinnings_ = previousinnings;
  if (previousinnings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.previousInnings)
}
inline ::MATCH::M_Innings* MatchModel::release_previousinnings() {
  auto temp = unsafe_arena_release_previousinnings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::M_Innings* MatchModel::unsafe_arena_release_previousinnings() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.previousInnings)
  
  ::MATCH::M_Innings* temp = previousinnings_;
  previousinnings_ = nullptr;
  return temp;
}
inline ::MATCH::M_Innings* MatchModel::_internal_mutable_previousinnings() {
  
  if (previousinnings_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::M_Innings>(GetArena());
    previousinnings_ = p;
  }
  return previousinnings_;
}
inline ::MATCH::M_Innings* MatchModel::mutable_previousinnings() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.previousInnings)
  return _internal_mutable_previousinnings();
}
inline void MatchModel::set_allocated_previousinnings(::MATCH::M_Innings* previousinnings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previousinnings_;
  }
  if (previousinnings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previousinnings);
    if (message_arena != submessage_arena) {
      previousinnings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previousinnings, submessage_arena);
    }
    
  } else {
    
  }
  previousinnings_ = previousinnings;
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.previousInnings)
}

// repeated .MATCH.MatchPlayer home_lineup = 9;
inline int MatchModel::_internal_home_lineup_size() const {
  return home_lineup_.size();
}
inline int MatchModel::home_lineup_size() const {
  return _internal_home_lineup_size();
}
inline void MatchModel::clear_home_lineup() {
  home_lineup_.Clear();
}
inline ::MATCH::MatchPlayer* MatchModel::mutable_home_lineup(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.home_lineup)
  return home_lineup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >*
MatchModel::mutable_home_lineup() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.MatchModel.home_lineup)
  return &home_lineup_;
}
inline const ::MATCH::MatchPlayer& MatchModel::_internal_home_lineup(int index) const {
  return home_lineup_.Get(index);
}
inline const ::MATCH::MatchPlayer& MatchModel::home_lineup(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.home_lineup)
  return _internal_home_lineup(index);
}
inline ::MATCH::MatchPlayer* MatchModel::_internal_add_home_lineup() {
  return home_lineup_.Add();
}
inline ::MATCH::MatchPlayer* MatchModel::add_home_lineup() {
  // @@protoc_insertion_point(field_add:MATCH.MatchModel.home_lineup)
  return _internal_add_home_lineup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >&
MatchModel::home_lineup() const {
  // @@protoc_insertion_point(field_list:MATCH.MatchModel.home_lineup)
  return home_lineup_;
}

// repeated .MATCH.MatchPlayer away_lineup = 10;
inline int MatchModel::_internal_away_lineup_size() const {
  return away_lineup_.size();
}
inline int MatchModel::away_lineup_size() const {
  return _internal_away_lineup_size();
}
inline void MatchModel::clear_away_lineup() {
  away_lineup_.Clear();
}
inline ::MATCH::MatchPlayer* MatchModel::mutable_away_lineup(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.away_lineup)
  return away_lineup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >*
MatchModel::mutable_away_lineup() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.MatchModel.away_lineup)
  return &away_lineup_;
}
inline const ::MATCH::MatchPlayer& MatchModel::_internal_away_lineup(int index) const {
  return away_lineup_.Get(index);
}
inline const ::MATCH::MatchPlayer& MatchModel::away_lineup(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.away_lineup)
  return _internal_away_lineup(index);
}
inline ::MATCH::MatchPlayer* MatchModel::_internal_add_away_lineup() {
  return away_lineup_.Add();
}
inline ::MATCH::MatchPlayer* MatchModel::add_away_lineup() {
  // @@protoc_insertion_point(field_add:MATCH.MatchModel.away_lineup)
  return _internal_add_away_lineup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::MatchPlayer >&
MatchModel::away_lineup() const {
  // @@protoc_insertion_point(field_list:MATCH.MatchModel.away_lineup)
  return away_lineup_;
}

// .MATCH.M_CurrentBall currentBall = 11;
inline bool MatchModel::_internal_has_currentball() const {
  return this != internal_default_instance() && currentball_ != nullptr;
}
inline bool MatchModel::has_currentball() const {
  return _internal_has_currentball();
}
inline void MatchModel::clear_currentball() {
  if (GetArena() == nullptr && currentball_ != nullptr) {
    delete currentball_;
  }
  currentball_ = nullptr;
}
inline const ::MATCH::M_CurrentBall& MatchModel::_internal_currentball() const {
  const ::MATCH::M_CurrentBall* p = currentball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::M_CurrentBall*>(
      &::MATCH::_M_CurrentBall_default_instance_);
}
inline const ::MATCH::M_CurrentBall& MatchModel::currentball() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.currentBall)
  return _internal_currentball();
}
inline void MatchModel::unsafe_arena_set_allocated_currentball(
    ::MATCH::M_CurrentBall* currentball) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentball_);
  }
  currentball_ = currentball;
  if (currentball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.currentBall)
}
inline ::MATCH::M_CurrentBall* MatchModel::release_currentball() {
  auto temp = unsafe_arena_release_currentball();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::M_CurrentBall* MatchModel::unsafe_arena_release_currentball() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.currentBall)
  
  ::MATCH::M_CurrentBall* temp = currentball_;
  currentball_ = nullptr;
  return temp;
}
inline ::MATCH::M_CurrentBall* MatchModel::_internal_mutable_currentball() {
  
  if (currentball_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::M_CurrentBall>(GetArena());
    currentball_ = p;
  }
  return currentball_;
}
inline ::MATCH::M_CurrentBall* MatchModel::mutable_currentball() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.currentBall)
  return _internal_mutable_currentball();
}
inline void MatchModel::set_allocated_currentball(::MATCH::M_CurrentBall* currentball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete currentball_;
  }
  if (currentball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(currentball);
    if (message_arena != submessage_arena) {
      currentball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentball, submessage_arena);
    }
    
  } else {
    
  }
  currentball_ = currentball;
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.currentBall)
}

// repeated .MATCH.M_CurrentBall previousBalls = 12;
inline int MatchModel::_internal_previousballs_size() const {
  return previousballs_.size();
}
inline int MatchModel::previousballs_size() const {
  return _internal_previousballs_size();
}
inline void MatchModel::clear_previousballs() {
  previousballs_.Clear();
}
inline ::MATCH::M_CurrentBall* MatchModel::mutable_previousballs(int index) {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.previousBalls)
  return previousballs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_CurrentBall >*
MatchModel::mutable_previousballs() {
  // @@protoc_insertion_point(field_mutable_list:MATCH.MatchModel.previousBalls)
  return &previousballs_;
}
inline const ::MATCH::M_CurrentBall& MatchModel::_internal_previousballs(int index) const {
  return previousballs_.Get(index);
}
inline const ::MATCH::M_CurrentBall& MatchModel::previousballs(int index) const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.previousBalls)
  return _internal_previousballs(index);
}
inline ::MATCH::M_CurrentBall* MatchModel::_internal_add_previousballs() {
  return previousballs_.Add();
}
inline ::MATCH::M_CurrentBall* MatchModel::add_previousballs() {
  // @@protoc_insertion_point(field_add:MATCH.MatchModel.previousBalls)
  return _internal_add_previousballs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MATCH::M_CurrentBall >&
MatchModel::previousballs() const {
  // @@protoc_insertion_point(field_list:MATCH.MatchModel.previousBalls)
  return previousballs_;
}

// .MATCH.MatchPlayer selectedFirstBatsman = 13;
inline bool MatchModel::_internal_has_selectedfirstbatsman() const {
  return this != internal_default_instance() && selectedfirstbatsman_ != nullptr;
}
inline bool MatchModel::has_selectedfirstbatsman() const {
  return _internal_has_selectedfirstbatsman();
}
inline void MatchModel::clear_selectedfirstbatsman() {
  if (GetArena() == nullptr && selectedfirstbatsman_ != nullptr) {
    delete selectedfirstbatsman_;
  }
  selectedfirstbatsman_ = nullptr;
}
inline const ::MATCH::MatchPlayer& MatchModel::_internal_selectedfirstbatsman() const {
  const ::MATCH::MatchPlayer* p = selectedfirstbatsman_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::MatchPlayer*>(
      &::MATCH::_MatchPlayer_default_instance_);
}
inline const ::MATCH::MatchPlayer& MatchModel::selectedfirstbatsman() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.selectedFirstBatsman)
  return _internal_selectedfirstbatsman();
}
inline void MatchModel::unsafe_arena_set_allocated_selectedfirstbatsman(
    ::MATCH::MatchPlayer* selectedfirstbatsman) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectedfirstbatsman_);
  }
  selectedfirstbatsman_ = selectedfirstbatsman;
  if (selectedfirstbatsman) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.selectedFirstBatsman)
}
inline ::MATCH::MatchPlayer* MatchModel::release_selectedfirstbatsman() {
  auto temp = unsafe_arena_release_selectedfirstbatsman();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::MatchPlayer* MatchModel::unsafe_arena_release_selectedfirstbatsman() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.selectedFirstBatsman)
  
  ::MATCH::MatchPlayer* temp = selectedfirstbatsman_;
  selectedfirstbatsman_ = nullptr;
  return temp;
}
inline ::MATCH::MatchPlayer* MatchModel::_internal_mutable_selectedfirstbatsman() {
  
  if (selectedfirstbatsman_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::MatchPlayer>(GetArena());
    selectedfirstbatsman_ = p;
  }
  return selectedfirstbatsman_;
}
inline ::MATCH::MatchPlayer* MatchModel::mutable_selectedfirstbatsman() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.selectedFirstBatsman)
  return _internal_mutable_selectedfirstbatsman();
}
inline void MatchModel::set_allocated_selectedfirstbatsman(::MATCH::MatchPlayer* selectedfirstbatsman) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectedfirstbatsman_;
  }
  if (selectedfirstbatsman) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectedfirstbatsman);
    if (message_arena != submessage_arena) {
      selectedfirstbatsman = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedfirstbatsman, submessage_arena);
    }
    
  } else {
    
  }
  selectedfirstbatsman_ = selectedfirstbatsman;
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.selectedFirstBatsman)
}

// .MATCH.MatchPlayer selectedSecondBatsman = 14;
inline bool MatchModel::_internal_has_selectedsecondbatsman() const {
  return this != internal_default_instance() && selectedsecondbatsman_ != nullptr;
}
inline bool MatchModel::has_selectedsecondbatsman() const {
  return _internal_has_selectedsecondbatsman();
}
inline void MatchModel::clear_selectedsecondbatsman() {
  if (GetArena() == nullptr && selectedsecondbatsman_ != nullptr) {
    delete selectedsecondbatsman_;
  }
  selectedsecondbatsman_ = nullptr;
}
inline const ::MATCH::MatchPlayer& MatchModel::_internal_selectedsecondbatsman() const {
  const ::MATCH::MatchPlayer* p = selectedsecondbatsman_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::MatchPlayer*>(
      &::MATCH::_MatchPlayer_default_instance_);
}
inline const ::MATCH::MatchPlayer& MatchModel::selectedsecondbatsman() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.selectedSecondBatsman)
  return _internal_selectedsecondbatsman();
}
inline void MatchModel::unsafe_arena_set_allocated_selectedsecondbatsman(
    ::MATCH::MatchPlayer* selectedsecondbatsman) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectedsecondbatsman_);
  }
  selectedsecondbatsman_ = selectedsecondbatsman;
  if (selectedsecondbatsman) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.selectedSecondBatsman)
}
inline ::MATCH::MatchPlayer* MatchModel::release_selectedsecondbatsman() {
  auto temp = unsafe_arena_release_selectedsecondbatsman();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::MatchPlayer* MatchModel::unsafe_arena_release_selectedsecondbatsman() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.selectedSecondBatsman)
  
  ::MATCH::MatchPlayer* temp = selectedsecondbatsman_;
  selectedsecondbatsman_ = nullptr;
  return temp;
}
inline ::MATCH::MatchPlayer* MatchModel::_internal_mutable_selectedsecondbatsman() {
  
  if (selectedsecondbatsman_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::MatchPlayer>(GetArena());
    selectedsecondbatsman_ = p;
  }
  return selectedsecondbatsman_;
}
inline ::MATCH::MatchPlayer* MatchModel::mutable_selectedsecondbatsman() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.selectedSecondBatsman)
  return _internal_mutable_selectedsecondbatsman();
}
inline void MatchModel::set_allocated_selectedsecondbatsman(::MATCH::MatchPlayer* selectedsecondbatsman) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectedsecondbatsman_;
  }
  if (selectedsecondbatsman) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectedsecondbatsman);
    if (message_arena != submessage_arena) {
      selectedsecondbatsman = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedsecondbatsman, submessage_arena);
    }
    
  } else {
    
  }
  selectedsecondbatsman_ = selectedsecondbatsman;
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.selectedSecondBatsman)
}

// .MATCH.MatchPlayer selectedBowler = 15;
inline bool MatchModel::_internal_has_selectedbowler() const {
  return this != internal_default_instance() && selectedbowler_ != nullptr;
}
inline bool MatchModel::has_selectedbowler() const {
  return _internal_has_selectedbowler();
}
inline void MatchModel::clear_selectedbowler() {
  if (GetArena() == nullptr && selectedbowler_ != nullptr) {
    delete selectedbowler_;
  }
  selectedbowler_ = nullptr;
}
inline const ::MATCH::MatchPlayer& MatchModel::_internal_selectedbowler() const {
  const ::MATCH::MatchPlayer* p = selectedbowler_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MATCH::MatchPlayer*>(
      &::MATCH::_MatchPlayer_default_instance_);
}
inline const ::MATCH::MatchPlayer& MatchModel::selectedbowler() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.selectedBowler)
  return _internal_selectedbowler();
}
inline void MatchModel::unsafe_arena_set_allocated_selectedbowler(
    ::MATCH::MatchPlayer* selectedbowler) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selectedbowler_);
  }
  selectedbowler_ = selectedbowler;
  if (selectedbowler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MATCH.MatchModel.selectedBowler)
}
inline ::MATCH::MatchPlayer* MatchModel::release_selectedbowler() {
  auto temp = unsafe_arena_release_selectedbowler();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MATCH::MatchPlayer* MatchModel::unsafe_arena_release_selectedbowler() {
  // @@protoc_insertion_point(field_release:MATCH.MatchModel.selectedBowler)
  
  ::MATCH::MatchPlayer* temp = selectedbowler_;
  selectedbowler_ = nullptr;
  return temp;
}
inline ::MATCH::MatchPlayer* MatchModel::_internal_mutable_selectedbowler() {
  
  if (selectedbowler_ == nullptr) {
    auto* p = CreateMaybeMessage<::MATCH::MatchPlayer>(GetArena());
    selectedbowler_ = p;
  }
  return selectedbowler_;
}
inline ::MATCH::MatchPlayer* MatchModel::mutable_selectedbowler() {
  // @@protoc_insertion_point(field_mutable:MATCH.MatchModel.selectedBowler)
  return _internal_mutable_selectedbowler();
}
inline void MatchModel::set_allocated_selectedbowler(::MATCH::MatchPlayer* selectedbowler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selectedbowler_;
  }
  if (selectedbowler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selectedbowler);
    if (message_arena != submessage_arena) {
      selectedbowler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selectedbowler, submessage_arena);
    }
    
  } else {
    
  }
  selectedbowler_ = selectedbowler;
  // @@protoc_insertion_point(field_set_allocated:MATCH.MatchModel.selectedBowler)
}

// .PAYLOAD.Events previousEvent = 16;
inline void MatchModel::clear_previousevent() {
  previousevent_ = 0;
}
inline ::PAYLOAD::Events MatchModel::_internal_previousevent() const {
  return static_cast< ::PAYLOAD::Events >(previousevent_);
}
inline ::PAYLOAD::Events MatchModel::previousevent() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.previousEvent)
  return _internal_previousevent();
}
inline void MatchModel::_internal_set_previousevent(::PAYLOAD::Events value) {
  
  previousevent_ = value;
}
inline void MatchModel::set_previousevent(::PAYLOAD::Events value) {
  _internal_set_previousevent(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.previousEvent)
}

// int64 stateStartTime = 17;
inline void MatchModel::clear_statestarttime() {
  statestarttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchModel::_internal_statestarttime() const {
  return statestarttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchModel::statestarttime() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.stateStartTime)
  return _internal_statestarttime();
}
inline void MatchModel::_internal_set_statestarttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  statestarttime_ = value;
}
inline void MatchModel::set_statestarttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_statestarttime(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.stateStartTime)
}

// int64 both_disconnect_time_point = 18;
inline void MatchModel::clear_both_disconnect_time_point() {
  both_disconnect_time_point_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchModel::_internal_both_disconnect_time_point() const {
  return both_disconnect_time_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchModel::both_disconnect_time_point() const {
  // @@protoc_insertion_point(field_get:MATCH.MatchModel.both_disconnect_time_point)
  return _internal_both_disconnect_time_point();
}
inline void MatchModel::_internal_set_both_disconnect_time_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  both_disconnect_time_point_ = value;
}
inline void MatchModel::set_both_disconnect_time_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_both_disconnect_time_point(value);
  // @@protoc_insertion_point(field_set:MATCH.MatchModel.both_disconnect_time_point)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MATCH

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MATCH::M_PlayStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::M_PlayStates>() {
  return ::MATCH::M_PlayStates_descriptor();
}
template <> struct is_proto_enum< ::MATCH::ConnectionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::ConnectionState>() {
  return ::MATCH::ConnectionState_descriptor();
}
template <> struct is_proto_enum< ::MATCH::ACK> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::ACK>() {
  return ::MATCH::ACK_descriptor();
}
template <> struct is_proto_enum< ::MATCH::JoinStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::JoinStates>() {
  return ::MATCH::JoinStates_descriptor();
}
template <> struct is_proto_enum< ::MATCH::BallStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::BallStates>() {
  return ::MATCH::BallStates_descriptor();
}
template <> struct is_proto_enum< ::MATCH::Brackets> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::Brackets>() {
  return ::MATCH::Brackets_descriptor();
}
template <> struct is_proto_enum< ::MATCH::Skulls> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::Skulls>() {
  return ::MATCH::Skulls_descriptor();
}
template <> struct is_proto_enum< ::MATCH::SA> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::SA>() {
  return ::MATCH::SA_descriptor();
}
template <> struct is_proto_enum< ::MATCH::Strike> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MATCH::Strike>() {
  return ::MATCH::Strike_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_match_2eproto
