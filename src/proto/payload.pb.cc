// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#include "payload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeBoosts_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CurrentBall_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipmentInfo_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Inning_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Match_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassiveInfo_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Player_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShotsPossible_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TBall_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TResult_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TSaInfo_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TShot_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UserData_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfo_payload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_payload_2eproto;
namespace PAYLOAD {
class PayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payload> _instance;
} _Payload_default_instance_;
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class UserDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserData> _instance;
} _UserData_default_instance_;
class PassiveInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PassiveInfo> _instance;
} _PassiveInfo_default_instance_;
class EquipmentInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquipmentInfo> _instance;
} _EquipmentInfo_default_instance_;
class AttributeBoostsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttributeBoosts> _instance;
} _AttributeBoosts_default_instance_;
class TShotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TShot> _instance;
} _TShot_default_instance_;
class TSaInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TSaInfo> _instance;
} _TSaInfo_default_instance_;
class TResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TResult> _instance;
} _TResult_default_instance_;
class ShotsPossibleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShotsPossible> _instance;
} _ShotsPossible_default_instance_;
class TBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TBall> _instance;
} _TBall_default_instance_;
class PlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player> _instance;
} _Player_default_instance_;
class InningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inning> _instance;
} _Inning_default_instance_;
class MatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Match> _instance;
} _Match_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerInfo> _instance;
} _PlayerInfo_default_instance_;
class CurrentBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentBall> _instance;
} _CurrentBall_default_instance_;
}  // namespace PAYLOAD
static void InitDefaultsscc_info_AttributeBoosts_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_AttributeBoosts_default_instance_;
    new (ptr) ::PAYLOAD::AttributeBoosts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::AttributeBoosts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeBoosts_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttributeBoosts_payload_2eproto}, {}};

static void InitDefaultsscc_info_CurrentBall_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_CurrentBall_default_instance_;
    new (ptr) ::PAYLOAD::CurrentBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::CurrentBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CurrentBall_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CurrentBall_payload_2eproto}, {
      &scc_info_TBall_payload_2eproto.base,
      &scc_info_TShot_payload_2eproto.base,
      &scc_info_TResult_payload_2eproto.base,}};

static void InitDefaultsscc_info_EquipmentInfo_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_EquipmentInfo_default_instance_;
    new (ptr) ::PAYLOAD::EquipmentInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::EquipmentInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipmentInfo_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EquipmentInfo_payload_2eproto}, {}};

static void InitDefaultsscc_info_Inning_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_Inning_default_instance_;
    new (ptr) ::PAYLOAD::Inning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::Inning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Inning_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Inning_payload_2eproto}, {}};

static void InitDefaultsscc_info_Match_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_Match_default_instance_;
    new (ptr) ::PAYLOAD::Match();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::Match::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Match_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Match_payload_2eproto}, {
      &scc_info_UserInfo_payload_2eproto.base,
      &scc_info_Inning_payload_2eproto.base,
      &scc_info_CurrentBall_payload_2eproto.base,
      &scc_info_TResult_payload_2eproto.base,}};

static void InitDefaultsscc_info_PassiveInfo_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_PassiveInfo_default_instance_;
    new (ptr) ::PAYLOAD::PassiveInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::PassiveInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PassiveInfo_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PassiveInfo_payload_2eproto}, {}};

static void InitDefaultsscc_info_Payload_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_Payload_default_instance_;
    new (ptr) ::PAYLOAD::Payload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::Payload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Payload_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Payload_payload_2eproto}, {
      &scc_info_UserData_payload_2eproto.base,
      &scc_info_Match_payload_2eproto.base,
      &scc_info_Version_payload_2eproto.base,}};

static void InitDefaultsscc_info_Player_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_Player_default_instance_;
    new (ptr) ::PAYLOAD::Player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::Player::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Player_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Player_payload_2eproto}, {}};

static void InitDefaultsscc_info_PlayerInfo_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_PlayerInfo_default_instance_;
    new (ptr) ::PAYLOAD::PlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::PlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerInfo_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerInfo_payload_2eproto}, {}};

static void InitDefaultsscc_info_ShotsPossible_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_ShotsPossible_default_instance_;
    new (ptr) ::PAYLOAD::ShotsPossible();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::ShotsPossible::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShotsPossible_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShotsPossible_payload_2eproto}, {}};

static void InitDefaultsscc_info_TBall_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_TBall_default_instance_;
    new (ptr) ::PAYLOAD::TBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::TBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TBall_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TBall_payload_2eproto}, {
      &scc_info_ShotsPossible_payload_2eproto.base,}};

static void InitDefaultsscc_info_TResult_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_TResult_default_instance_;
    new (ptr) ::PAYLOAD::TResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::TResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TResult_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TResult_payload_2eproto}, {
      &scc_info_TSaInfo_payload_2eproto.base,}};

static void InitDefaultsscc_info_TSaInfo_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_TSaInfo_default_instance_;
    new (ptr) ::PAYLOAD::TSaInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::TSaInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TSaInfo_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TSaInfo_payload_2eproto}, {}};

static void InitDefaultsscc_info_TShot_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_TShot_default_instance_;
    new (ptr) ::PAYLOAD::TShot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::TShot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TShot_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TShot_payload_2eproto}, {}};

static void InitDefaultsscc_info_UserData_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_UserData_default_instance_;
    new (ptr) ::PAYLOAD::UserData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::UserData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_UserData_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_UserData_payload_2eproto}, {
      &scc_info_Player_payload_2eproto.base,
      &scc_info_TBall_payload_2eproto.base,
      &scc_info_TShot_payload_2eproto.base,
      &scc_info_TResult_payload_2eproto.base,
      &scc_info_PassiveInfo_payload_2eproto.base,
      &scc_info_EquipmentInfo_payload_2eproto.base,
      &scc_info_AttributeBoosts_payload_2eproto.base,}};

static void InitDefaultsscc_info_UserInfo_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_UserInfo_default_instance_;
    new (ptr) ::PAYLOAD::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserInfo_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserInfo_payload_2eproto}, {
      &scc_info_PlayerInfo_payload_2eproto.base,}};

static void InitDefaultsscc_info_Version_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PAYLOAD::_Version_default_instance_;
    new (ptr) ::PAYLOAD::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PAYLOAD::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_payload_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_payload_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_payload_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_payload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_payload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, event_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, data_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, turn_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, match_state_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, emoji_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, message_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, version_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Payload, for_team_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Version, major_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Version, minor_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Version, patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, userid_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, roomid_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, opponentid_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, msg_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, home_lineup_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, away_lineup_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, playstate_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, batsman_selected_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, bowler_selected_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, balls_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, shots_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, selected_onstrike_batsman_id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, selected_offstrike_batsman_id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, selected_bowler_id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, result_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, selection_timeout_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, player_selection_timeout_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, buffer_for_selection_timeout_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, ping_pong_timeout_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, batsman_mana_filled_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, bowler_mana_filled_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, activated_sa_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, sa_duration_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, is_rps_active_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, onstrike_passives_info_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, offstrike_passives_info_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, bowler_passives_info_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, applied_equipments_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, bowler_attribute_boosts_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, onstrike_attribute_boosts_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, offstrike_attribute_boosts_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, selection_time_remaining_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, max_selection_misses_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, selection_misses_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, oppnent_selection_misses_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, selection_missed_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, oppnent_selection_missed_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, start_innings_timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, start_innings_time_remaining_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserData, match_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PassiveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PassiveInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PassiveInfo, is_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::EquipmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::EquipmentInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::EquipmentInfo, bracket_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::EquipmentInfo, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::AttributeBoosts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::AttributeBoosts, lb_rhb_debuff_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::AttributeBoosts, confidence_boost_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::AttributeBoosts, passive_boost_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::AttributeBoosts, props_boost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, name_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, run_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, bracket_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, probability_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, locked_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, shot_hidden_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TShot, probability_hidden_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TSaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TSaInfo, dead_shot_status_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TSaInfo, batsman_active_sa_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TSaInfo, bowler_active_sa_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TSaInfo, immortal_wicket_but_miss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, total_runs_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, total_balls_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, total_wicket_taken_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, runs_scored_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, original_runs_scored_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, over_ball_number_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, over_number_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, bracket_id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, outcome_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, type_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, anticipation_type_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, inning_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TResult, sa_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::ShotsPossible, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::ShotsPossible, bracket_id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::ShotsPossible, shot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TBall, id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TBall, name_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TBall, value_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TBall, skulls_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::TBall, shots_possible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, character_id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, nickname_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, rarity_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, image_number_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, classification_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, gender_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, power_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, batting_style_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, bowling_style_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, level_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, lineup_number_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, is_out_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, equipment_slots_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, props_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Player, passives_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Inning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Inning, inning_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Inning, runs_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Inning, balls_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Inning, wickets_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Inning, over_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, matchid_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, usersinfo_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, currentinning_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, previousinning_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, current_ball_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, on_strike_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, off_strike_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, bowler_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, previous_event_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, active_bowler_sa_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, active_batsman_sa_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, missed_results_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, current_state_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, expected_event_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, selection_timeout_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, player_selection_timeout_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, buffer_for_selection_timeout_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, winner_team_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, selection_time_remaining_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::Match, reconnection_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, play_state_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, lineup_info_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, total_misses_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, activated_sa_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, sa_duration_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, sa_total_duration_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::UserInfo, mana_fill_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, lineup_number_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, out_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, played_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, runs_scored_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, balls_faced_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, wickets_taken_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, balls_bowled_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::PlayerInfo, runs_conceded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::CurrentBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::CurrentBall, over_ball_number_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::CurrentBall, balls_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::CurrentBall, shots_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::CurrentBall, ball_id_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::CurrentBall, shot_selected_),
  PROTOBUF_FIELD_OFFSET(::PAYLOAD::CurrentBall, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PAYLOAD::Payload)},
  { 13, -1, sizeof(::PAYLOAD::Version)},
  { 21, -1, sizeof(::PAYLOAD::UserData)},
  { 67, -1, sizeof(::PAYLOAD::PassiveInfo)},
  { 74, -1, sizeof(::PAYLOAD::EquipmentInfo)},
  { 82, -1, sizeof(::PAYLOAD::AttributeBoosts)},
  { 91, -1, sizeof(::PAYLOAD::TShot)},
  { 104, -1, sizeof(::PAYLOAD::TSaInfo)},
  { 113, -1, sizeof(::PAYLOAD::TResult)},
  { 131, -1, sizeof(::PAYLOAD::ShotsPossible)},
  { 138, -1, sizeof(::PAYLOAD::TBall)},
  { 148, -1, sizeof(::PAYLOAD::Player)},
  { 168, -1, sizeof(::PAYLOAD::Inning)},
  { 178, -1, sizeof(::PAYLOAD::Match)},
  { 203, -1, sizeof(::PAYLOAD::UserInfo)},
  { 216, -1, sizeof(::PAYLOAD::PlayerInfo)},
  { 229, -1, sizeof(::PAYLOAD::CurrentBall)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_UserData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_PassiveInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_EquipmentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_AttributeBoosts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_TShot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_TSaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_TResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_ShotsPossible_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_TBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_Inning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PAYLOAD::_CurrentBall_default_instance_),
};

const char descriptor_table_protodef_payload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpayload.proto\022\007PAYLOAD\"\241\002\n\007Payload\022\036\n\005"
  "event\030\001 \001(\0162\017.PAYLOAD.Events\022\037\n\004data\030\002 \001"
  "(\0132\021.PAYLOAD.UserData\022 \n\004turn\030\003 \001(\0162\022.PA"
  "YLOAD.TurnState\022#\n\013match_state\030\004 \001(\0132\016.P"
  "AYLOAD.Match\022\035\n\005emoji\030\005 \001(\0162\016.PAYLOAD.Em"
  "oji\022#\n\007message\030\006 \001(\0162\022.PAYLOAD.Messaging"
  "\022!\n\007version\030\007 \001(\0132\020.PAYLOAD.Version\022\'\n\010f"
  "or_team\030\010 \001(\0162\025.PAYLOAD.TeamPosition\"6\n\007"
  "Version\022\r\n\005major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\022\r\n"
  "\005patch\030\003 \001(\005\"\374\n\n\010UserData\022\016\n\006userId\030\001 \001("
  "\t\022\016\n\006roomId\030\002 \001(\t\022\022\n\nopponentId\030\003 \001(\t\022\013\n"
  "\003msg\030\004 \001(\t\022$\n\013home_lineup\030\005 \003(\0132\017.PAYLOA"
  "D.Player\022$\n\013away_lineup\030\006 \003(\0132\017.PAYLOAD."
  "Player\022&\n\tplayState\030\007 \001(\0162\023.PAYLOAD.Play"
  "States\022\030\n\020batsman_selected\030\010 \003(\005\022\027\n\017bowl"
  "er_selected\030\t \001(\005\022\035\n\005balls\030\n \003(\0132\016.PAYLO"
  "AD.TBall\022\035\n\005shots\030\013 \003(\0132\016.PAYLOAD.TShot\022"
  "\n\n\002id\030\014 \001(\005\022$\n\034selected_onstrike_batsman"
  "_id\030\r \001(\005\022%\n\035selected_offstrike_batsman_"
  "id\030\016 \001(\005\022\032\n\022selected_bowler_id\030\017 \001(\005\022 \n\006"
  "result\030\020 \001(\0132\020.PAYLOAD.TResult\022\031\n\021select"
  "ion_timeout\030\021 \001(\005\022 \n\030player_selection_ti"
  "meout\030\022 \001(\005\022$\n\034buffer_for_selection_time"
  "out\030\023 \001(\005\022\031\n\021ping_pong_timeout\030\024 \001(\005\022\033\n\023"
  "batsman_mana_filled\030\025 \001(\005\022\032\n\022bowler_mana"
  "_filled\030\026 \001(\005\022\024\n\014activated_sa\030\027 \001(\005\022\023\n\013s"
  "a_duration\030\030 \001(\005\022\025\n\ris_rps_active\030\031 \001(\010\022"
  "4\n\026onstrike_passives_info\030\032 \003(\0132\024.PAYLOA"
  "D.PassiveInfo\0225\n\027offstrike_passives_info"
  "\030\033 \003(\0132\024.PAYLOAD.PassiveInfo\0222\n\024bowler_p"
  "assives_info\030\034 \003(\0132\024.PAYLOAD.PassiveInfo"
  "\0222\n\022applied_equipments\030\035 \003(\0132\026.PAYLOAD.E"
  "quipmentInfo\0229\n\027bowler_attribute_boosts\030"
  "\036 \001(\0132\030.PAYLOAD.AttributeBoosts\022;\n\031onstr"
  "ike_attribute_boosts\030\037 \001(\0132\030.PAYLOAD.Att"
  "ributeBoosts\022<\n\032offstrike_attribute_boos"
  "ts\030  \001(\0132\030.PAYLOAD.AttributeBoosts\022 \n\030se"
  "lection_time_remaining\030! \001(\005\022\034\n\024max_sele"
  "ction_misses\030\" \001(\005\022\030\n\020selection_misses\030#"
  " \001(\005\022 \n\030oppnent_selection_misses\030$ \001(\005\022\030"
  "\n\020selection_missed\030% \001(\010\022 \n\030oppnent_sele"
  "ction_missed\030& \001(\010\022%\n\035start_innings_time"
  "out_seconds\030\' \001(\005\022$\n\034start_innings_time_"
  "remaining\030( \001(\005\022*\n\014match_result\030) \001(\0162\024."
  "PAYLOAD.MatchResult\",\n\013PassiveInfo\022\n\n\002id"
  "\030\001 \001(\005\022\021\n\tis_active\030\002 \001(\010\"]\n\rEquipmentIn"
  "fo\022\n\n\002id\030\001 \001(\005\022\017\n\007bracket\030\002 \001(\005\022/\n\016class"
  "ification\030\003 \001(\0162\027.PAYLOAD.classification"
  "\"n\n\017AttributeBoosts\022\025\n\rlb_rhb_debuff\030\001 \001"
  "(\001\022\030\n\020confidence_boost\030\002 \001(\001\022\025\n\rpassive_"
  "boost\030\003 \001(\001\022\023\n\013props_boost\030\004 \001(\001\"\225\001\n\005TSh"
  "ot\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003run\030\003 \001("
  "\005\022\017\n\007bracket\030\004 \001(\005\022\023\n\013probability\030\005 \001(\001\022"
  "\016\n\006locked\030\006 \001(\010\022\023\n\013shot_hidden\030\007 \001(\010\022\032\n\022"
  "probability_hidden\030\010 \001(\010\"\223\001\n\007TSaInfo\0221\n\020"
  "dead_shot_status\030\001 \001(\0162\027.PAYLOAD.DeadSho"
  "tStatus\022\031\n\021batsman_active_sa\030\002 \001(\005\022\030\n\020bo"
  "wler_active_sa\030\003 \001(\005\022 \n\030immortal_wicket_"
  "but_miss\030\004 \001(\010\"\212\003\n\007TResult\022\022\n\ntotal_runs"
  "\030\001 \001(\005\022\023\n\013total_balls\030\002 \001(\005\022\032\n\022total_wic"
  "ket_taken\030\003 \001(\005\022\023\n\013runs_scored\030\004 \001(\005\022\034\n\024"
  "original_runs_scored\030\005 \001(\005\022\030\n\020over_ball_"
  "number\030\006 \001(\005\022\023\n\013over_number\030\007 \001(\005\022\022\n\nbra"
  "cket_id\030\010 \001(\005\022&\n\007outcome\030\t \001(\0162\025.PAYLOAD"
  ".ShotOutcomes\022!\n\004type\030\n \001(\0162\023.PAYLOAD.Wi"
  "cketType\0224\n\021anticipation_type\030\013 \001(\0162\031.PA"
  "YLOAD.AnticipationType\022 \n\006inning\030\014 \001(\0162\020"
  ".PAYLOAD.Innings\022!\n\007sa_info\030\r \001(\0132\020.PAYL"
  "OAD.TSaInfo\"4\n\rShotsPossible\022\022\n\nbracket_"
  "id\030\001 \001(\005\022\017\n\007shot_id\030\002 \001(\005\"p\n\005TBall\022\n\n\002id"
  "\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\001\022\016\n\006s"
  "kulls\030\004 \001(\005\022.\n\016shots_possible\030\005 \003(\0132\026.PA"
  "YLOAD.ShotsPossible\"\226\003\n\006Player\022\024\n\014charac"
  "ter_id\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\037\n\006rarity"
  "\030\003 \001(\0162\017.PAYLOAD.rarity\022\024\n\014image_number\030"
  "\004 \001(\005\022/\n\016classification\030\005 \001(\0162\027.PAYLOAD."
  "classification\022\037\n\006gender\030\006 \001(\0162\017.PAYLOAD"
  ".gender\022\r\n\005power\030\007 \001(\005\022-\n\rbatting_style\030"
  "\010 \001(\0162\026.PAYLOAD.batting_style\022-\n\rbowling"
  "_style\030\t \001(\0162\026.PAYLOAD.bowling_style\022\r\n\005"
  "level\030\n \001(\005\022\025\n\rlineup_number\030\013 \001(\005\022\016\n\006is"
  "_out\030\014 \001(\010\022\027\n\017equipment_slots\030\r \003(\005\022\r\n\005p"
  "rops\030\016 \003(\005\022\020\n\010passives\030\017 \003(\005\"m\n\006Inning\022 "
  "\n\006inning\030\001 \001(\0162\020.PAYLOAD.Innings\022\014\n\004runs"
  "\030\002 \001(\005\022\r\n\005balls\030\003 \001(\005\022\017\n\007wickets\030\004 \001(\005\022\023"
  "\n\013over_number\030\005 \001(\005\"\206\005\n\005Match\022\017\n\007matchId"
  "\030\001 \001(\t\022$\n\tusersInfo\030\002 \003(\0132\021.PAYLOAD.User"
  "Info\022&\n\rcurrentInning\030\003 \001(\0132\017.PAYLOAD.In"
  "ning\022\'\n\016previousInning\030\004 \001(\0132\017.PAYLOAD.I"
  "nning\022*\n\014current_ball\030\005 \001(\0132\024.PAYLOAD.Cu"
  "rrentBall\022\021\n\ton_strike\030\006 \001(\005\022\022\n\noff_stri"
  "ke\030\007 \001(\005\022\016\n\006bowler\030\010 \001(\005\022\'\n\016previous_eve"
  "nt\030\t \001(\0162\017.PAYLOAD.Events\022\030\n\020active_bowl"
  "er_sa\030\n \001(\005\022\031\n\021active_batsman_sa\030\013 \001(\005\022("
  "\n\016missed_results\030\014 \003(\0132\020.PAYLOAD.TResult"
  "\022+\n\rcurrent_state\030\r \001(\0162\024.PAYLOAD.MatchS"
  "tates\022\'\n\016expected_event\030\016 \001(\0162\017.PAYLOAD."
  "Events\022\031\n\021selection_timeout\030\017 \001(\005\022 \n\030pla"
  "yer_selection_timeout\030\020 \001(\005\022$\n\034buffer_fo"
  "r_selection_timeout\030\021 \001(\005\022\023\n\013winner_team"
  "\030\022 \001(\t\022 \n\030selection_time_remaining\030\023 \001(\005"
  "\022\032\n\022reconnection_count\030\024 \001(\005\"\330\001\n\010UserInf"
  "o\022\n\n\002id\030\001 \001(\t\022\'\n\nplay_state\030\002 \001(\0162\023.PAYL"
  "OAD.PlayStates\022(\n\013lineup_info\030\003 \003(\0132\023.PA"
  "YLOAD.PlayerInfo\022\024\n\014total_misses\030\004 \001(\005\022\024"
  "\n\014activated_sa\030\005 \001(\005\022\023\n\013sa_duration\030\006 \001("
  "\005\022\031\n\021sa_total_duration\030\007 \001(\005\022\021\n\tmana_fil"
  "l\030\010 \001(\005\"\256\001\n\nPlayerInfo\022\025\n\rlineup_number\030"
  "\001 \001(\005\022\013\n\003out\030\002 \001(\010\022\016\n\006played\030\003 \001(\010\022\023\n\013ru"
  "ns_scored\030\004 \001(\005\022\023\n\013balls_faced\030\005 \001(\005\022\025\n\r"
  "wickets_taken\030\006 \001(\005\022\024\n\014balls_bowled\030\007 \001("
  "\005\022\025\n\rruns_conceded\030\010 \001(\005\"\277\001\n\013CurrentBall"
  "\022\030\n\020over_ball_number\030\001 \001(\005\022\035\n\005balls\030\002 \003("
  "\0132\016.PAYLOAD.TBall\022\035\n\005shots\030\003 \003(\0132\016.PAYLO"
  "AD.TShot\022\017\n\007ball_id\030\004 \001(\005\022%\n\rshot_select"
  "ed\030\005 \001(\0132\016.PAYLOAD.TShot\022 \n\006result\030\006 \001(\013"
  "2\020.PAYLOAD.TResult*\222\002\n\013MatchStates\022\013\n\007No"
  "State\020\000\022\023\n\017WaitingForUsers\020\001\022\030\n\024WaitingF"
  "orMatchReady\020\002\022\020\n\014StartInnings\020\003\022\023\n\017Play"
  "erSelection\020\004\022\r\n\tStartBall\020\005\022\021\n\rBallSele"
  "ction\020\006\022\021\n\rShotSelection\020\007\022\020\n\014StateOutco"
  "me\020\010\022\020\n\014StateEndBall\020\t\022\013\n\007EndOver\020\n\022\023\n\017S"
  "tateEndInnings\020\013\022\016\n\nMatchEnded\020\014\022\025\n\021Stat"
  "eReconnecting\020\r*Q\n\tTurnState\022\020\n\014BATTING_"
  "TURN\020\000\022\020\n\014BOWLING_TURN\020\001\022\023\n\017BOTH_USERS_T"
  "URN\020\002\022\013\n\007NO_TURN\020\003*D\n\014TeamPosition\022\026\n\022TE"
  "AM_POSITION_NONE\020\000\022\r\n\tHOME_TEAM\020\001\022\r\n\tAWA"
  "Y_TEAM\020\002*>\n\013MatchResult\022\014\n\010NoResult\020\000\022\013\n"
  "\007Vicotry\020\001\022\n\n\006Defeat\020\002\022\010\n\004Draw\020\003*E\n\016Dead"
  "ShotStatus\022\014\n\010NoStatus\020\000\022\014\n\010Inactive\020\001\022\013"
  "\n\007Success\020\002\022\n\n\006Failed\020\003*0\n\nWicketType\022\013\n"
  "\007Invalid\020\000\022\n\n\006Bowled\020\001\022\t\n\005Catch\020\002*\247\001\n\020An"
  "ticipationType\022\n\n\006NoType\020\000\022\035\n\031HighProbab"
  "ilitySixSuccess\020\001\022\032\n\026HighProbabilitySixM"
  "iss\020\002\022\032\n\026HighProbabilityFourOut\020\003\022\033\n\027Hig"
  "hProbabilityFourMiss\020\004\022\023\n\017AnticipationOu"
  "t\020\005*<\n\014ShotOutcomes\022\r\n\tNoOutcome\020\000\022\007\n\003Hi"
  "t\020\001\022\010\n\004Miss\020\002\022\n\n\006Wicket\020\003*q\n\005Emoji\022\013\n\007No"
  "Emote\020\000\022\016\n\nEmoteHappy\020\001\022\r\n\tEmoteCool\020\002\022\016"
  "\n\nEmoteAngry\020\003\022\r\n\tEmoteYawn\020\004\022\014\n\010EmoteSi"
  "x\020\005\022\017\n\013EmoteWicket\020\006*}\n\tMessaging\022\r\n\tNoM"
  "essage\020\000\022\r\n\tMessageGG\020\001\022\016\n\nMessageWow\020\002\022"
  "\017\n\013MessageNice\020\003\022\017\n\013MessageHaha\020\004\022\021\n\rMes"
  "sageThanks\020\005\022\r\n\tMessageGL\020\006*\?\n\nPlayState"
  "s\022\n\n\006NoPlay\020\000\022\013\n\007Batting\020\001\022\013\n\007Bowling\020\002\022"
  "\013\n\007ForFeit\020\003*O\n\006rarity\022\014\n\010NoRarity\020\000\022\n\n\006"
  "Common\020\001\022\014\n\010Reliable\020\002\022\r\n\tBrilliant\020\003\022\016\n"
  "\nWorldClass\020\004*6\n\016classification\022\013\n\007NoCla"
  "ss\020\000\022\013\n\007Batsman\020\001\022\n\n\006Bowler\020\002*-\n\006gender\022"
  "\r\n\tNonBinary\020\000\022\010\n\004Male\020\001\022\n\n\006Female\020\002*,\n\r"
  "batting_style\022\r\n\tRightHand\020\000\022\014\n\010LeftHand"
  "\020\001*7\n\rbowling_style\022\010\n\004Fast\020\000\022\010\n\004Spin\020\001\022"
  "\022\n\016NoBowlingStyle\020\003* \n\007Innings\022\t\n\005FIRST\020"
  "\000\022\n\n\006SECOND\020\001*\310\016\n\006Events\022\010\n\004NONE\020\000\022\016\n\nOP"
  "P_JOINED\020\001\022\017\n\013MATCH_READY\020\002\022\027\n\023MATCH_CRE"
  "ATE_FAILED\020\003\022\020\n\014JOINED_MATCH\020\004\022\021\n\rMATCH_"
  "STARTED\020\005\022\026\n\022MATCH_SCENE_LOADED\020\006\022\016\n\nTOS"
  "S_START\020\007\022\014\n\010TOSS_ACK\020\010\022\017\n\013TOSS_RESULT\020\t"
  "\022\026\n\022BAT_BALL_SELECTION\020\n\022\031\n\025MATCH_INNING"
  "S_DETAILS\020\013\022\021\n\rINNINGS_INTRO\020\014\022\024\n\020INNING"
  "S_INTO_ACK\020\r\022\030\n\024SERVER_INNINGS_READY\020\016\022\024"
  "\n\020OPENERS_SELECTED\020\017\022\030\n\024CLIENT_INNINGS_R"
  "EADY\020\020\022\021\n\rINNINGS_START\020\021\022\025\n\021INNINGS_STA"
  "RT_ACK\020\022\022\026\n\022START_CURRENT_OVER\020\023\022\024\n\020STAR"
  "T_BALL_EVENT\020\024\022\034\n\030DELIVEIRES_DATA_CREATA"
  "ED\020\025\022\025\n\021DELIVERY_SELECTED\020\026\022\016\n\nSHOTS_DAT"
  "A\020\027\022\024\n\020BRACKET_SELECTED\020\030\022\017\n\013SHOT_RESULT"
  "\020\031\022\030\n\024OUTCOME_UPDATED_DATA\020\032\022\034\n\030SHOT_ANI"
  "MATIONS_FINISHED\020\033\022\032\n\026END_CURRENT_BALL_E"
  "VENT\020\034\022\031\n\025NEXT_BATSMAN_SELECTED\020\035\022\036\n\032END"
  "_CURRENT_BALL_EVENT_ACK\020\036\022\024\n\020END_CURRENT"
  "_OVER\020\037\022\030\n\024NEXT_BOWLER_SELECTED\020 \022\020\n\014END"
  "_OVER_ACK\020!\022\021\n\rPASSIVES_DATA\020\"\022!\n\035UPDATE"
  "_LOCAL_PLAYER_STRENGTHS\020#\022\027\n\023ACTIVATE_BA"
  "TSMAN_SA\020$\022\030\n\024BATSMAN_SA_ACTIVATED\020%\022\026\n\022"
  "ACTIVATE_BOWLER_SA\020&\022\027\n\023BOWLER_SA_ACTIVA"
  "TED\020\'\022\037\n\033BATSMAN_INSTANT_SA_ACTIVATE\020(\022\036"
  "\n\032BOWLER_INSTANT_SA_ACTIVATE\020)\022\031\n\025MATCH_"
  "MISSION_UPDATED\020*\022\030\n\024MATCH_ARENAS_UPDATE"
  "D\020+\022\025\n\021END_FIRST_INNINGS\020,\022\031\n\025END_FIRST_"
  "INNINGS_ACK\020-\022\r\n\tEND_MATCH\020.\022\017\n\013ABORT_MA"
  "TCH\020/\022\021\n\rFORFIET_MATCH\0200\022\020\n\014REMATCH_JOIN"
  "\0201\022\021\n\rREMATCH_START\0202\022\016\n\nTURN_START\0203\022\014\n"
  "\010TURN_END\0204\022\r\n\tTURN_MISS\0205\022\031\n\025DISCONNECT"
  "_TIMER_DATA\0206\022\016\n\nCHAT_EMOJI\0207\022\010\n\004PING\0208\022"
  "!\n\035BATSMAN_INSTANT_SA_INACTIVATE\0209\022 \n\034BO"
  "WLER_INSTANT_SA_INACTIVATE\020D\022\031\n\025FIELDING"
  "_MODE_CHANGED\020;\022\017\n\013DATA_UPDATE\020<\022\024\n\020SPEC"
  "TATOR_JOINED\020=\022\026\n\022SPECTATOR_JOIN_ACK\020>\022\026"
  "\n\022FAST_MODE_SPEED_UP\020\?\022\032\n\026FAST_MODE_SPEE"
  "D_UP_ACK\020@\022\017\n\013THREAD_EXIT\020A\022\013\n\007MESSAGE\020B"
  "\022\021\n\rINNINGS_READY\020C\022\030\n\024START_BALL_EVENT_"
  "ACK\020E\022\r\n\tRECONNECT\020F\022\013\n\007CONNECT\020G\022\017\n\013CON"
  "NECT_ACK\020H\022\r\n\tCONNECTED\020I\022\010\n\004PONG\020J\022\017\n\013R"
  "ECONNECTED\020K\022\016\n\nDISCONNECT\020L\022\020\n\014CREATE_M"
  "ATCH\020M\022\021\n\rEVENT_HISTORY\020N\022\032\n\026MATCH_SCENE"
  "_LOADED_ACK\020O\022\023\n\017MATCH_NOT_FOUND\020P\022\027\n\023UN"
  "SUPPORTED_VERSION\020Q\022\017\n\013REPLAY_SYNC\020R\022\023\n\017"
  "REPLAY_SYNC_ACK\020S\022\022\n\016REPLAY_CONNECT\020T\022\026\n"
  "\022REPLAY_CONNECT_ACK\020U\022\021\n\rREPLAY_RESYNC\020V"
  "B)Z\022pb/mitsuko/payload\252\002\022Superstars.Payl"
  "oadb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_payload_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_payload_2eproto_sccs[17] = {
  &scc_info_AttributeBoosts_payload_2eproto.base,
  &scc_info_CurrentBall_payload_2eproto.base,
  &scc_info_EquipmentInfo_payload_2eproto.base,
  &scc_info_Inning_payload_2eproto.base,
  &scc_info_Match_payload_2eproto.base,
  &scc_info_PassiveInfo_payload_2eproto.base,
  &scc_info_Payload_payload_2eproto.base,
  &scc_info_Player_payload_2eproto.base,
  &scc_info_PlayerInfo_payload_2eproto.base,
  &scc_info_ShotsPossible_payload_2eproto.base,
  &scc_info_TBall_payload_2eproto.base,
  &scc_info_TResult_payload_2eproto.base,
  &scc_info_TSaInfo_payload_2eproto.base,
  &scc_info_TShot_payload_2eproto.base,
  &scc_info_UserData_payload_2eproto.base,
  &scc_info_UserInfo_payload_2eproto.base,
  &scc_info_Version_payload_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_payload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payload_2eproto = {
  false, false, descriptor_table_protodef_payload_2eproto, "payload.proto", 8051,
  &descriptor_table_payload_2eproto_once, descriptor_table_payload_2eproto_sccs, descriptor_table_payload_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_payload_2eproto::offsets,
  file_level_metadata_payload_2eproto, 17, file_level_enum_descriptors_payload_2eproto, file_level_service_descriptors_payload_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_payload_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_payload_2eproto)), true);
namespace PAYLOAD {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[0];
}
bool MatchStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[1];
}
bool TurnState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[2];
}
bool TeamPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[3];
}
bool MatchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeadShotStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[4];
}
bool DeadShotStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WicketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[5];
}
bool WicketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnticipationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[6];
}
bool AnticipationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShotOutcomes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[7];
}
bool ShotOutcomes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Emoji_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[8];
}
bool Emoji_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Messaging_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[9];
}
bool Messaging_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[10];
}
bool PlayStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* rarity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[11];
}
bool rarity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* classification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[12];
}
bool classification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[13];
}
bool gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* batting_style_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[14];
}
bool batting_style_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* bowling_style_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[15];
}
bool bowling_style_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Innings_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[16];
}
bool Innings_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Events_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_payload_2eproto);
  return file_level_enum_descriptors_payload_2eproto[17];
}
bool Events_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Payload::InitAsDefaultInstance() {
  ::PAYLOAD::_Payload_default_instance_._instance.get_mutable()->data_ = const_cast< ::PAYLOAD::UserData*>(
      ::PAYLOAD::UserData::internal_default_instance());
  ::PAYLOAD::_Payload_default_instance_._instance.get_mutable()->match_state_ = const_cast< ::PAYLOAD::Match*>(
      ::PAYLOAD::Match::internal_default_instance());
  ::PAYLOAD::_Payload_default_instance_._instance.get_mutable()->version_ = const_cast< ::PAYLOAD::Version*>(
      ::PAYLOAD::Version::internal_default_instance());
}
class Payload::_Internal {
 public:
  static const ::PAYLOAD::UserData& data(const Payload* msg);
  static const ::PAYLOAD::Match& match_state(const Payload* msg);
  static const ::PAYLOAD::Version& version(const Payload* msg);
};

const ::PAYLOAD::UserData&
Payload::_Internal::data(const Payload* msg) {
  return *msg->data_;
}
const ::PAYLOAD::Match&
Payload::_Internal::match_state(const Payload* msg) {
  return *msg->match_state_;
}
const ::PAYLOAD::Version&
Payload::_Internal::version(const Payload* msg) {
  return *msg->version_;
}
Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PAYLOAD::UserData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_match_state()) {
    match_state_ = new ::PAYLOAD::Match(*from.match_state_);
  } else {
    match_state_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::PAYLOAD::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_team_) -
    reinterpret_cast<char*>(&event_)) + sizeof(for_team_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.Payload)
}

void Payload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payload_payload_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&data_)) + sizeof(for_team_));
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:PAYLOAD.Payload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete match_state_;
  if (this != internal_default_instance()) delete version_;
}

void Payload::ArenaDtor(void* object) {
  Payload* _this = reinterpret_cast< Payload* >(object);
  (void)_this;
}
void Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payload& Payload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payload_payload_2eproto.base);
  return *internal_default_instance();
}


void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArena() == nullptr && match_state_ != nullptr) {
    delete match_state_;
  }
  match_state_ = nullptr;
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&event_)) + sizeof(for_team_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PAYLOAD.Events event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::PAYLOAD::Events>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.UserData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.TurnState turn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turn(static_cast<::PAYLOAD::TurnState>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Match match_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Emoji emoji = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_emoji(static_cast<::PAYLOAD::Emoji>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Messaging message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_message(static_cast<::PAYLOAD::Messaging>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Version version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.TeamPosition for_team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_for_team(static_cast<::PAYLOAD::TeamPosition>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PAYLOAD.Events event = 1;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // .PAYLOAD.UserData data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .PAYLOAD.TurnState turn = 3;
  if (this->turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_turn(), target);
  }

  // .PAYLOAD.Match match_state = 4;
  if (this->has_match_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::match_state(this), target, stream);
  }

  // .PAYLOAD.Emoji emoji = 5;
  if (this->emoji() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_emoji(), target);
  }

  // .PAYLOAD.Messaging message = 6;
  if (this->message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_message(), target);
  }

  // .PAYLOAD.Version version = 7;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::version(this), target, stream);
  }

  // .PAYLOAD.TeamPosition for_team = 8;
  if (this->for_team() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_for_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.Payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PAYLOAD.UserData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .PAYLOAD.Match match_state = 4;
  if (this->has_match_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *match_state_);
  }

  // .PAYLOAD.Version version = 7;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .PAYLOAD.Events event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  // .PAYLOAD.TurnState turn = 3;
  if (this->turn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn());
  }

  // .PAYLOAD.Emoji emoji = 5;
  if (this->emoji() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_emoji());
  }

  // .PAYLOAD.Messaging message = 6;
  if (this->message() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message());
  }

  // .PAYLOAD.TeamPosition for_team = 8;
  if (this->for_team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_for_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.Payload)
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::PAYLOAD::UserData::MergeFrom(from._internal_data());
  }
  if (from.has_match_state()) {
    _internal_mutable_match_state()->::PAYLOAD::Match::MergeFrom(from._internal_match_state());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::PAYLOAD::Version::MergeFrom(from._internal_version());
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
  if (from.turn() != 0) {
    _internal_set_turn(from._internal_turn());
  }
  if (from.emoji() != 0) {
    _internal_set_emoji(from._internal_emoji());
  }
  if (from.message() != 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.for_team() != 0) {
    _internal_set_for_team(from._internal_for_team());
  }
}

void Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload, for_team_)
      + sizeof(Payload::for_team_)
      - PROTOBUF_FIELD_OFFSET(Payload, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.Version)
}

void Version::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:PAYLOAD.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_payload_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_major());
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_patch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from.minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from.patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, patch_)
      + sizeof(Version::patch_)
      - PROTOBUF_FIELD_OFFSET(Version, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserData::InitAsDefaultInstance() {
  ::PAYLOAD::_UserData_default_instance_._instance.get_mutable()->result_ = const_cast< ::PAYLOAD::TResult*>(
      ::PAYLOAD::TResult::internal_default_instance());
  ::PAYLOAD::_UserData_default_instance_._instance.get_mutable()->bowler_attribute_boosts_ = const_cast< ::PAYLOAD::AttributeBoosts*>(
      ::PAYLOAD::AttributeBoosts::internal_default_instance());
  ::PAYLOAD::_UserData_default_instance_._instance.get_mutable()->onstrike_attribute_boosts_ = const_cast< ::PAYLOAD::AttributeBoosts*>(
      ::PAYLOAD::AttributeBoosts::internal_default_instance());
  ::PAYLOAD::_UserData_default_instance_._instance.get_mutable()->offstrike_attribute_boosts_ = const_cast< ::PAYLOAD::AttributeBoosts*>(
      ::PAYLOAD::AttributeBoosts::internal_default_instance());
}
class UserData::_Internal {
 public:
  static const ::PAYLOAD::TResult& result(const UserData* msg);
  static const ::PAYLOAD::AttributeBoosts& bowler_attribute_boosts(const UserData* msg);
  static const ::PAYLOAD::AttributeBoosts& onstrike_attribute_boosts(const UserData* msg);
  static const ::PAYLOAD::AttributeBoosts& offstrike_attribute_boosts(const UserData* msg);
};

const ::PAYLOAD::TResult&
UserData::_Internal::result(const UserData* msg) {
  return *msg->result_;
}
const ::PAYLOAD::AttributeBoosts&
UserData::_Internal::bowler_attribute_boosts(const UserData* msg) {
  return *msg->bowler_attribute_boosts_;
}
const ::PAYLOAD::AttributeBoosts&
UserData::_Internal::onstrike_attribute_boosts(const UserData* msg) {
  return *msg->onstrike_attribute_boosts_;
}
const ::PAYLOAD::AttributeBoosts&
UserData::_Internal::offstrike_attribute_boosts(const UserData* msg) {
  return *msg->offstrike_attribute_boosts_;
}
UserData::UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  home_lineup_(arena),
  away_lineup_(arena),
  batsman_selected_(arena),
  balls_(arena),
  shots_(arena),
  onstrike_passives_info_(arena),
  offstrike_passives_info_(arena),
  bowler_passives_info_(arena),
  applied_equipments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.UserData)
}
UserData::UserData(const UserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      home_lineup_(from.home_lineup_),
      away_lineup_(from.away_lineup_),
      batsman_selected_(from.batsman_selected_),
      balls_(from.balls_),
      shots_(from.shots_),
      onstrike_passives_info_(from.onstrike_passives_info_),
      offstrike_passives_info_(from.offstrike_passives_info_),
      bowler_passives_info_(from.bowler_passives_info_),
      applied_equipments_(from.applied_equipments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_roomid().empty()) {
    roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_roomid(),
      GetArena());
  }
  opponentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opponentid().empty()) {
    opponentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opponentid(),
      GetArena());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
      GetArena());
  }
  if (from._internal_has_result()) {
    result_ = new ::PAYLOAD::TResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_bowler_attribute_boosts()) {
    bowler_attribute_boosts_ = new ::PAYLOAD::AttributeBoosts(*from.bowler_attribute_boosts_);
  } else {
    bowler_attribute_boosts_ = nullptr;
  }
  if (from._internal_has_onstrike_attribute_boosts()) {
    onstrike_attribute_boosts_ = new ::PAYLOAD::AttributeBoosts(*from.onstrike_attribute_boosts_);
  } else {
    onstrike_attribute_boosts_ = nullptr;
  }
  if (from._internal_has_offstrike_attribute_boosts()) {
    offstrike_attribute_boosts_ = new ::PAYLOAD::AttributeBoosts(*from.offstrike_attribute_boosts_);
  } else {
    offstrike_attribute_boosts_ = nullptr;
  }
  ::memcpy(&playstate_, &from.playstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_result_) -
    reinterpret_cast<char*>(&playstate_)) + sizeof(match_result_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.UserData)
}

void UserData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserData_payload_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opponentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_result_) -
      reinterpret_cast<char*>(&result_)) + sizeof(match_result_));
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:PAYLOAD.UserData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opponentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete bowler_attribute_boosts_;
  if (this != internal_default_instance()) delete onstrike_attribute_boosts_;
  if (this != internal_default_instance()) delete offstrike_attribute_boosts_;
}

void UserData::ArenaDtor(void* object) {
  UserData* _this = reinterpret_cast< UserData* >(object);
  (void)_this;
}
void UserData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserData& UserData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserData_payload_2eproto.base);
  return *internal_default_instance();
}


void UserData::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.UserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_lineup_.Clear();
  away_lineup_.Clear();
  batsman_selected_.Clear();
  balls_.Clear();
  shots_.Clear();
  onstrike_passives_info_.Clear();
  offstrike_passives_info_.Clear();
  bowler_passives_info_.Clear();
  applied_equipments_.Clear();
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  roomid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opponentid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && bowler_attribute_boosts_ != nullptr) {
    delete bowler_attribute_boosts_;
  }
  bowler_attribute_boosts_ = nullptr;
  if (GetArena() == nullptr && onstrike_attribute_boosts_ != nullptr) {
    delete onstrike_attribute_boosts_;
  }
  onstrike_attribute_boosts_ = nullptr;
  if (GetArena() == nullptr && offstrike_attribute_boosts_ != nullptr) {
    delete offstrike_attribute_boosts_;
  }
  offstrike_attribute_boosts_ = nullptr;
  ::memset(&playstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_result_) -
      reinterpret_cast<char*>(&playstate_)) + sizeof(match_result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.UserData.userId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_roomid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.UserData.roomId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string opponentId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_opponentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.UserData.opponentId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.UserData.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.Player home_lineup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_home_lineup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.Player away_lineup = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_away_lineup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.PlayStates playState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playstate(static_cast<::PAYLOAD::PlayStates>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 batsman_selected = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_batsman_selected(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_batsman_selected(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bowler_selected = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          bowler_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.TBall balls = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.TShot shots = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selected_onstrike_batsman_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          selected_onstrike_batsman_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selected_offstrike_batsman_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          selected_offstrike_batsman_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selected_bowler_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          selected_bowler_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.TResult result = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selection_timeout = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          selection_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_selection_timeout = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          player_selection_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buffer_for_selection_timeout = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          buffer_for_selection_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ping_pong_timeout = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ping_pong_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batsman_mana_filled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          batsman_mana_filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bowler_mana_filled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          bowler_mana_filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated_sa = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          activated_sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sa_duration = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          sa_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_rps_active = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          is_rps_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.PassiveInfo onstrike_passives_info = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_onstrike_passives_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.PassiveInfo offstrike_passives_info = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_offstrike_passives_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.PassiveInfo bowler_passives_info = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bowler_passives_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.EquipmentInfo applied_equipments = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_applied_equipments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.AttributeBoosts bowler_attribute_boosts = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_bowler_attribute_boosts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.AttributeBoosts onstrike_attribute_boosts = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_onstrike_attribute_boosts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.AttributeBoosts offstrike_attribute_boosts = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_offstrike_attribute_boosts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selection_time_remaining = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          selection_time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_selection_misses = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_selection_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selection_misses = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          selection_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 oppnent_selection_misses = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oppnent_selection_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool selection_missed = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          selection_missed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool oppnent_selection_missed = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          oppnent_selection_missed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_innings_timeout_seconds = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          start_innings_timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start_innings_time_remaining = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          start_innings_time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.MatchResult match_result = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_result(static_cast<::PAYLOAD::MatchResult>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.UserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userId = 1;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.UserData.userId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string roomId = 2;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.UserData.roomId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomid(), target);
  }

  // string opponentId = 3;
  if (this->opponentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opponentid().data(), static_cast<int>(this->_internal_opponentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.UserData.opponentId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_opponentid(), target);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.UserData.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  // repeated .PAYLOAD.Player home_lineup = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_home_lineup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_home_lineup(i), target, stream);
  }

  // repeated .PAYLOAD.Player away_lineup = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_away_lineup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_away_lineup(i), target, stream);
  }

  // .PAYLOAD.PlayStates playState = 7;
  if (this->playstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_playstate(), target);
  }

  // repeated int32 batsman_selected = 8;
  {
    int byte_size = _batsman_selected_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_batsman_selected(), byte_size, target);
    }
  }

  // int32 bowler_selected = 9;
  if (this->bowler_selected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_bowler_selected(), target);
  }

  // repeated .PAYLOAD.TBall balls = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_balls(i), target, stream);
  }

  // repeated .PAYLOAD.TShot shots = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_shots(i), target, stream);
  }

  // int32 id = 12;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_id(), target);
  }

  // int32 selected_onstrike_batsman_id = 13;
  if (this->selected_onstrike_batsman_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_selected_onstrike_batsman_id(), target);
  }

  // int32 selected_offstrike_batsman_id = 14;
  if (this->selected_offstrike_batsman_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_selected_offstrike_batsman_id(), target);
  }

  // int32 selected_bowler_id = 15;
  if (this->selected_bowler_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_selected_bowler_id(), target);
  }

  // .PAYLOAD.TResult result = 16;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::result(this), target, stream);
  }

  // int32 selection_timeout = 17;
  if (this->selection_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_selection_timeout(), target);
  }

  // int32 player_selection_timeout = 18;
  if (this->player_selection_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_player_selection_timeout(), target);
  }

  // int32 buffer_for_selection_timeout = 19;
  if (this->buffer_for_selection_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_buffer_for_selection_timeout(), target);
  }

  // int32 ping_pong_timeout = 20;
  if (this->ping_pong_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_ping_pong_timeout(), target);
  }

  // int32 batsman_mana_filled = 21;
  if (this->batsman_mana_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_batsman_mana_filled(), target);
  }

  // int32 bowler_mana_filled = 22;
  if (this->bowler_mana_filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_bowler_mana_filled(), target);
  }

  // int32 activated_sa = 23;
  if (this->activated_sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_activated_sa(), target);
  }

  // int32 sa_duration = 24;
  if (this->sa_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_sa_duration(), target);
  }

  // bool is_rps_active = 25;
  if (this->is_rps_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_rps_active(), target);
  }

  // repeated .PAYLOAD.PassiveInfo onstrike_passives_info = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_onstrike_passives_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_onstrike_passives_info(i), target, stream);
  }

  // repeated .PAYLOAD.PassiveInfo offstrike_passives_info = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_offstrike_passives_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_offstrike_passives_info(i), target, stream);
  }

  // repeated .PAYLOAD.PassiveInfo bowler_passives_info = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bowler_passives_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_bowler_passives_info(i), target, stream);
  }

  // repeated .PAYLOAD.EquipmentInfo applied_equipments = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applied_equipments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_applied_equipments(i), target, stream);
  }

  // .PAYLOAD.AttributeBoosts bowler_attribute_boosts = 30;
  if (this->has_bowler_attribute_boosts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::bowler_attribute_boosts(this), target, stream);
  }

  // .PAYLOAD.AttributeBoosts onstrike_attribute_boosts = 31;
  if (this->has_onstrike_attribute_boosts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::onstrike_attribute_boosts(this), target, stream);
  }

  // .PAYLOAD.AttributeBoosts offstrike_attribute_boosts = 32;
  if (this->has_offstrike_attribute_boosts()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::offstrike_attribute_boosts(this), target, stream);
  }

  // int32 selection_time_remaining = 33;
  if (this->selection_time_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_selection_time_remaining(), target);
  }

  // int32 max_selection_misses = 34;
  if (this->max_selection_misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_max_selection_misses(), target);
  }

  // int32 selection_misses = 35;
  if (this->selection_misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_selection_misses(), target);
  }

  // int32 oppnent_selection_misses = 36;
  if (this->oppnent_selection_misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_oppnent_selection_misses(), target);
  }

  // bool selection_missed = 37;
  if (this->selection_missed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_selection_missed(), target);
  }

  // bool oppnent_selection_missed = 38;
  if (this->oppnent_selection_missed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_oppnent_selection_missed(), target);
  }

  // int32 start_innings_timeout_seconds = 39;
  if (this->start_innings_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_start_innings_timeout_seconds(), target);
  }

  // int32 start_innings_time_remaining = 40;
  if (this->start_innings_time_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_start_innings_time_remaining(), target);
  }

  // .PAYLOAD.MatchResult match_result = 41;
  if (this->match_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      41, this->_internal_match_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.UserData)
  return target;
}

size_t UserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.UserData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PAYLOAD.Player home_lineup = 5;
  total_size += 1UL * this->_internal_home_lineup_size();
  for (const auto& msg : this->home_lineup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.Player away_lineup = 6;
  total_size += 1UL * this->_internal_away_lineup_size();
  for (const auto& msg : this->away_lineup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 batsman_selected = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->batsman_selected_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _batsman_selected_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .PAYLOAD.TBall balls = 10;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.TShot shots = 11;
  total_size += 1UL * this->_internal_shots_size();
  for (const auto& msg : this->shots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.PassiveInfo onstrike_passives_info = 26;
  total_size += 2UL * this->_internal_onstrike_passives_info_size();
  for (const auto& msg : this->onstrike_passives_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.PassiveInfo offstrike_passives_info = 27;
  total_size += 2UL * this->_internal_offstrike_passives_info_size();
  for (const auto& msg : this->offstrike_passives_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.PassiveInfo bowler_passives_info = 28;
  total_size += 2UL * this->_internal_bowler_passives_info_size();
  for (const auto& msg : this->bowler_passives_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.EquipmentInfo applied_equipments = 29;
  total_size += 2UL * this->_internal_applied_equipments_size();
  for (const auto& msg : this->applied_equipments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string roomId = 2;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string opponentId = 3;
  if (this->opponentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opponentid());
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .PAYLOAD.TResult result = 16;
  if (this->has_result()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .PAYLOAD.AttributeBoosts bowler_attribute_boosts = 30;
  if (this->has_bowler_attribute_boosts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bowler_attribute_boosts_);
  }

  // .PAYLOAD.AttributeBoosts onstrike_attribute_boosts = 31;
  if (this->has_onstrike_attribute_boosts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onstrike_attribute_boosts_);
  }

  // .PAYLOAD.AttributeBoosts offstrike_attribute_boosts = 32;
  if (this->has_offstrike_attribute_boosts()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offstrike_attribute_boosts_);
  }

  // .PAYLOAD.PlayStates playState = 7;
  if (this->playstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playstate());
  }

  // int32 bowler_selected = 9;
  if (this->bowler_selected() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bowler_selected());
  }

  // int32 id = 12;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 selected_onstrike_batsman_id = 13;
  if (this->selected_onstrike_batsman_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selected_onstrike_batsman_id());
  }

  // int32 selected_offstrike_batsman_id = 14;
  if (this->selected_offstrike_batsman_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selected_offstrike_batsman_id());
  }

  // int32 selected_bowler_id = 15;
  if (this->selected_bowler_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selected_bowler_id());
  }

  // int32 selection_timeout = 17;
  if (this->selection_timeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selection_timeout());
  }

  // int32 player_selection_timeout = 18;
  if (this->player_selection_timeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_selection_timeout());
  }

  // int32 buffer_for_selection_timeout = 19;
  if (this->buffer_for_selection_timeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffer_for_selection_timeout());
  }

  // int32 ping_pong_timeout = 20;
  if (this->ping_pong_timeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ping_pong_timeout());
  }

  // int32 batsman_mana_filled = 21;
  if (this->batsman_mana_filled() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batsman_mana_filled());
  }

  // int32 bowler_mana_filled = 22;
  if (this->bowler_mana_filled() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bowler_mana_filled());
  }

  // int32 activated_sa = 23;
  if (this->activated_sa() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated_sa());
  }

  // int32 sa_duration = 24;
  if (this->sa_duration() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sa_duration());
  }

  // int32 selection_time_remaining = 33;
  if (this->selection_time_remaining() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selection_time_remaining());
  }

  // bool is_rps_active = 25;
  if (this->is_rps_active() != 0) {
    total_size += 2 + 1;
  }

  // bool selection_missed = 37;
  if (this->selection_missed() != 0) {
    total_size += 2 + 1;
  }

  // bool oppnent_selection_missed = 38;
  if (this->oppnent_selection_missed() != 0) {
    total_size += 2 + 1;
  }

  // int32 max_selection_misses = 34;
  if (this->max_selection_misses() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_selection_misses());
  }

  // int32 selection_misses = 35;
  if (this->selection_misses() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selection_misses());
  }

  // int32 oppnent_selection_misses = 36;
  if (this->oppnent_selection_misses() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_oppnent_selection_misses());
  }

  // int32 start_innings_timeout_seconds = 39;
  if (this->start_innings_timeout_seconds() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_innings_timeout_seconds());
  }

  // int32 start_innings_time_remaining = 40;
  if (this->start_innings_time_remaining() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_innings_time_remaining());
  }

  // .PAYLOAD.MatchResult match_result = 41;
  if (this->match_result() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.UserData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.UserData)
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  home_lineup_.MergeFrom(from.home_lineup_);
  away_lineup_.MergeFrom(from.away_lineup_);
  batsman_selected_.MergeFrom(from.batsman_selected_);
  balls_.MergeFrom(from.balls_);
  shots_.MergeFrom(from.shots_);
  onstrike_passives_info_.MergeFrom(from.onstrike_passives_info_);
  offstrike_passives_info_.MergeFrom(from.offstrike_passives_info_);
  bowler_passives_info_.MergeFrom(from.bowler_passives_info_);
  applied_equipments_.MergeFrom(from.applied_equipments_);
  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.roomid().size() > 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.opponentid().size() > 0) {
    _internal_set_opponentid(from._internal_opponentid());
  }
  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::PAYLOAD::TResult::MergeFrom(from._internal_result());
  }
  if (from.has_bowler_attribute_boosts()) {
    _internal_mutable_bowler_attribute_boosts()->::PAYLOAD::AttributeBoosts::MergeFrom(from._internal_bowler_attribute_boosts());
  }
  if (from.has_onstrike_attribute_boosts()) {
    _internal_mutable_onstrike_attribute_boosts()->::PAYLOAD::AttributeBoosts::MergeFrom(from._internal_onstrike_attribute_boosts());
  }
  if (from.has_offstrike_attribute_boosts()) {
    _internal_mutable_offstrike_attribute_boosts()->::PAYLOAD::AttributeBoosts::MergeFrom(from._internal_offstrike_attribute_boosts());
  }
  if (from.playstate() != 0) {
    _internal_set_playstate(from._internal_playstate());
  }
  if (from.bowler_selected() != 0) {
    _internal_set_bowler_selected(from._internal_bowler_selected());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.selected_onstrike_batsman_id() != 0) {
    _internal_set_selected_onstrike_batsman_id(from._internal_selected_onstrike_batsman_id());
  }
  if (from.selected_offstrike_batsman_id() != 0) {
    _internal_set_selected_offstrike_batsman_id(from._internal_selected_offstrike_batsman_id());
  }
  if (from.selected_bowler_id() != 0) {
    _internal_set_selected_bowler_id(from._internal_selected_bowler_id());
  }
  if (from.selection_timeout() != 0) {
    _internal_set_selection_timeout(from._internal_selection_timeout());
  }
  if (from.player_selection_timeout() != 0) {
    _internal_set_player_selection_timeout(from._internal_player_selection_timeout());
  }
  if (from.buffer_for_selection_timeout() != 0) {
    _internal_set_buffer_for_selection_timeout(from._internal_buffer_for_selection_timeout());
  }
  if (from.ping_pong_timeout() != 0) {
    _internal_set_ping_pong_timeout(from._internal_ping_pong_timeout());
  }
  if (from.batsman_mana_filled() != 0) {
    _internal_set_batsman_mana_filled(from._internal_batsman_mana_filled());
  }
  if (from.bowler_mana_filled() != 0) {
    _internal_set_bowler_mana_filled(from._internal_bowler_mana_filled());
  }
  if (from.activated_sa() != 0) {
    _internal_set_activated_sa(from._internal_activated_sa());
  }
  if (from.sa_duration() != 0) {
    _internal_set_sa_duration(from._internal_sa_duration());
  }
  if (from.selection_time_remaining() != 0) {
    _internal_set_selection_time_remaining(from._internal_selection_time_remaining());
  }
  if (from.is_rps_active() != 0) {
    _internal_set_is_rps_active(from._internal_is_rps_active());
  }
  if (from.selection_missed() != 0) {
    _internal_set_selection_missed(from._internal_selection_missed());
  }
  if (from.oppnent_selection_missed() != 0) {
    _internal_set_oppnent_selection_missed(from._internal_oppnent_selection_missed());
  }
  if (from.max_selection_misses() != 0) {
    _internal_set_max_selection_misses(from._internal_max_selection_misses());
  }
  if (from.selection_misses() != 0) {
    _internal_set_selection_misses(from._internal_selection_misses());
  }
  if (from.oppnent_selection_misses() != 0) {
    _internal_set_oppnent_selection_misses(from._internal_oppnent_selection_misses());
  }
  if (from.start_innings_timeout_seconds() != 0) {
    _internal_set_start_innings_timeout_seconds(from._internal_start_innings_timeout_seconds());
  }
  if (from.start_innings_time_remaining() != 0) {
    _internal_set_start_innings_time_remaining(from._internal_start_innings_time_remaining());
  }
  if (from.match_result() != 0) {
    _internal_set_match_result(from._internal_match_result());
  }
}

void UserData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  return true;
}

void UserData::InternalSwap(UserData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  home_lineup_.InternalSwap(&other->home_lineup_);
  away_lineup_.InternalSwap(&other->away_lineup_);
  batsman_selected_.InternalSwap(&other->batsman_selected_);
  balls_.InternalSwap(&other->balls_);
  shots_.InternalSwap(&other->shots_);
  onstrike_passives_info_.InternalSwap(&other->onstrike_passives_info_);
  offstrike_passives_info_.InternalSwap(&other->offstrike_passives_info_);
  bowler_passives_info_.InternalSwap(&other->bowler_passives_info_);
  applied_equipments_.InternalSwap(&other->applied_equipments_);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  roomid_.Swap(&other->roomid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opponentid_.Swap(&other->opponentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserData, match_result_)
      + sizeof(UserData::match_result_)
      - PROTOBUF_FIELD_OFFSET(UserData, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PassiveInfo::InitAsDefaultInstance() {
}
class PassiveInfo::_Internal {
 public:
};

PassiveInfo::PassiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.PassiveInfo)
}
PassiveInfo::PassiveInfo(const PassiveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.PassiveInfo)
}

void PassiveInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
}

PassiveInfo::~PassiveInfo() {
  // @@protoc_insertion_point(destructor:PAYLOAD.PassiveInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PassiveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PassiveInfo::ArenaDtor(void* object) {
  PassiveInfo* _this = reinterpret_cast< PassiveInfo* >(object);
  (void)_this;
}
void PassiveInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PassiveInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PassiveInfo& PassiveInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PassiveInfo_payload_2eproto.base);
  return *internal_default_instance();
}


void PassiveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.PassiveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PassiveInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PassiveInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.PassiveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.PassiveInfo)
  return target;
}

size_t PassiveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.PassiveInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // bool is_active = 2;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PassiveInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.PassiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PassiveInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PassiveInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.PassiveInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.PassiveInfo)
    MergeFrom(*source);
  }
}

void PassiveInfo::MergeFrom(const PassiveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.PassiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.is_active() != 0) {
    _internal_set_is_active(from._internal_is_active());
  }
}

void PassiveInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.PassiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassiveInfo::CopyFrom(const PassiveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.PassiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassiveInfo::IsInitialized() const {
  return true;
}

void PassiveInfo::InternalSwap(PassiveInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PassiveInfo, is_active_)
      + sizeof(PassiveInfo::is_active_)
      - PROTOBUF_FIELD_OFFSET(PassiveInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PassiveInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EquipmentInfo::InitAsDefaultInstance() {
}
class EquipmentInfo::_Internal {
 public:
};

EquipmentInfo::EquipmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.EquipmentInfo)
}
EquipmentInfo::EquipmentInfo(const EquipmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&id_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.EquipmentInfo)
}

void EquipmentInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
}

EquipmentInfo::~EquipmentInfo() {
  // @@protoc_insertion_point(destructor:PAYLOAD.EquipmentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EquipmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EquipmentInfo::ArenaDtor(void* object) {
  EquipmentInfo* _this = reinterpret_cast< EquipmentInfo* >(object);
  (void)_this;
}
void EquipmentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EquipmentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquipmentInfo& EquipmentInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquipmentInfo_payload_2eproto.base);
  return *internal_default_instance();
}


void EquipmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.EquipmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipmentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bracket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bracket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_classification(static_cast<::PAYLOAD::classification>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquipmentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.EquipmentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 bracket = 2;
  if (this->bracket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bracket(), target);
  }

  // .PAYLOAD.classification classification = 3;
  if (this->classification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_classification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.EquipmentInfo)
  return target;
}

size_t EquipmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.EquipmentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 bracket = 2;
  if (this->bracket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bracket());
  }

  // .PAYLOAD.classification classification = 3;
  if (this->classification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_classification());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipmentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.EquipmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipmentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquipmentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.EquipmentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.EquipmentInfo)
    MergeFrom(*source);
  }
}

void EquipmentInfo::MergeFrom(const EquipmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.EquipmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.bracket() != 0) {
    _internal_set_bracket(from._internal_bracket());
  }
  if (from.classification() != 0) {
    _internal_set_classification(from._internal_classification());
  }
}

void EquipmentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.EquipmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentInfo::CopyFrom(const EquipmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.EquipmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentInfo::IsInitialized() const {
  return true;
}

void EquipmentInfo::InternalSwap(EquipmentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquipmentInfo, classification_)
      + sizeof(EquipmentInfo::classification_)
      - PROTOBUF_FIELD_OFFSET(EquipmentInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipmentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttributeBoosts::InitAsDefaultInstance() {
}
class AttributeBoosts::_Internal {
 public:
};

AttributeBoosts::AttributeBoosts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.AttributeBoosts)
}
AttributeBoosts::AttributeBoosts(const AttributeBoosts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lb_rhb_debuff_, &from.lb_rhb_debuff_,
    static_cast<size_t>(reinterpret_cast<char*>(&props_boost_) -
    reinterpret_cast<char*>(&lb_rhb_debuff_)) + sizeof(props_boost_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.AttributeBoosts)
}

void AttributeBoosts::SharedCtor() {
  ::memset(&lb_rhb_debuff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&props_boost_) -
      reinterpret_cast<char*>(&lb_rhb_debuff_)) + sizeof(props_boost_));
}

AttributeBoosts::~AttributeBoosts() {
  // @@protoc_insertion_point(destructor:PAYLOAD.AttributeBoosts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AttributeBoosts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AttributeBoosts::ArenaDtor(void* object) {
  AttributeBoosts* _this = reinterpret_cast< AttributeBoosts* >(object);
  (void)_this;
}
void AttributeBoosts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AttributeBoosts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeBoosts& AttributeBoosts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttributeBoosts_payload_2eproto.base);
  return *internal_default_instance();
}


void AttributeBoosts::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.AttributeBoosts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lb_rhb_debuff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&props_boost_) -
      reinterpret_cast<char*>(&lb_rhb_debuff_)) + sizeof(props_boost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeBoosts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lb_rhb_debuff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lb_rhb_debuff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double confidence_boost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          confidence_boost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double passive_boost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          passive_boost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double props_boost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          props_boost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttributeBoosts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.AttributeBoosts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lb_rhb_debuff = 1;
  if (!(this->lb_rhb_debuff() <= 0 && this->lb_rhb_debuff() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lb_rhb_debuff(), target);
  }

  // double confidence_boost = 2;
  if (!(this->confidence_boost() <= 0 && this->confidence_boost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_confidence_boost(), target);
  }

  // double passive_boost = 3;
  if (!(this->passive_boost() <= 0 && this->passive_boost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_passive_boost(), target);
  }

  // double props_boost = 4;
  if (!(this->props_boost() <= 0 && this->props_boost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_props_boost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.AttributeBoosts)
  return target;
}

size_t AttributeBoosts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.AttributeBoosts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lb_rhb_debuff = 1;
  if (!(this->lb_rhb_debuff() <= 0 && this->lb_rhb_debuff() >= 0)) {
    total_size += 1 + 8;
  }

  // double confidence_boost = 2;
  if (!(this->confidence_boost() <= 0 && this->confidence_boost() >= 0)) {
    total_size += 1 + 8;
  }

  // double passive_boost = 3;
  if (!(this->passive_boost() <= 0 && this->passive_boost() >= 0)) {
    total_size += 1 + 8;
  }

  // double props_boost = 4;
  if (!(this->props_boost() <= 0 && this->props_boost() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeBoosts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.AttributeBoosts)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeBoosts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttributeBoosts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.AttributeBoosts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.AttributeBoosts)
    MergeFrom(*source);
  }
}

void AttributeBoosts::MergeFrom(const AttributeBoosts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.AttributeBoosts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lb_rhb_debuff() <= 0 && from.lb_rhb_debuff() >= 0)) {
    _internal_set_lb_rhb_debuff(from._internal_lb_rhb_debuff());
  }
  if (!(from.confidence_boost() <= 0 && from.confidence_boost() >= 0)) {
    _internal_set_confidence_boost(from._internal_confidence_boost());
  }
  if (!(from.passive_boost() <= 0 && from.passive_boost() >= 0)) {
    _internal_set_passive_boost(from._internal_passive_boost());
  }
  if (!(from.props_boost() <= 0 && from.props_boost() >= 0)) {
    _internal_set_props_boost(from._internal_props_boost());
  }
}

void AttributeBoosts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.AttributeBoosts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeBoosts::CopyFrom(const AttributeBoosts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.AttributeBoosts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeBoosts::IsInitialized() const {
  return true;
}

void AttributeBoosts::InternalSwap(AttributeBoosts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeBoosts, props_boost_)
      + sizeof(AttributeBoosts::props_boost_)
      - PROTOBUF_FIELD_OFFSET(AttributeBoosts, lb_rhb_debuff_)>(
          reinterpret_cast<char*>(&lb_rhb_debuff_),
          reinterpret_cast<char*>(&other->lb_rhb_debuff_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeBoosts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TShot::InitAsDefaultInstance() {
}
class TShot::_Internal {
 public:
};

TShot::TShot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.TShot)
}
TShot::TShot(const TShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_hidden_) -
    reinterpret_cast<char*>(&id_)) + sizeof(probability_hidden_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.TShot)
}

void TShot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TShot_payload_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_hidden_) -
      reinterpret_cast<char*>(&id_)) + sizeof(probability_hidden_));
}

TShot::~TShot() {
  // @@protoc_insertion_point(destructor:PAYLOAD.TShot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TShot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TShot::ArenaDtor(void* object) {
  TShot* _this = reinterpret_cast< TShot* >(object);
  (void)_this;
}
void TShot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TShot& TShot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TShot_payload_2eproto.base);
  return *internal_default_instance();
}


void TShot::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.TShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_hidden_) -
      reinterpret_cast<char*>(&id_)) + sizeof(probability_hidden_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TShot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.TShot.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 run = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bracket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bracket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double probability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool locked = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shot_hidden = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          shot_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool probability_hidden = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          probability_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TShot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.TShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.TShot.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 run = 3;
  if (this->run() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_run(), target);
  }

  // int32 bracket = 4;
  if (this->bracket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bracket(), target);
  }

  // double probability = 5;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_probability(), target);
  }

  // bool locked = 6;
  if (this->locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_locked(), target);
  }

  // bool shot_hidden = 7;
  if (this->shot_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_shot_hidden(), target);
  }

  // bool probability_hidden = 8;
  if (this->probability_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_probability_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.TShot)
  return target;
}

size_t TShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.TShot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 run = 3;
  if (this->run() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_run());
  }

  // double probability = 5;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 bracket = 4;
  if (this->bracket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bracket());
  }

  // bool locked = 6;
  if (this->locked() != 0) {
    total_size += 1 + 1;
  }

  // bool shot_hidden = 7;
  if (this->shot_hidden() != 0) {
    total_size += 1 + 1;
  }

  // bool probability_hidden = 8;
  if (this->probability_hidden() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TShot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.TShot)
  GOOGLE_DCHECK_NE(&from, this);
  const TShot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TShot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.TShot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.TShot)
    MergeFrom(*source);
  }
}

void TShot::MergeFrom(const TShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.TShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.run() != 0) {
    _internal_set_run(from._internal_run());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    _internal_set_probability(from._internal_probability());
  }
  if (from.bracket() != 0) {
    _internal_set_bracket(from._internal_bracket());
  }
  if (from.locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  if (from.shot_hidden() != 0) {
    _internal_set_shot_hidden(from._internal_shot_hidden());
  }
  if (from.probability_hidden() != 0) {
    _internal_set_probability_hidden(from._internal_probability_hidden());
  }
}

void TShot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.TShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TShot::CopyFrom(const TShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.TShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TShot::IsInitialized() const {
  return true;
}

void TShot::InternalSwap(TShot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TShot, probability_hidden_)
      + sizeof(TShot::probability_hidden_)
      - PROTOBUF_FIELD_OFFSET(TShot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TShot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TSaInfo::InitAsDefaultInstance() {
}
class TSaInfo::_Internal {
 public:
};

TSaInfo::TSaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.TSaInfo)
}
TSaInfo::TSaInfo(const TSaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dead_shot_status_, &from.dead_shot_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&immortal_wicket_but_miss_) -
    reinterpret_cast<char*>(&dead_shot_status_)) + sizeof(immortal_wicket_but_miss_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.TSaInfo)
}

void TSaInfo::SharedCtor() {
  ::memset(&dead_shot_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&immortal_wicket_but_miss_) -
      reinterpret_cast<char*>(&dead_shot_status_)) + sizeof(immortal_wicket_but_miss_));
}

TSaInfo::~TSaInfo() {
  // @@protoc_insertion_point(destructor:PAYLOAD.TSaInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TSaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TSaInfo::ArenaDtor(void* object) {
  TSaInfo* _this = reinterpret_cast< TSaInfo* >(object);
  (void)_this;
}
void TSaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TSaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TSaInfo& TSaInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TSaInfo_payload_2eproto.base);
  return *internal_default_instance();
}


void TSaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.TSaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dead_shot_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&immortal_wicket_but_miss_) -
      reinterpret_cast<char*>(&dead_shot_status_)) + sizeof(immortal_wicket_but_miss_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TSaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PAYLOAD.DeadShotStatus dead_shot_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dead_shot_status(static_cast<::PAYLOAD::DeadShotStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 batsman_active_sa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          batsman_active_sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bowler_active_sa = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bowler_active_sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool immortal_wicket_but_miss = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          immortal_wicket_but_miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TSaInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.TSaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PAYLOAD.DeadShotStatus dead_shot_status = 1;
  if (this->dead_shot_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dead_shot_status(), target);
  }

  // int32 batsman_active_sa = 2;
  if (this->batsman_active_sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_batsman_active_sa(), target);
  }

  // int32 bowler_active_sa = 3;
  if (this->bowler_active_sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bowler_active_sa(), target);
  }

  // bool immortal_wicket_but_miss = 4;
  if (this->immortal_wicket_but_miss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_immortal_wicket_but_miss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.TSaInfo)
  return target;
}

size_t TSaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.TSaInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PAYLOAD.DeadShotStatus dead_shot_status = 1;
  if (this->dead_shot_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dead_shot_status());
  }

  // int32 batsman_active_sa = 2;
  if (this->batsman_active_sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batsman_active_sa());
  }

  // int32 bowler_active_sa = 3;
  if (this->bowler_active_sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bowler_active_sa());
  }

  // bool immortal_wicket_but_miss = 4;
  if (this->immortal_wicket_but_miss() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TSaInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.TSaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TSaInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TSaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.TSaInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.TSaInfo)
    MergeFrom(*source);
  }
}

void TSaInfo::MergeFrom(const TSaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.TSaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dead_shot_status() != 0) {
    _internal_set_dead_shot_status(from._internal_dead_shot_status());
  }
  if (from.batsman_active_sa() != 0) {
    _internal_set_batsman_active_sa(from._internal_batsman_active_sa());
  }
  if (from.bowler_active_sa() != 0) {
    _internal_set_bowler_active_sa(from._internal_bowler_active_sa());
  }
  if (from.immortal_wicket_but_miss() != 0) {
    _internal_set_immortal_wicket_but_miss(from._internal_immortal_wicket_but_miss());
  }
}

void TSaInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.TSaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSaInfo::CopyFrom(const TSaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.TSaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSaInfo::IsInitialized() const {
  return true;
}

void TSaInfo::InternalSwap(TSaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TSaInfo, immortal_wicket_but_miss_)
      + sizeof(TSaInfo::immortal_wicket_but_miss_)
      - PROTOBUF_FIELD_OFFSET(TSaInfo, dead_shot_status_)>(
          reinterpret_cast<char*>(&dead_shot_status_),
          reinterpret_cast<char*>(&other->dead_shot_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TSaInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TResult::InitAsDefaultInstance() {
  ::PAYLOAD::_TResult_default_instance_._instance.get_mutable()->sa_info_ = const_cast< ::PAYLOAD::TSaInfo*>(
      ::PAYLOAD::TSaInfo::internal_default_instance());
}
class TResult::_Internal {
 public:
  static const ::PAYLOAD::TSaInfo& sa_info(const TResult* msg);
};

const ::PAYLOAD::TSaInfo&
TResult::_Internal::sa_info(const TResult* msg) {
  return *msg->sa_info_;
}
TResult::TResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.TResult)
}
TResult::TResult(const TResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sa_info()) {
    sa_info_ = new ::PAYLOAD::TSaInfo(*from.sa_info_);
  } else {
    sa_info_ = nullptr;
  }
  ::memcpy(&total_runs_, &from.total_runs_,
    static_cast<size_t>(reinterpret_cast<char*>(&inning_) -
    reinterpret_cast<char*>(&total_runs_)) + sizeof(inning_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.TResult)
}

void TResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TResult_payload_2eproto.base);
  ::memset(&sa_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inning_) -
      reinterpret_cast<char*>(&sa_info_)) + sizeof(inning_));
}

TResult::~TResult() {
  // @@protoc_insertion_point(destructor:PAYLOAD.TResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sa_info_;
}

void TResult::ArenaDtor(void* object) {
  TResult* _this = reinterpret_cast< TResult* >(object);
  (void)_this;
}
void TResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TResult& TResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TResult_payload_2eproto.base);
  return *internal_default_instance();
}


void TResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.TResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && sa_info_ != nullptr) {
    delete sa_info_;
  }
  sa_info_ = nullptr;
  ::memset(&total_runs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inning_) -
      reinterpret_cast<char*>(&total_runs_)) + sizeof(inning_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_runs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_runs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_balls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_balls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_wicket_taken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_wicket_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runs_scored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          runs_scored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_runs_scored = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          original_runs_scored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 over_ball_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          over_ball_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 over_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          over_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bracket_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bracket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.ShotOutcomes outcome = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_outcome(static_cast<::PAYLOAD::ShotOutcomes>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.WicketType type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::PAYLOAD::WicketType>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.AnticipationType anticipation_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_anticipation_type(static_cast<::PAYLOAD::AnticipationType>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Innings inning = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inning(static_cast<::PAYLOAD::Innings>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.TSaInfo sa_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sa_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.TResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_runs = 1;
  if (this->total_runs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_runs(), target);
  }

  // int32 total_balls = 2;
  if (this->total_balls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_balls(), target);
  }

  // int32 total_wicket_taken = 3;
  if (this->total_wicket_taken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_wicket_taken(), target);
  }

  // int32 runs_scored = 4;
  if (this->runs_scored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_runs_scored(), target);
  }

  // int32 original_runs_scored = 5;
  if (this->original_runs_scored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_original_runs_scored(), target);
  }

  // int32 over_ball_number = 6;
  if (this->over_ball_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_over_ball_number(), target);
  }

  // int32 over_number = 7;
  if (this->over_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_over_number(), target);
  }

  // int32 bracket_id = 8;
  if (this->bracket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_bracket_id(), target);
  }

  // .PAYLOAD.ShotOutcomes outcome = 9;
  if (this->outcome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_outcome(), target);
  }

  // .PAYLOAD.WicketType type = 10;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // .PAYLOAD.AnticipationType anticipation_type = 11;
  if (this->anticipation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_anticipation_type(), target);
  }

  // .PAYLOAD.Innings inning = 12;
  if (this->inning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_inning(), target);
  }

  // .PAYLOAD.TSaInfo sa_info = 13;
  if (this->has_sa_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sa_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.TResult)
  return target;
}

size_t TResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.TResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PAYLOAD.TSaInfo sa_info = 13;
  if (this->has_sa_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sa_info_);
  }

  // int32 total_runs = 1;
  if (this->total_runs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_runs());
  }

  // int32 total_balls = 2;
  if (this->total_balls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_balls());
  }

  // int32 total_wicket_taken = 3;
  if (this->total_wicket_taken() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_wicket_taken());
  }

  // int32 runs_scored = 4;
  if (this->runs_scored() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runs_scored());
  }

  // int32 original_runs_scored = 5;
  if (this->original_runs_scored() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_runs_scored());
  }

  // int32 over_ball_number = 6;
  if (this->over_ball_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_ball_number());
  }

  // int32 over_number = 7;
  if (this->over_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_number());
  }

  // int32 bracket_id = 8;
  if (this->bracket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bracket_id());
  }

  // .PAYLOAD.ShotOutcomes outcome = 9;
  if (this->outcome() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outcome());
  }

  // .PAYLOAD.WicketType type = 10;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .PAYLOAD.AnticipationType anticipation_type = 11;
  if (this->anticipation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_anticipation_type());
  }

  // .PAYLOAD.Innings inning = 12;
  if (this->inning() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inning());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.TResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.TResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.TResult)
    MergeFrom(*source);
  }
}

void TResult::MergeFrom(const TResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.TResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sa_info()) {
    _internal_mutable_sa_info()->::PAYLOAD::TSaInfo::MergeFrom(from._internal_sa_info());
  }
  if (from.total_runs() != 0) {
    _internal_set_total_runs(from._internal_total_runs());
  }
  if (from.total_balls() != 0) {
    _internal_set_total_balls(from._internal_total_balls());
  }
  if (from.total_wicket_taken() != 0) {
    _internal_set_total_wicket_taken(from._internal_total_wicket_taken());
  }
  if (from.runs_scored() != 0) {
    _internal_set_runs_scored(from._internal_runs_scored());
  }
  if (from.original_runs_scored() != 0) {
    _internal_set_original_runs_scored(from._internal_original_runs_scored());
  }
  if (from.over_ball_number() != 0) {
    _internal_set_over_ball_number(from._internal_over_ball_number());
  }
  if (from.over_number() != 0) {
    _internal_set_over_number(from._internal_over_number());
  }
  if (from.bracket_id() != 0) {
    _internal_set_bracket_id(from._internal_bracket_id());
  }
  if (from.outcome() != 0) {
    _internal_set_outcome(from._internal_outcome());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.anticipation_type() != 0) {
    _internal_set_anticipation_type(from._internal_anticipation_type());
  }
  if (from.inning() != 0) {
    _internal_set_inning(from._internal_inning());
  }
}

void TResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.TResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TResult::CopyFrom(const TResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.TResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TResult::IsInitialized() const {
  return true;
}

void TResult::InternalSwap(TResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TResult, inning_)
      + sizeof(TResult::inning_)
      - PROTOBUF_FIELD_OFFSET(TResult, sa_info_)>(
          reinterpret_cast<char*>(&sa_info_),
          reinterpret_cast<char*>(&other->sa_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShotsPossible::InitAsDefaultInstance() {
}
class ShotsPossible::_Internal {
 public:
};

ShotsPossible::ShotsPossible(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.ShotsPossible)
}
ShotsPossible::ShotsPossible(const ShotsPossible& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bracket_id_, &from.bracket_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shot_id_) -
    reinterpret_cast<char*>(&bracket_id_)) + sizeof(shot_id_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.ShotsPossible)
}

void ShotsPossible::SharedCtor() {
  ::memset(&bracket_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shot_id_) -
      reinterpret_cast<char*>(&bracket_id_)) + sizeof(shot_id_));
}

ShotsPossible::~ShotsPossible() {
  // @@protoc_insertion_point(destructor:PAYLOAD.ShotsPossible)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShotsPossible::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShotsPossible::ArenaDtor(void* object) {
  ShotsPossible* _this = reinterpret_cast< ShotsPossible* >(object);
  (void)_this;
}
void ShotsPossible::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShotsPossible::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShotsPossible& ShotsPossible::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShotsPossible_payload_2eproto.base);
  return *internal_default_instance();
}


void ShotsPossible::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.ShotsPossible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bracket_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shot_id_) -
      reinterpret_cast<char*>(&bracket_id_)) + sizeof(shot_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShotsPossible::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bracket_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bracket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          shot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShotsPossible::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.ShotsPossible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bracket_id = 1;
  if (this->bracket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bracket_id(), target);
  }

  // int32 shot_id = 2;
  if (this->shot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.ShotsPossible)
  return target;
}

size_t ShotsPossible::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.ShotsPossible)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bracket_id = 1;
  if (this->bracket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bracket_id());
  }

  // int32 shot_id = 2;
  if (this->shot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShotsPossible::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.ShotsPossible)
  GOOGLE_DCHECK_NE(&from, this);
  const ShotsPossible* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShotsPossible>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.ShotsPossible)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.ShotsPossible)
    MergeFrom(*source);
  }
}

void ShotsPossible::MergeFrom(const ShotsPossible& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.ShotsPossible)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bracket_id() != 0) {
    _internal_set_bracket_id(from._internal_bracket_id());
  }
  if (from.shot_id() != 0) {
    _internal_set_shot_id(from._internal_shot_id());
  }
}

void ShotsPossible::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.ShotsPossible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShotsPossible::CopyFrom(const ShotsPossible& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.ShotsPossible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShotsPossible::IsInitialized() const {
  return true;
}

void ShotsPossible::InternalSwap(ShotsPossible* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShotsPossible, shot_id_)
      + sizeof(ShotsPossible::shot_id_)
      - PROTOBUF_FIELD_OFFSET(ShotsPossible, bracket_id_)>(
          reinterpret_cast<char*>(&bracket_id_),
          reinterpret_cast<char*>(&other->bracket_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShotsPossible::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TBall::InitAsDefaultInstance() {
}
class TBall::_Internal {
 public:
};

TBall::TBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shots_possible_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.TBall)
}
TBall::TBall(const TBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shots_possible_(from.shots_possible_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.TBall)
}

void TBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TBall_payload_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

TBall::~TBall() {
  // @@protoc_insertion_point(destructor:PAYLOAD.TBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TBall::ArenaDtor(void* object) {
  TBall* _this = reinterpret_cast< TBall* >(object);
  (void)_this;
}
void TBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TBall& TBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TBall_payload_2eproto.base);
  return *internal_default_instance();
}


void TBall::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.TBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shots_possible_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.TBall.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 skulls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          skulls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.ShotsPossible shots_possible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shots_possible(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.TBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.TBall.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  // int32 skulls = 4;
  if (this->skulls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_skulls(), target);
  }

  // repeated .PAYLOAD.ShotsPossible shots_possible = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shots_possible_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shots_possible(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.TBall)
  return target;
}

size_t TBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.TBall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PAYLOAD.ShotsPossible shots_possible = 5;
  total_size += 1UL * this->_internal_shots_possible_size();
  for (const auto& msg : this->shots_possible_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 skulls = 4;
  if (this->skulls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skulls());
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.TBall)
  GOOGLE_DCHECK_NE(&from, this);
  const TBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.TBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.TBall)
    MergeFrom(*source);
  }
}

void TBall::MergeFrom(const TBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.TBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shots_possible_.MergeFrom(from.shots_possible_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.skulls() != 0) {
    _internal_set_skulls(from._internal_skulls());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void TBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.TBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBall::CopyFrom(const TBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.TBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBall::IsInitialized() const {
  return true;
}

void TBall::InternalSwap(TBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shots_possible_.InternalSwap(&other->shots_possible_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TBall, value_)
      + sizeof(TBall::value_)
      - PROTOBUF_FIELD_OFFSET(TBall, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Player::InitAsDefaultInstance() {
}
class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equipment_slots_(arena),
  props_(arena),
  passives_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equipment_slots_(from.equipment_slots_),
      props_(from.props_),
      passives_(from.passives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nickname(),
      GetArena());
  }
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(is_out_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.Player)
}

void Player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Player_payload_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(is_out_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:PAYLOAD.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player& Player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Player_payload_2eproto.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equipment_slots_.Clear();
  props_.Clear();
  passives_.Clear();
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(is_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.Player.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.rarity rarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rarity(static_cast<::PAYLOAD::rarity>(val));
        } else goto handle_unusual;
        continue;
      // int32 image_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          image_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.classification classification = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_classification(static_cast<::PAYLOAD::classification>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.gender gender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::PAYLOAD::gender>(val));
        } else goto handle_unusual;
        continue;
      // int32 power = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.batting_style batting_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_batting_style(static_cast<::PAYLOAD::batting_style>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.bowling_style bowling_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bowling_style(static_cast<::PAYLOAD::bowling_style>(val));
        } else goto handle_unusual;
        continue;
      // int32 level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lineup_number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          lineup_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_out = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          is_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 equipment_slots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equipment_slots(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_equipment_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 props = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_props(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_props(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 passives = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_passives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_passives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_character_id(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.Player.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // .PAYLOAD.rarity rarity = 3;
  if (this->rarity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_rarity(), target);
  }

  // int32 image_number = 4;
  if (this->image_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_image_number(), target);
  }

  // .PAYLOAD.classification classification = 5;
  if (this->classification() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_classification(), target);
  }

  // .PAYLOAD.gender gender = 6;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_gender(), target);
  }

  // int32 power = 7;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_power(), target);
  }

  // .PAYLOAD.batting_style batting_style = 8;
  if (this->batting_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_batting_style(), target);
  }

  // .PAYLOAD.bowling_style bowling_style = 9;
  if (this->bowling_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_bowling_style(), target);
  }

  // int32 level = 10;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_level(), target);
  }

  // int32 lineup_number = 11;
  if (this->lineup_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_lineup_number(), target);
  }

  // bool is_out = 12;
  if (this->is_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_out(), target);
  }

  // repeated int32 equipment_slots = 13;
  {
    int byte_size = _equipment_slots_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_equipment_slots(), byte_size, target);
    }
  }

  // repeated int32 props = 14;
  {
    int byte_size = _props_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          14, _internal_props(), byte_size, target);
    }
  }

  // repeated int32 passives = 15;
  {
    int byte_size = _passives_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          15, _internal_passives(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 equipment_slots = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->equipment_slots_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _equipment_slots_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 props = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->props_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _props_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 passives = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->passives_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _passives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character_id());
  }

  // .PAYLOAD.rarity rarity = 3;
  if (this->rarity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rarity());
  }

  // int32 image_number = 4;
  if (this->image_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_image_number());
  }

  // .PAYLOAD.classification classification = 5;
  if (this->classification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_classification());
  }

  // .PAYLOAD.gender gender = 6;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // int32 power = 7;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // .PAYLOAD.batting_style batting_style = 8;
  if (this->batting_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_batting_style());
  }

  // .PAYLOAD.bowling_style bowling_style = 9;
  if (this->bowling_style() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bowling_style());
  }

  // int32 level = 10;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 lineup_number = 11;
  if (this->lineup_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineup_number());
  }

  // bool is_out = 12;
  if (this->is_out() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equipment_slots_.MergeFrom(from.equipment_slots_);
  props_.MergeFrom(from.props_);
  passives_.MergeFrom(from.passives_);
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.rarity() != 0) {
    _internal_set_rarity(from._internal_rarity());
  }
  if (from.image_number() != 0) {
    _internal_set_image_number(from._internal_image_number());
  }
  if (from.classification() != 0) {
    _internal_set_classification(from._internal_classification());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.batting_style() != 0) {
    _internal_set_batting_style(from._internal_batting_style());
  }
  if (from.bowling_style() != 0) {
    _internal_set_bowling_style(from._internal_bowling_style());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.lineup_number() != 0) {
    _internal_set_lineup_number(from._internal_lineup_number());
  }
  if (from.is_out() != 0) {
    _internal_set_is_out(from._internal_is_out());
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equipment_slots_.InternalSwap(&other->equipment_slots_);
  props_.InternalSwap(&other->props_);
  passives_.InternalSwap(&other->passives_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, is_out_)
      + sizeof(Player::is_out_)
      - PROTOBUF_FIELD_OFFSET(Player, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Inning::InitAsDefaultInstance() {
}
class Inning::_Internal {
 public:
};

Inning::Inning(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.Inning)
}
Inning::Inning(const Inning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&inning_, &from.inning_,
    static_cast<size_t>(reinterpret_cast<char*>(&over_number_) -
    reinterpret_cast<char*>(&inning_)) + sizeof(over_number_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.Inning)
}

void Inning::SharedCtor() {
  ::memset(&inning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&over_number_) -
      reinterpret_cast<char*>(&inning_)) + sizeof(over_number_));
}

Inning::~Inning() {
  // @@protoc_insertion_point(destructor:PAYLOAD.Inning)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Inning::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Inning::ArenaDtor(void* object) {
  Inning* _this = reinterpret_cast< Inning* >(object);
  (void)_this;
}
void Inning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Inning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inning& Inning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inning_payload_2eproto.base);
  return *internal_default_instance();
}


void Inning::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.Inning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&inning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&over_number_) -
      reinterpret_cast<char*>(&inning_)) + sizeof(over_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PAYLOAD.Innings inning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inning(static_cast<::PAYLOAD::Innings>(val));
        } else goto handle_unusual;
        continue;
      // int32 runs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          runs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 balls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wickets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wickets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 over_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          over_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Inning::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.Inning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PAYLOAD.Innings inning = 1;
  if (this->inning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inning(), target);
  }

  // int32 runs = 2;
  if (this->runs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_runs(), target);
  }

  // int32 balls = 3;
  if (this->balls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_balls(), target);
  }

  // int32 wickets = 4;
  if (this->wickets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wickets(), target);
  }

  // int32 over_number = 5;
  if (this->over_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_over_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.Inning)
  return target;
}

size_t Inning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.Inning)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PAYLOAD.Innings inning = 1;
  if (this->inning() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inning());
  }

  // int32 runs = 2;
  if (this->runs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runs());
  }

  // int32 balls = 3;
  if (this->balls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_balls());
  }

  // int32 wickets = 4;
  if (this->wickets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wickets());
  }

  // int32 over_number = 5;
  if (this->over_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.Inning)
  GOOGLE_DCHECK_NE(&from, this);
  const Inning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.Inning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.Inning)
    MergeFrom(*source);
  }
}

void Inning::MergeFrom(const Inning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.Inning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.inning() != 0) {
    _internal_set_inning(from._internal_inning());
  }
  if (from.runs() != 0) {
    _internal_set_runs(from._internal_runs());
  }
  if (from.balls() != 0) {
    _internal_set_balls(from._internal_balls());
  }
  if (from.wickets() != 0) {
    _internal_set_wickets(from._internal_wickets());
  }
  if (from.over_number() != 0) {
    _internal_set_over_number(from._internal_over_number());
  }
}

void Inning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.Inning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inning::CopyFrom(const Inning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.Inning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inning::IsInitialized() const {
  return true;
}

void Inning::InternalSwap(Inning* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Inning, over_number_)
      + sizeof(Inning::over_number_)
      - PROTOBUF_FIELD_OFFSET(Inning, inning_)>(
          reinterpret_cast<char*>(&inning_),
          reinterpret_cast<char*>(&other->inning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Inning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Match::InitAsDefaultInstance() {
  ::PAYLOAD::_Match_default_instance_._instance.get_mutable()->currentinning_ = const_cast< ::PAYLOAD::Inning*>(
      ::PAYLOAD::Inning::internal_default_instance());
  ::PAYLOAD::_Match_default_instance_._instance.get_mutable()->previousinning_ = const_cast< ::PAYLOAD::Inning*>(
      ::PAYLOAD::Inning::internal_default_instance());
  ::PAYLOAD::_Match_default_instance_._instance.get_mutable()->current_ball_ = const_cast< ::PAYLOAD::CurrentBall*>(
      ::PAYLOAD::CurrentBall::internal_default_instance());
}
class Match::_Internal {
 public:
  static const ::PAYLOAD::Inning& currentinning(const Match* msg);
  static const ::PAYLOAD::Inning& previousinning(const Match* msg);
  static const ::PAYLOAD::CurrentBall& current_ball(const Match* msg);
};

const ::PAYLOAD::Inning&
Match::_Internal::currentinning(const Match* msg) {
  return *msg->currentinning_;
}
const ::PAYLOAD::Inning&
Match::_Internal::previousinning(const Match* msg) {
  return *msg->previousinning_;
}
const ::PAYLOAD::CurrentBall&
Match::_Internal::current_ball(const Match* msg) {
  return *msg->current_ball_;
}
Match::Match(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  usersinfo_(arena),
  missed_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.Match)
}
Match::Match(const Match& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usersinfo_(from.usersinfo_),
      missed_results_(from.missed_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchid().empty()) {
    matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_matchid(),
      GetArena());
  }
  winner_team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_winner_team().empty()) {
    winner_team_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_winner_team(),
      GetArena());
  }
  if (from._internal_has_currentinning()) {
    currentinning_ = new ::PAYLOAD::Inning(*from.currentinning_);
  } else {
    currentinning_ = nullptr;
  }
  if (from._internal_has_previousinning()) {
    previousinning_ = new ::PAYLOAD::Inning(*from.previousinning_);
  } else {
    previousinning_ = nullptr;
  }
  if (from._internal_has_current_ball()) {
    current_ball_ = new ::PAYLOAD::CurrentBall(*from.current_ball_);
  } else {
    current_ball_ = nullptr;
  }
  ::memcpy(&on_strike_, &from.on_strike_,
    static_cast<size_t>(reinterpret_cast<char*>(&reconnection_count_) -
    reinterpret_cast<char*>(&on_strike_)) + sizeof(reconnection_count_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.Match)
}

void Match::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Match_payload_2eproto.base);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  winner_team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&currentinning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnection_count_) -
      reinterpret_cast<char*>(&currentinning_)) + sizeof(reconnection_count_));
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:PAYLOAD.Match)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Match::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  matchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  winner_team_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete currentinning_;
  if (this != internal_default_instance()) delete previousinning_;
  if (this != internal_default_instance()) delete current_ball_;
}

void Match::ArenaDtor(void* object) {
  Match* _this = reinterpret_cast< Match* >(object);
  (void)_this;
}
void Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Match::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Match& Match::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Match_payload_2eproto.base);
  return *internal_default_instance();
}


void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usersinfo_.Clear();
  missed_results_.Clear();
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  winner_team_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && currentinning_ != nullptr) {
    delete currentinning_;
  }
  currentinning_ = nullptr;
  if (GetArena() == nullptr && previousinning_ != nullptr) {
    delete previousinning_;
  }
  previousinning_ = nullptr;
  if (GetArena() == nullptr && current_ball_ != nullptr) {
    delete current_ball_;
  }
  current_ball_ = nullptr;
  ::memset(&on_strike_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reconnection_count_) -
      reinterpret_cast<char*>(&on_strike_)) + sizeof(reconnection_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Match::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_matchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.Match.matchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.UserInfo usersInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usersinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Inning currentInning = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentinning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Inning previousInning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_previousinning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.CurrentBall current_ball = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 on_strike = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          on_strike_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 off_strike = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          off_strike_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bowler = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bowler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Events previous_event = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_previous_event(static_cast<::PAYLOAD::Events>(val));
        } else goto handle_unusual;
        continue;
      // int32 active_bowler_sa = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          active_bowler_sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 active_batsman_sa = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          active_batsman_sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.TResult missed_results = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missed_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.MatchStates current_state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_current_state(static_cast<::PAYLOAD::MatchStates>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Events expected_event = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_expected_event(static_cast<::PAYLOAD::Events>(val));
        } else goto handle_unusual;
        continue;
      // int32 selection_timeout = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          selection_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_selection_timeout = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          player_selection_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 buffer_for_selection_timeout = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          buffer_for_selection_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string winner_team = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_winner_team();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.Match.winner_team"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 selection_time_remaining = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          selection_time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reconnection_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          reconnection_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Match::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.Match)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchid().data(), static_cast<int>(this->_internal_matchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.Match.matchId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_matchid(), target);
  }

  // repeated .PAYLOAD.UserInfo usersInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_usersinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_usersinfo(i), target, stream);
  }

  // .PAYLOAD.Inning currentInning = 3;
  if (this->has_currentinning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::currentinning(this), target, stream);
  }

  // .PAYLOAD.Inning previousInning = 4;
  if (this->has_previousinning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::previousinning(this), target, stream);
  }

  // .PAYLOAD.CurrentBall current_ball = 5;
  if (this->has_current_ball()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::current_ball(this), target, stream);
  }

  // int32 on_strike = 6;
  if (this->on_strike() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_on_strike(), target);
  }

  // int32 off_strike = 7;
  if (this->off_strike() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_off_strike(), target);
  }

  // int32 bowler = 8;
  if (this->bowler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_bowler(), target);
  }

  // .PAYLOAD.Events previous_event = 9;
  if (this->previous_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_previous_event(), target);
  }

  // int32 active_bowler_sa = 10;
  if (this->active_bowler_sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_active_bowler_sa(), target);
  }

  // int32 active_batsman_sa = 11;
  if (this->active_batsman_sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_active_batsman_sa(), target);
  }

  // repeated .PAYLOAD.TResult missed_results = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missed_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_missed_results(i), target, stream);
  }

  // .PAYLOAD.MatchStates current_state = 13;
  if (this->current_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_current_state(), target);
  }

  // .PAYLOAD.Events expected_event = 14;
  if (this->expected_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_expected_event(), target);
  }

  // int32 selection_timeout = 15;
  if (this->selection_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_selection_timeout(), target);
  }

  // int32 player_selection_timeout = 16;
  if (this->player_selection_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_player_selection_timeout(), target);
  }

  // int32 buffer_for_selection_timeout = 17;
  if (this->buffer_for_selection_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_buffer_for_selection_timeout(), target);
  }

  // string winner_team = 18;
  if (this->winner_team().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_winner_team().data(), static_cast<int>(this->_internal_winner_team().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.Match.winner_team");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_winner_team(), target);
  }

  // int32 selection_time_remaining = 19;
  if (this->selection_time_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_selection_time_remaining(), target);
  }

  // int32 reconnection_count = 20;
  if (this->reconnection_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_reconnection_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.Match)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PAYLOAD.UserInfo usersInfo = 2;
  total_size += 1UL * this->_internal_usersinfo_size();
  for (const auto& msg : this->usersinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.TResult missed_results = 12;
  total_size += 1UL * this->_internal_missed_results_size();
  for (const auto& msg : this->missed_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchid());
  }

  // string winner_team = 18;
  if (this->winner_team().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_winner_team());
  }

  // .PAYLOAD.Inning currentInning = 3;
  if (this->has_currentinning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentinning_);
  }

  // .PAYLOAD.Inning previousInning = 4;
  if (this->has_previousinning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previousinning_);
  }

  // .PAYLOAD.CurrentBall current_ball = 5;
  if (this->has_current_ball()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_ball_);
  }

  // int32 on_strike = 6;
  if (this->on_strike() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_on_strike());
  }

  // int32 off_strike = 7;
  if (this->off_strike() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_off_strike());
  }

  // int32 bowler = 8;
  if (this->bowler() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bowler());
  }

  // .PAYLOAD.Events previous_event = 9;
  if (this->previous_event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_previous_event());
  }

  // int32 active_bowler_sa = 10;
  if (this->active_bowler_sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active_bowler_sa());
  }

  // int32 active_batsman_sa = 11;
  if (this->active_batsman_sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active_batsman_sa());
  }

  // .PAYLOAD.MatchStates current_state = 13;
  if (this->current_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_state());
  }

  // .PAYLOAD.Events expected_event = 14;
  if (this->expected_event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_expected_event());
  }

  // int32 selection_timeout = 15;
  if (this->selection_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selection_timeout());
  }

  // int32 player_selection_timeout = 16;
  if (this->player_selection_timeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_selection_timeout());
  }

  // int32 buffer_for_selection_timeout = 17;
  if (this->buffer_for_selection_timeout() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_buffer_for_selection_timeout());
  }

  // int32 selection_time_remaining = 19;
  if (this->selection_time_remaining() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_selection_time_remaining());
  }

  // int32 reconnection_count = 20;
  if (this->reconnection_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reconnection_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Match::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Match>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.Match)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  usersinfo_.MergeFrom(from.usersinfo_);
  missed_results_.MergeFrom(from.missed_results_);
  if (from.matchid().size() > 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from.winner_team().size() > 0) {
    _internal_set_winner_team(from._internal_winner_team());
  }
  if (from.has_currentinning()) {
    _internal_mutable_currentinning()->::PAYLOAD::Inning::MergeFrom(from._internal_currentinning());
  }
  if (from.has_previousinning()) {
    _internal_mutable_previousinning()->::PAYLOAD::Inning::MergeFrom(from._internal_previousinning());
  }
  if (from.has_current_ball()) {
    _internal_mutable_current_ball()->::PAYLOAD::CurrentBall::MergeFrom(from._internal_current_ball());
  }
  if (from.on_strike() != 0) {
    _internal_set_on_strike(from._internal_on_strike());
  }
  if (from.off_strike() != 0) {
    _internal_set_off_strike(from._internal_off_strike());
  }
  if (from.bowler() != 0) {
    _internal_set_bowler(from._internal_bowler());
  }
  if (from.previous_event() != 0) {
    _internal_set_previous_event(from._internal_previous_event());
  }
  if (from.active_bowler_sa() != 0) {
    _internal_set_active_bowler_sa(from._internal_active_bowler_sa());
  }
  if (from.active_batsman_sa() != 0) {
    _internal_set_active_batsman_sa(from._internal_active_batsman_sa());
  }
  if (from.current_state() != 0) {
    _internal_set_current_state(from._internal_current_state());
  }
  if (from.expected_event() != 0) {
    _internal_set_expected_event(from._internal_expected_event());
  }
  if (from.selection_timeout() != 0) {
    _internal_set_selection_timeout(from._internal_selection_timeout());
  }
  if (from.player_selection_timeout() != 0) {
    _internal_set_player_selection_timeout(from._internal_player_selection_timeout());
  }
  if (from.buffer_for_selection_timeout() != 0) {
    _internal_set_buffer_for_selection_timeout(from._internal_buffer_for_selection_timeout());
  }
  if (from.selection_time_remaining() != 0) {
    _internal_set_selection_time_remaining(from._internal_selection_time_remaining());
  }
  if (from.reconnection_count() != 0) {
    _internal_set_reconnection_count(from._internal_reconnection_count());
  }
}

void Match::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::InternalSwap(Match* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usersinfo_.InternalSwap(&other->usersinfo_);
  missed_results_.InternalSwap(&other->missed_results_);
  matchid_.Swap(&other->matchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  winner_team_.Swap(&other->winner_team_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Match, reconnection_count_)
      + sizeof(Match::reconnection_count_)
      - PROTOBUF_FIELD_OFFSET(Match, currentinning_)>(
          reinterpret_cast<char*>(&currentinning_),
          reinterpret_cast<char*>(&other->currentinning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Match::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lineup_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lineup_info_(from.lineup_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&play_state_, &from.play_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&mana_fill_) -
    reinterpret_cast<char*>(&play_state_)) + sizeof(mana_fill_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_payload_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&play_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mana_fill_) -
      reinterpret_cast<char*>(&play_state_)) + sizeof(mana_fill_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:PAYLOAD.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_payload_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lineup_info_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&play_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mana_fill_) -
      reinterpret_cast<char*>(&play_state_)) + sizeof(mana_fill_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PAYLOAD.UserInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.PlayStates play_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_play_state(static_cast<::PAYLOAD::PlayStates>(val));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.PlayerInfo lineup_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lineup_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total_misses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activated_sa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          activated_sa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sa_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sa_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sa_total_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sa_total_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mana_fill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mana_fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PAYLOAD.UserInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .PAYLOAD.PlayStates play_state = 2;
  if (this->play_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_play_state(), target);
  }

  // repeated .PAYLOAD.PlayerInfo lineup_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lineup_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lineup_info(i), target, stream);
  }

  // int32 total_misses = 4;
  if (this->total_misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_total_misses(), target);
  }

  // int32 activated_sa = 5;
  if (this->activated_sa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_activated_sa(), target);
  }

  // int32 sa_duration = 6;
  if (this->sa_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sa_duration(), target);
  }

  // int32 sa_total_duration = 7;
  if (this->sa_total_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sa_total_duration(), target);
  }

  // int32 mana_fill = 8;
  if (this->mana_fill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mana_fill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PAYLOAD.PlayerInfo lineup_info = 3;
  total_size += 1UL * this->_internal_lineup_info_size();
  for (const auto& msg : this->lineup_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .PAYLOAD.PlayStates play_state = 2;
  if (this->play_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_play_state());
  }

  // int32 total_misses = 4;
  if (this->total_misses() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_misses());
  }

  // int32 activated_sa = 5;
  if (this->activated_sa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_activated_sa());
  }

  // int32 sa_duration = 6;
  if (this->sa_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sa_duration());
  }

  // int32 sa_total_duration = 7;
  if (this->sa_total_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sa_total_duration());
  }

  // int32 mana_fill = 8;
  if (this->mana_fill() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mana_fill());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lineup_info_.MergeFrom(from.lineup_info_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.play_state() != 0) {
    _internal_set_play_state(from._internal_play_state());
  }
  if (from.total_misses() != 0) {
    _internal_set_total_misses(from._internal_total_misses());
  }
  if (from.activated_sa() != 0) {
    _internal_set_activated_sa(from._internal_activated_sa());
  }
  if (from.sa_duration() != 0) {
    _internal_set_sa_duration(from._internal_sa_duration());
  }
  if (from.sa_total_duration() != 0) {
    _internal_set_sa_total_duration(from._internal_sa_total_duration());
  }
  if (from.mana_fill() != 0) {
    _internal_set_mana_fill(from._internal_mana_fill());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lineup_info_.InternalSwap(&other->lineup_info_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, mana_fill_)
      + sizeof(UserInfo::mana_fill_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, play_state_)>(
          reinterpret_cast<char*>(&play_state_),
          reinterpret_cast<char*>(&other->play_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
}
class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lineup_number_, &from.lineup_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&runs_conceded_) -
    reinterpret_cast<char*>(&lineup_number_)) + sizeof(runs_conceded_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::memset(&lineup_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runs_conceded_) -
      reinterpret_cast<char*>(&lineup_number_)) + sizeof(runs_conceded_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:PAYLOAD.PlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerInfo::ArenaDtor(void* object) {
  PlayerInfo* _this = reinterpret_cast< PlayerInfo* >(object);
  (void)_this;
}
void PlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerInfo& PlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerInfo_payload_2eproto.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lineup_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runs_conceded_) -
      reinterpret_cast<char*>(&lineup_number_)) + sizeof(runs_conceded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 lineup_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lineup_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool played = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runs_scored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          runs_scored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 balls_faced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          balls_faced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wickets_taken = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wickets_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 balls_bowled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          balls_bowled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runs_conceded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          runs_conceded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.PlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lineup_number = 1;
  if (this->lineup_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_lineup_number(), target);
  }

  // bool out = 2;
  if (this->out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_out(), target);
  }

  // bool played = 3;
  if (this->played() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_played(), target);
  }

  // int32 runs_scored = 4;
  if (this->runs_scored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_runs_scored(), target);
  }

  // int32 balls_faced = 5;
  if (this->balls_faced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_balls_faced(), target);
  }

  // int32 wickets_taken = 6;
  if (this->wickets_taken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_wickets_taken(), target);
  }

  // int32 balls_bowled = 7;
  if (this->balls_bowled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_balls_bowled(), target);
  }

  // int32 runs_conceded = 8;
  if (this->runs_conceded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_runs_conceded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.PlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lineup_number = 1;
  if (this->lineup_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineup_number());
  }

  // bool out = 2;
  if (this->out() != 0) {
    total_size += 1 + 1;
  }

  // bool played = 3;
  if (this->played() != 0) {
    total_size += 1 + 1;
  }

  // int32 runs_scored = 4;
  if (this->runs_scored() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runs_scored());
  }

  // int32 balls_faced = 5;
  if (this->balls_faced() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_balls_faced());
  }

  // int32 wickets_taken = 6;
  if (this->wickets_taken() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wickets_taken());
  }

  // int32 balls_bowled = 7;
  if (this->balls_bowled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_balls_bowled());
  }

  // int32 runs_conceded = 8;
  if (this->runs_conceded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runs_conceded());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.PlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lineup_number() != 0) {
    _internal_set_lineup_number(from._internal_lineup_number());
  }
  if (from.out() != 0) {
    _internal_set_out(from._internal_out());
  }
  if (from.played() != 0) {
    _internal_set_played(from._internal_played());
  }
  if (from.runs_scored() != 0) {
    _internal_set_runs_scored(from._internal_runs_scored());
  }
  if (from.balls_faced() != 0) {
    _internal_set_balls_faced(from._internal_balls_faced());
  }
  if (from.wickets_taken() != 0) {
    _internal_set_wickets_taken(from._internal_wickets_taken());
  }
  if (from.balls_bowled() != 0) {
    _internal_set_balls_bowled(from._internal_balls_bowled());
  }
  if (from.runs_conceded() != 0) {
    _internal_set_runs_conceded(from._internal_runs_conceded());
  }
}

void PlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, runs_conceded_)
      + sizeof(PlayerInfo::runs_conceded_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, lineup_number_)>(
          reinterpret_cast<char*>(&lineup_number_),
          reinterpret_cast<char*>(&other->lineup_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrentBall::InitAsDefaultInstance() {
  ::PAYLOAD::_CurrentBall_default_instance_._instance.get_mutable()->shot_selected_ = const_cast< ::PAYLOAD::TShot*>(
      ::PAYLOAD::TShot::internal_default_instance());
  ::PAYLOAD::_CurrentBall_default_instance_._instance.get_mutable()->result_ = const_cast< ::PAYLOAD::TResult*>(
      ::PAYLOAD::TResult::internal_default_instance());
}
class CurrentBall::_Internal {
 public:
  static const ::PAYLOAD::TShot& shot_selected(const CurrentBall* msg);
  static const ::PAYLOAD::TResult& result(const CurrentBall* msg);
};

const ::PAYLOAD::TShot&
CurrentBall::_Internal::shot_selected(const CurrentBall* msg) {
  return *msg->shot_selected_;
}
const ::PAYLOAD::TResult&
CurrentBall::_Internal::result(const CurrentBall* msg) {
  return *msg->result_;
}
CurrentBall::CurrentBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  balls_(arena),
  shots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PAYLOAD.CurrentBall)
}
CurrentBall::CurrentBall(const CurrentBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      balls_(from.balls_),
      shots_(from.shots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shot_selected()) {
    shot_selected_ = new ::PAYLOAD::TShot(*from.shot_selected_);
  } else {
    shot_selected_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new ::PAYLOAD::TResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&over_ball_number_, &from.over_ball_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&ball_id_) -
    reinterpret_cast<char*>(&over_ball_number_)) + sizeof(ball_id_));
  // @@protoc_insertion_point(copy_constructor:PAYLOAD.CurrentBall)
}

void CurrentBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentBall_payload_2eproto.base);
  ::memset(&shot_selected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_id_) -
      reinterpret_cast<char*>(&shot_selected_)) + sizeof(ball_id_));
}

CurrentBall::~CurrentBall() {
  // @@protoc_insertion_point(destructor:PAYLOAD.CurrentBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrentBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shot_selected_;
  if (this != internal_default_instance()) delete result_;
}

void CurrentBall::ArenaDtor(void* object) {
  CurrentBall* _this = reinterpret_cast< CurrentBall* >(object);
  (void)_this;
}
void CurrentBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentBall& CurrentBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentBall_payload_2eproto.base);
  return *internal_default_instance();
}


void CurrentBall::Clear() {
// @@protoc_insertion_point(message_clear_start:PAYLOAD.CurrentBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balls_.Clear();
  shots_.Clear();
  if (GetArena() == nullptr && shot_selected_ != nullptr) {
    delete shot_selected_;
  }
  shot_selected_ = nullptr;
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&over_ball_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_id_) -
      reinterpret_cast<char*>(&over_ball_number_)) + sizeof(ball_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 over_ball_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          over_ball_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.TBall balls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.TShot shots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 ball_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ball_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.TShot shot_selected = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shot_selected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.TResult result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PAYLOAD.CurrentBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 over_ball_number = 1;
  if (this->over_ball_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_over_ball_number(), target);
  }

  // repeated .PAYLOAD.TBall balls = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_balls(i), target, stream);
  }

  // repeated .PAYLOAD.TShot shots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_shots(i), target, stream);
  }

  // int32 ball_id = 4;
  if (this->ball_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ball_id(), target);
  }

  // .PAYLOAD.TShot shot_selected = 5;
  if (this->has_shot_selected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::shot_selected(this), target, stream);
  }

  // .PAYLOAD.TResult result = 6;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PAYLOAD.CurrentBall)
  return target;
}

size_t CurrentBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PAYLOAD.CurrentBall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PAYLOAD.TBall balls = 2;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.TShot shots = 3;
  total_size += 1UL * this->_internal_shots_size();
  for (const auto& msg : this->shots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .PAYLOAD.TShot shot_selected = 5;
  if (this->has_shot_selected()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shot_selected_);
  }

  // .PAYLOAD.TResult result = 6;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int32 over_ball_number = 1;
  if (this->over_ball_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_ball_number());
  }

  // int32 ball_id = 4;
  if (this->ball_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ball_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PAYLOAD.CurrentBall)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PAYLOAD.CurrentBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PAYLOAD.CurrentBall)
    MergeFrom(*source);
  }
}

void CurrentBall::MergeFrom(const CurrentBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PAYLOAD.CurrentBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balls_.MergeFrom(from.balls_);
  shots_.MergeFrom(from.shots_);
  if (from.has_shot_selected()) {
    _internal_mutable_shot_selected()->::PAYLOAD::TShot::MergeFrom(from._internal_shot_selected());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::PAYLOAD::TResult::MergeFrom(from._internal_result());
  }
  if (from.over_ball_number() != 0) {
    _internal_set_over_ball_number(from._internal_over_ball_number());
  }
  if (from.ball_id() != 0) {
    _internal_set_ball_id(from._internal_ball_id());
  }
}

void CurrentBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PAYLOAD.CurrentBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentBall::CopyFrom(const CurrentBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PAYLOAD.CurrentBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentBall::IsInitialized() const {
  return true;
}

void CurrentBall::InternalSwap(CurrentBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  balls_.InternalSwap(&other->balls_);
  shots_.InternalSwap(&other->shots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrentBall, ball_id_)
      + sizeof(CurrentBall::ball_id_)
      - PROTOBUF_FIELD_OFFSET(CurrentBall, shot_selected_)>(
          reinterpret_cast<char*>(&shot_selected_),
          reinterpret_cast<char*>(&other->shot_selected_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentBall::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace PAYLOAD
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PAYLOAD::Payload* Arena::CreateMaybeMessage< ::PAYLOAD::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::Version* Arena::CreateMaybeMessage< ::PAYLOAD::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::UserData* Arena::CreateMaybeMessage< ::PAYLOAD::UserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::UserData >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::PassiveInfo* Arena::CreateMaybeMessage< ::PAYLOAD::PassiveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::PassiveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::EquipmentInfo* Arena::CreateMaybeMessage< ::PAYLOAD::EquipmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::EquipmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::AttributeBoosts* Arena::CreateMaybeMessage< ::PAYLOAD::AttributeBoosts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::AttributeBoosts >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::TShot* Arena::CreateMaybeMessage< ::PAYLOAD::TShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::TShot >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::TSaInfo* Arena::CreateMaybeMessage< ::PAYLOAD::TSaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::TSaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::TResult* Arena::CreateMaybeMessage< ::PAYLOAD::TResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::TResult >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::ShotsPossible* Arena::CreateMaybeMessage< ::PAYLOAD::ShotsPossible >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::ShotsPossible >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::TBall* Arena::CreateMaybeMessage< ::PAYLOAD::TBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::TBall >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::Player* Arena::CreateMaybeMessage< ::PAYLOAD::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::Inning* Arena::CreateMaybeMessage< ::PAYLOAD::Inning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::Inning >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::Match* Arena::CreateMaybeMessage< ::PAYLOAD::Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::Match >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::UserInfo* Arena::CreateMaybeMessage< ::PAYLOAD::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::PlayerInfo* Arena::CreateMaybeMessage< ::PAYLOAD::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PAYLOAD::CurrentBall* Arena::CreateMaybeMessage< ::PAYLOAD::CurrentBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PAYLOAD::CurrentBall >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
