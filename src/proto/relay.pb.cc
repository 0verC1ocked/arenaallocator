// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relay.proto

#include "relay.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_relay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GSMetric_relay_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_relay_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemMessage_relay_2eproto;
namespace RELAY_PAYLOAD {
class RelayPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelayPayload> _instance;
} _RelayPayload_default_instance_;
class SystemMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemMessage> _instance;
} _SystemMessage_default_instance_;
class GSMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GSMetric> _instance;
} _GSMetric_default_instance_;
}  // namespace RELAY_PAYLOAD
static void InitDefaultsscc_info_GSMetric_relay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RELAY_PAYLOAD::_GSMetric_default_instance_;
    new (ptr) ::RELAY_PAYLOAD::GSMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RELAY_PAYLOAD::GSMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GSMetric_relay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GSMetric_relay_2eproto}, {}};

static void InitDefaultsscc_info_RelayPayload_relay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RELAY_PAYLOAD::_RelayPayload_default_instance_;
    new (ptr) ::RELAY_PAYLOAD::RelayPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RELAY_PAYLOAD::RelayPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelayPayload_relay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelayPayload_relay_2eproto}, {
      &scc_info_SystemMessage_relay_2eproto.base,}};

static void InitDefaultsscc_info_SystemMessage_relay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::RELAY_PAYLOAD::_SystemMessage_default_instance_;
    new (ptr) ::RELAY_PAYLOAD::SystemMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RELAY_PAYLOAD::SystemMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemMessage_relay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SystemMessage_relay_2eproto}, {
      &scc_info_GSMetric_relay_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_relay_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_relay_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_relay_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_relay_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::RelayPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::RelayPayload, type_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::RelayPayload, path_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::RelayPayload, key_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::RelayPayload, pkt_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::RelayPayload, sys_msg_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::RelayPayload, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::SystemMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::SystemMessage, event_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::SystemMessage, player_count_change_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::SystemMessage, gameserver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::GSMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::GSMetric, player_count_),
  PROTOBUF_FIELD_OFFSET(::RELAY_PAYLOAD::GSMetric, match_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RELAY_PAYLOAD::RelayPayload)},
  { 11, -1, sizeof(::RELAY_PAYLOAD::SystemMessage)},
  { 19, -1, sizeof(::RELAY_PAYLOAD::GSMetric)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RELAY_PAYLOAD::_RelayPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RELAY_PAYLOAD::_SystemMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::RELAY_PAYLOAD::_GSMetric_default_instance_),
};

const char descriptor_table_protodef_relay_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013relay.proto\022\rRELAY_PAYLOAD\"\240\001\n\014RelayPa"
  "yload\022&\n\004type\030\001 \001(\0162\030.RELAY_PAYLOAD.Rela"
  "yType\022\014\n\004path\030\002 \001(\t\022\013\n\003key\030\003 \001(\t\022\013\n\003pkt\030"
  "\004 \001(\014\022-\n\007sys_msg\030\005 \001(\0132\034.RELAY_PAYLOAD.S"
  "ystemMessage\022\021\n\ttimestamp\030\006 \001(\003\"\204\001\n\rSyst"
  "emMessage\022)\n\005event\030\001 \001(\0162\032.RELAY_PAYLOAD"
  ".SystemEvent\022\033\n\023player_count_change\030\002 \001("
  "\005\022+\n\ngameserver\030\003 \001(\0132\027.RELAY_PAYLOAD.GS"
  "Metric\"5\n\010GSMetric\022\024\n\014player_count\030\001 \001(\005"
  "\022\023\n\013match_count\030\002 \001(\005*^\n\tRelayType\022\014\n\010NO"
  "_RELAY\020\000\022\020\n\014HTTP_FORWARD\020\001\022\022\n\016STREAM_FOR"
  "WARD\020\002\022\021\n\rEVENT_FORWARD\020\003\022\n\n\006SYSTEM\020\004*e\n"
  "\013SystemEvent\022\017\n\013UNSPECIFIED\020\000\022\t\n\005READY\020\001"
  "\022\n\n\006HEALTH\020\002\022\021\n\rMATCH_CREATED\020\003\022\017\n\013MATCH"
  "_ENDED\020\004\022\n\n\006METRIC\020\005B)Z\020pb/mitsuko/relay"
  "\252\002\024Mitsuko.RelayPayloadb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_relay_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_relay_2eproto_sccs[3] = {
  &scc_info_GSMetric_relay_2eproto.base,
  &scc_info_RelayPayload_relay_2eproto.base,
  &scc_info_SystemMessage_relay_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_relay_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relay_2eproto = {
  false, false, descriptor_table_protodef_relay_2eproto, "relay.proto", 631,
  &descriptor_table_relay_2eproto_once, descriptor_table_relay_2eproto_sccs, descriptor_table_relay_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_relay_2eproto::offsets,
  file_level_metadata_relay_2eproto, 3, file_level_enum_descriptors_relay_2eproto, file_level_service_descriptors_relay_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_relay_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_relay_2eproto)), true);
namespace RELAY_PAYLOAD {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_relay_2eproto);
  return file_level_enum_descriptors_relay_2eproto[0];
}
bool RelayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_relay_2eproto);
  return file_level_enum_descriptors_relay_2eproto[1];
}
bool SystemEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RelayPayload::InitAsDefaultInstance() {
  ::RELAY_PAYLOAD::_RelayPayload_default_instance_._instance.get_mutable()->sys_msg_ = const_cast< ::RELAY_PAYLOAD::SystemMessage*>(
      ::RELAY_PAYLOAD::SystemMessage::internal_default_instance());
}
class RelayPayload::_Internal {
 public:
  static const ::RELAY_PAYLOAD::SystemMessage& sys_msg(const RelayPayload* msg);
};

const ::RELAY_PAYLOAD::SystemMessage&
RelayPayload::_Internal::sys_msg(const RelayPayload* msg) {
  return *msg->sys_msg_;
}
RelayPayload::RelayPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RELAY_PAYLOAD.RelayPayload)
}
RelayPayload::RelayPayload(const RelayPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  pkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pkt().empty()) {
    pkt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pkt(),
      GetArena());
  }
  if (from._internal_has_sys_msg()) {
    sys_msg_ = new ::RELAY_PAYLOAD::SystemMessage(*from.sys_msg_);
  } else {
    sys_msg_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:RELAY_PAYLOAD.RelayPayload)
}

void RelayPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelayPayload_relay_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pkt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sys_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sys_msg_)) + sizeof(type_));
}

RelayPayload::~RelayPayload() {
  // @@protoc_insertion_point(destructor:RELAY_PAYLOAD.RelayPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelayPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pkt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sys_msg_;
}

void RelayPayload::ArenaDtor(void* object) {
  RelayPayload* _this = reinterpret_cast< RelayPayload* >(object);
  (void)_this;
}
void RelayPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelayPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelayPayload& RelayPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelayPayload_relay_2eproto.base);
  return *internal_default_instance();
}


void RelayPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:RELAY_PAYLOAD.RelayPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pkt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sys_msg_ != nullptr) {
    delete sys_msg_;
  }
  sys_msg_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelayPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RELAY_PAYLOAD.RelayType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::RELAY_PAYLOAD::RelayType>(val));
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RELAY_PAYLOAD.RelayPayload.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RELAY_PAYLOAD.RelayPayload.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pkt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pkt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RELAY_PAYLOAD.SystemMessage sys_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelayPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RELAY_PAYLOAD.RelayPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RELAY_PAYLOAD.RelayType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RELAY_PAYLOAD.RelayPayload.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string key = 3;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RELAY_PAYLOAD.RelayPayload.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // bytes pkt = 4;
  if (this->pkt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pkt(), target);
  }

  // .RELAY_PAYLOAD.SystemMessage sys_msg = 5;
  if (this->has_sys_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sys_msg(this), target, stream);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RELAY_PAYLOAD.RelayPayload)
  return target;
}

size_t RelayPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RELAY_PAYLOAD.RelayPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes pkt = 4;
  if (this->pkt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pkt());
  }

  // .RELAY_PAYLOAD.SystemMessage sys_msg = 5;
  if (this->has_sys_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sys_msg_);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // .RELAY_PAYLOAD.RelayType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelayPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RELAY_PAYLOAD.RelayPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const RelayPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelayPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RELAY_PAYLOAD.RelayPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RELAY_PAYLOAD.RelayPayload)
    MergeFrom(*source);
  }
}

void RelayPayload::MergeFrom(const RelayPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RELAY_PAYLOAD.RelayPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {
    _internal_set_path(from._internal_path());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.pkt().size() > 0) {
    _internal_set_pkt(from._internal_pkt());
  }
  if (from.has_sys_msg()) {
    _internal_mutable_sys_msg()->::RELAY_PAYLOAD::SystemMessage::MergeFrom(from._internal_sys_msg());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RelayPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RELAY_PAYLOAD.RelayPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelayPayload::CopyFrom(const RelayPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RELAY_PAYLOAD.RelayPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayPayload::IsInitialized() const {
  return true;
}

void RelayPayload::InternalSwap(RelayPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pkt_.Swap(&other->pkt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelayPayload, type_)
      + sizeof(RelayPayload::type_)
      - PROTOBUF_FIELD_OFFSET(RelayPayload, sys_msg_)>(
          reinterpret_cast<char*>(&sys_msg_),
          reinterpret_cast<char*>(&other->sys_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelayPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SystemMessage::InitAsDefaultInstance() {
  ::RELAY_PAYLOAD::_SystemMessage_default_instance_._instance.get_mutable()->gameserver_ = const_cast< ::RELAY_PAYLOAD::GSMetric*>(
      ::RELAY_PAYLOAD::GSMetric::internal_default_instance());
}
class SystemMessage::_Internal {
 public:
  static const ::RELAY_PAYLOAD::GSMetric& gameserver(const SystemMessage* msg);
};

const ::RELAY_PAYLOAD::GSMetric&
SystemMessage::_Internal::gameserver(const SystemMessage* msg) {
  return *msg->gameserver_;
}
SystemMessage::SystemMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RELAY_PAYLOAD.SystemMessage)
}
SystemMessage::SystemMessage(const SystemMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameserver()) {
    gameserver_ = new ::RELAY_PAYLOAD::GSMetric(*from.gameserver_);
  } else {
    gameserver_ = nullptr;
  }
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_count_change_) -
    reinterpret_cast<char*>(&event_)) + sizeof(player_count_change_));
  // @@protoc_insertion_point(copy_constructor:RELAY_PAYLOAD.SystemMessage)
}

void SystemMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemMessage_relay_2eproto.base);
  ::memset(&gameserver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_count_change_) -
      reinterpret_cast<char*>(&gameserver_)) + sizeof(player_count_change_));
}

SystemMessage::~SystemMessage() {
  // @@protoc_insertion_point(destructor:RELAY_PAYLOAD.SystemMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gameserver_;
}

void SystemMessage::ArenaDtor(void* object) {
  SystemMessage* _this = reinterpret_cast< SystemMessage* >(object);
  (void)_this;
}
void SystemMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemMessage& SystemMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemMessage_relay_2eproto.base);
  return *internal_default_instance();
}


void SystemMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RELAY_PAYLOAD.SystemMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gameserver_ != nullptr) {
    delete gameserver_;
  }
  gameserver_ = nullptr;
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_count_change_) -
      reinterpret_cast<char*>(&event_)) + sizeof(player_count_change_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RELAY_PAYLOAD.SystemEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event(static_cast<::RELAY_PAYLOAD::SystemEvent>(val));
        } else goto handle_unusual;
        continue;
      // int32 player_count_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_count_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RELAY_PAYLOAD.GSMetric gameserver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameserver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RELAY_PAYLOAD.SystemMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RELAY_PAYLOAD.SystemEvent event = 1;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // int32 player_count_change = 2;
  if (this->player_count_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_count_change(), target);
  }

  // .RELAY_PAYLOAD.GSMetric gameserver = 3;
  if (this->has_gameserver()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gameserver(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RELAY_PAYLOAD.SystemMessage)
  return target;
}

size_t SystemMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RELAY_PAYLOAD.SystemMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RELAY_PAYLOAD.GSMetric gameserver = 3;
  if (this->has_gameserver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameserver_);
  }

  // .RELAY_PAYLOAD.SystemEvent event = 1;
  if (this->event() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  // int32 player_count_change = 2;
  if (this->player_count_change() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_count_change());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RELAY_PAYLOAD.SystemMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RELAY_PAYLOAD.SystemMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RELAY_PAYLOAD.SystemMessage)
    MergeFrom(*source);
  }
}

void SystemMessage::MergeFrom(const SystemMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RELAY_PAYLOAD.SystemMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gameserver()) {
    _internal_mutable_gameserver()->::RELAY_PAYLOAD::GSMetric::MergeFrom(from._internal_gameserver());
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
  if (from.player_count_change() != 0) {
    _internal_set_player_count_change(from._internal_player_count_change());
  }
}

void SystemMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RELAY_PAYLOAD.SystemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemMessage::CopyFrom(const SystemMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RELAY_PAYLOAD.SystemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemMessage::IsInitialized() const {
  return true;
}

void SystemMessage::InternalSwap(SystemMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemMessage, player_count_change_)
      + sizeof(SystemMessage::player_count_change_)
      - PROTOBUF_FIELD_OFFSET(SystemMessage, gameserver_)>(
          reinterpret_cast<char*>(&gameserver_),
          reinterpret_cast<char*>(&other->gameserver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GSMetric::InitAsDefaultInstance() {
}
class GSMetric::_Internal {
 public:
};

GSMetric::GSMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RELAY_PAYLOAD.GSMetric)
}
GSMetric::GSMetric(const GSMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_count_, &from.player_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_count_) -
    reinterpret_cast<char*>(&player_count_)) + sizeof(match_count_));
  // @@protoc_insertion_point(copy_constructor:RELAY_PAYLOAD.GSMetric)
}

void GSMetric::SharedCtor() {
  ::memset(&player_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_count_) -
      reinterpret_cast<char*>(&player_count_)) + sizeof(match_count_));
}

GSMetric::~GSMetric() {
  // @@protoc_insertion_point(destructor:RELAY_PAYLOAD.GSMetric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GSMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GSMetric::ArenaDtor(void* object) {
  GSMetric* _this = reinterpret_cast< GSMetric* >(object);
  (void)_this;
}
void GSMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GSMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GSMetric& GSMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GSMetric_relay_2eproto.base);
  return *internal_default_instance();
}


void GSMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:RELAY_PAYLOAD.GSMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_count_) -
      reinterpret_cast<char*>(&player_count_)) + sizeof(match_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GSMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 player_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 match_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          match_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GSMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RELAY_PAYLOAD.GSMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_count = 1;
  if (this->player_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_count(), target);
  }

  // int32 match_count = 2;
  if (this->match_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_match_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RELAY_PAYLOAD.GSMetric)
  return target;
}

size_t GSMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RELAY_PAYLOAD.GSMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_count = 1;
  if (this->player_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_count());
  }

  // int32 match_count = 2;
  if (this->match_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_match_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GSMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RELAY_PAYLOAD.GSMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const GSMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GSMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RELAY_PAYLOAD.GSMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RELAY_PAYLOAD.GSMetric)
    MergeFrom(*source);
  }
}

void GSMetric::MergeFrom(const GSMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RELAY_PAYLOAD.GSMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_count() != 0) {
    _internal_set_player_count(from._internal_player_count());
  }
  if (from.match_count() != 0) {
    _internal_set_match_count(from._internal_match_count());
  }
}

void GSMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RELAY_PAYLOAD.GSMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSMetric::CopyFrom(const GSMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RELAY_PAYLOAD.GSMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSMetric::IsInitialized() const {
  return true;
}

void GSMetric::InternalSwap(GSMetric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GSMetric, match_count_)
      + sizeof(GSMetric::match_count_)
      - PROTOBUF_FIELD_OFFSET(GSMetric, player_count_)>(
          reinterpret_cast<char*>(&player_count_),
          reinterpret_cast<char*>(&other->player_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GSMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace RELAY_PAYLOAD
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RELAY_PAYLOAD::RelayPayload* Arena::CreateMaybeMessage< ::RELAY_PAYLOAD::RelayPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RELAY_PAYLOAD::RelayPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::RELAY_PAYLOAD::SystemMessage* Arena::CreateMaybeMessage< ::RELAY_PAYLOAD::SystemMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RELAY_PAYLOAD::SystemMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::RELAY_PAYLOAD::GSMetric* Arena::CreateMaybeMessage< ::RELAY_PAYLOAD::GSMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RELAY_PAYLOAD::GSMetric >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
