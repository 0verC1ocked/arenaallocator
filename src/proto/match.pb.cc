// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#include "match.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BracketData_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndMatchUserData_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M_CurrentBall_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M_Innings_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M_TBall_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M_TShot_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M_UserInfo_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchPlayer_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAInfo_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_match_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TOutcome_match_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Player_payload_2eproto;
namespace MATCH {
class IPCMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPCMessage> _instance;
} _IPCMessage_default_instance_;
class CreateMatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateMatchRequest> _instance;
} _CreateMatchRequest_default_instance_;
class EndMatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndMatchRequest> _instance;
} _EndMatchRequest_default_instance_;
class EndMatchUserDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndMatchUserData> _instance;
} _EndMatchUserData_default_instance_;
class MatchListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchList> _instance;
} _MatchList_default_instance_;
class SAInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAInfo> _instance;
} _SAInfo_default_instance_;
class M_UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M_UserInfo> _instance;
} _M_UserInfo_default_instance_;
class M_TShotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M_TShot> _instance;
} _M_TShot_default_instance_;
class BracketDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BracketData> _instance;
} _BracketData_default_instance_;
class M_TBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M_TBall> _instance;
} _M_TBall_default_instance_;
class TOutcomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TOutcome> _instance;
} _TOutcome_default_instance_;
class M_CurrentBallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M_CurrentBall> _instance;
} _M_CurrentBall_default_instance_;
class M_InningsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M_Innings> _instance;
} _M_Innings_default_instance_;
class IOutcomeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOutcome> _instance;
} _IOutcome_default_instance_;
class MatchPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchPlayer> _instance;
} _MatchPlayer_default_instance_;
class MatchModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchModel> _instance;
} _MatchModel_default_instance_;
}  // namespace MATCH
static void InitDefaultsscc_info_BracketData_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_BracketData_default_instance_;
    new (ptr) ::MATCH::BracketData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::BracketData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BracketData_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BracketData_match_2eproto}, {}};

static void InitDefaultsscc_info_CreateMatchRequest_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_CreateMatchRequest_default_instance_;
    new (ptr) ::MATCH::CreateMatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::CreateMatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateMatchRequest_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateMatchRequest_match_2eproto}, {
      &scc_info_Player_payload_2eproto.base,}};

static void InitDefaultsscc_info_EndMatchRequest_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_EndMatchRequest_default_instance_;
    new (ptr) ::MATCH::EndMatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::EndMatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndMatchRequest_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EndMatchRequest_match_2eproto}, {
      &scc_info_EndMatchUserData_match_2eproto.base,}};

static void InitDefaultsscc_info_EndMatchUserData_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_EndMatchUserData_default_instance_;
    new (ptr) ::MATCH::EndMatchUserData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::EndMatchUserData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndMatchUserData_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndMatchUserData_match_2eproto}, {}};

static void InitDefaultsscc_info_IOutcome_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_IOutcome_default_instance_;
    new (ptr) ::MATCH::IOutcome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::IOutcome::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOutcome_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IOutcome_match_2eproto}, {}};

static void InitDefaultsscc_info_IPCMessage_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_IPCMessage_default_instance_;
    new (ptr) ::MATCH::IPCMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::IPCMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPCMessage_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPCMessage_match_2eproto}, {}};

static void InitDefaultsscc_info_M_CurrentBall_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_M_CurrentBall_default_instance_;
    new (ptr) ::MATCH::M_CurrentBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::M_CurrentBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M_CurrentBall_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M_CurrentBall_match_2eproto}, {
      &scc_info_TOutcome_match_2eproto.base,
      &scc_info_M_TShot_match_2eproto.base,
      &scc_info_M_TBall_match_2eproto.base,}};

static void InitDefaultsscc_info_M_Innings_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_M_Innings_default_instance_;
    new (ptr) ::MATCH::M_Innings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::M_Innings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M_Innings_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M_Innings_match_2eproto}, {}};

static void InitDefaultsscc_info_M_TBall_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_M_TBall_default_instance_;
    new (ptr) ::MATCH::M_TBall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::M_TBall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M_TBall_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M_TBall_match_2eproto}, {
      &scc_info_BracketData_match_2eproto.base,}};

static void InitDefaultsscc_info_M_TShot_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_M_TShot_default_instance_;
    new (ptr) ::MATCH::M_TShot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::M_TShot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M_TShot_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M_TShot_match_2eproto}, {}};

static void InitDefaultsscc_info_M_UserInfo_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_M_UserInfo_default_instance_;
    new (ptr) ::MATCH::M_UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::M_UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M_UserInfo_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M_UserInfo_match_2eproto}, {
      &scc_info_SAInfo_match_2eproto.base,}};

static void InitDefaultsscc_info_MatchList_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_MatchList_default_instance_;
    new (ptr) ::MATCH::MatchList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::MatchList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchList_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchList_match_2eproto}, {}};

static void InitDefaultsscc_info_MatchModel_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_MatchModel_default_instance_;
    new (ptr) ::MATCH::MatchModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::MatchModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MatchModel_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MatchModel_match_2eproto}, {
      &scc_info_M_UserInfo_match_2eproto.base,
      &scc_info_M_Innings_match_2eproto.base,
      &scc_info_MatchPlayer_match_2eproto.base,
      &scc_info_M_CurrentBall_match_2eproto.base,}};

static void InitDefaultsscc_info_MatchPlayer_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_MatchPlayer_default_instance_;
    new (ptr) ::MATCH::MatchPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::MatchPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchPlayer_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchPlayer_match_2eproto}, {}};

static void InitDefaultsscc_info_SAInfo_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_SAInfo_default_instance_;
    new (ptr) ::MATCH::SAInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::SAInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAInfo_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAInfo_match_2eproto}, {}};

static void InitDefaultsscc_info_TOutcome_match_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MATCH::_TOutcome_default_instance_;
    new (ptr) ::MATCH::TOutcome();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH::TOutcome::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TOutcome_match_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TOutcome_match_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_match_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_match_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_match_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_match_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::IPCMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::IPCMessage, type_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IPCMessage, serializeddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, matchid_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, homeuserid_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, awayuserid_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, home_lineup_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, away_lineup_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, firstbattinguser_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, ishomebot_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, isawaybot_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, batsmanmanarequired_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, bowlermanarequired_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, isrpsenabled_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, ispassivesenabled_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, maxovers_),
  PROTOBUF_FIELD_OFFSET(::MATCH::CreateMatchRequest, isftuematch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchRequest, matchid_),
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchRequest, team1_data_),
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchRequest, team2_data_),
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchRequest, winnerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchUserData, id_),
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchUserData, total_),
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchUserData, wickets_),
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchUserData, balls_faced_),
  PROTOBUF_FIELD_OFFSET(::MATCH::EndMatchUserData, quit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchList, matchid_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchList, home_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchList, away_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::SAInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::SAInfo, type_),
  PROTOBUF_FIELD_OFFSET(::MATCH::SAInfo, duration_left_),
  PROTOBUF_FIELD_OFFSET(::MATCH::SAInfo, applied_for_current_ball_),
  PROTOBUF_FIELD_OFFSET(::MATCH::SAInfo, max_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, playstate_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, connectionstate_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, opponentuid_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, ack_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, auto_play_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, mana_fill_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, sa_info_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_UserInfo, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, id_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, name_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, run_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, bracket_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, probability_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, wicket_chance_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, ball_value_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, shot_value_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, locked_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, shot_hidden_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TShot, probability_hidden_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::BracketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::BracketData, bracket_id_),
  PROTOBUF_FIELD_OFFSET(::MATCH::BracketData, shot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TBall, id_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TBall, name_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TBall, value_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TBall, skull_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_TBall, shots_possible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::TOutcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::TOutcome, outcome_),
  PROTOBUF_FIELD_OFFSET(::MATCH::TOutcome, runs_),
  PROTOBUF_FIELD_OFFSET(::MATCH::TOutcome, random_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, state_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, outcome_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, shots_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, balls_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, selectedball_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, selectedshot_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_CurrentBall, over_ball_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, inning_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, runs_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, balls_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, wickets_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, over_number_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, max_balls_per_over_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, max_overs_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, boundary_counter_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, green_shot_missed_counter_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, yellow_shot_missed_counter_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, user_on_batting_),
  PROTOBUF_FIELD_OFFSET(::MATCH::M_Innings, user_on_bowling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, total_runs_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, total_balls_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, wickets_taken_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, runs_scored_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, original_runs_scored_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, bracket_id_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, over_ball_number_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, over_number_),
  PROTOBUF_FIELD_OFFSET(::MATCH::IOutcome, outcome_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, character_id_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, nickname_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, image_number_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, power_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, lineup_number_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, is_out_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, used_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, hits_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, misses_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, lhbrhb_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, confidence_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchPlayer, strike_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, matchid_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, users_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, home_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, away_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, joinstate_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, matchstate_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, currentinnings_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, previousinnings_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, home_lineup_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, away_lineup_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, currentball_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, previousballs_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, selectedfirstbatsman_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, selectedsecondbatsman_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, selectedbowler_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, previousevent_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, statestarttime_),
  PROTOBUF_FIELD_OFFSET(::MATCH::MatchModel, both_disconnect_time_point_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MATCH::IPCMessage)},
  { 7, -1, sizeof(::MATCH::CreateMatchRequest)},
  { 26, -1, sizeof(::MATCH::EndMatchRequest)},
  { 35, -1, sizeof(::MATCH::EndMatchUserData)},
  { 45, -1, sizeof(::MATCH::MatchList)},
  { 53, -1, sizeof(::MATCH::SAInfo)},
  { 62, -1, sizeof(::MATCH::M_UserInfo)},
  { 75, -1, sizeof(::MATCH::M_TShot)},
  { 91, -1, sizeof(::MATCH::BracketData)},
  { 98, -1, sizeof(::MATCH::M_TBall)},
  { 108, -1, sizeof(::MATCH::TOutcome)},
  { 116, -1, sizeof(::MATCH::M_CurrentBall)},
  { 128, -1, sizeof(::MATCH::M_Innings)},
  { 145, -1, sizeof(::MATCH::IOutcome)},
  { 159, -1, sizeof(::MATCH::MatchPlayer)},
  { 176, -1, sizeof(::MATCH::MatchModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_IPCMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_CreateMatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_EndMatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_EndMatchUserData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_MatchList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_SAInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_M_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_M_TShot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_BracketData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_M_TBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_TOutcome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_M_CurrentBall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_M_Innings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_IOutcome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_MatchPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MATCH::_MatchModel_default_instance_),
};

const char descriptor_table_protodef_match_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013match.proto\022\005MATCH\032\rpayload.proto\"I\n\nI"
  "PCMessage\022#\n\004type\030\001 \001(\0162\025.MATCH.IPCMessa"
  "geType\022\026\n\016serializedData\030\002 \001(\014\"\352\002\n\022Creat"
  "eMatchRequest\022\017\n\007matchId\030\001 \001(\t\022\022\n\nhomeUs"
  "erId\030\002 \001(\t\022\022\n\nawayUserId\030\003 \001(\t\022$\n\013home_l"
  "ineup\030\004 \003(\0132\017.PAYLOAD.Player\022$\n\013away_lin"
  "eup\030\005 \003(\0132\017.PAYLOAD.Player\022\030\n\020firstBatti"
  "ngUser\030\006 \001(\t\022\021\n\tisHomeBot\030\007 \001(\010\022\021\n\tisAwa"
  "yBot\030\010 \001(\010\022\033\n\023batsmanManaRequired\030\t \001(\005\022"
  "\032\n\022bowlerManaRequired\030\n \001(\005\022\024\n\014isRPSEnab"
  "led\030\013 \001(\010\022\031\n\021isPassivesEnabled\030\014 \001(\010\022\020\n\010"
  "maxOvers\030\r \001(\005\022\023\n\013isFtueMatch\030\016 \001(\010\"\216\001\n\017"
  "EndMatchRequest\022\017\n\007matchId\030\001 \001(\t\022+\n\nteam"
  "1_data\030\002 \001(\0132\027.MATCH.EndMatchUserData\022+\n"
  "\nteam2_data\030\003 \001(\0132\027.MATCH.EndMatchUserDa"
  "ta\022\020\n\010winnerId\030\004 \001(\t\"a\n\020EndMatchUserData"
  "\022\n\n\002id\030\001 \001(\t\022\r\n\005total\030\002 \001(\005\022\017\n\007wickets\030\003"
  " \001(\005\022\023\n\013balls_faced\030\004 \001(\005\022\014\n\004quit\030\005 \001(\010\""
  "8\n\tMatchList\022\017\n\007MatchId\030\001 \003(\t\022\014\n\004Home\030\002 "
  "\003(\t\022\014\n\004Away\030\003 \003(\t\"p\n\006SAInfo\022\027\n\004type\030\001 \001("
  "\0162\t.MATCH.SA\022\025\n\rduration_left\030\002 \001(\005\022 \n\030a"
  "pplied_for_current_ball\030\003 \001(\010\022\024\n\014max_dur"
  "ation\030\004 \001(\005\"\345\001\n\nM_UserInfo\022&\n\tplayState\030"
  "\001 \001(\0162\023.MATCH.M_PlayStates\022/\n\017connection"
  "State\030\002 \001(\0162\026.MATCH.ConnectionState\022\023\n\013o"
  "pponentUID\030\003 \001(\t\022\027\n\003ack\030\004 \001(\0162\n.MATCH.AC"
  "K\022\021\n\tauto_play\030\005 \001(\010\022\021\n\tmana_fill\030\006 \001(\005\022"
  "\036\n\007sa_info\030\007 \001(\0132\r.MATCH.SAInfo\022\n\n\002id\030\010 "
  "\001(\t\"\347\001\n\007M_TShot\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001("
  "\t\022\013\n\003run\030\003 \001(\005\022 \n\007bracket\030\004 \001(\0162\017.MATCH."
  "Brackets\022\023\n\013probability\030\005 \001(\002\022\025\n\rwicket_"
  "chance\030\006 \001(\002\022\022\n\nball_value\030\007 \001(\001\022\022\n\nshot"
  "_value\030\010 \001(\001\022\016\n\006locked\030\t \001(\010\022\023\n\013shot_hid"
  "den\030\n \001(\010\022\032\n\022probability_hidden\030\013 \001(\010\"C\n"
  "\013BracketData\022#\n\nbracket_id\030\001 \001(\0162\017.MATCH"
  ".Brackets\022\017\n\007shot_id\030\002 \001(\005\"|\n\007M_TBall\022\n\n"
  "\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\001\022\034"
  "\n\005skull\030\004 \001(\0162\r.MATCH.Skulls\022*\n\016shots_po"
  "ssible\030\005 \003(\0132\022.MATCH.BracketData\"P\n\010TOut"
  "come\022&\n\007outcome\030\001 \001(\0162\025.PAYLOAD.ShotOutc"
  "omes\022\014\n\004runs\030\002 \001(\005\022\016\n\006random\030\003 \001(\001\"\367\001\n\rM"
  "_CurrentBall\022 \n\005state\030\001 \001(\0162\021.MATCH.Ball"
  "States\022 \n\007outcome\030\002 \001(\0132\017.MATCH.TOutcome"
  "\022\035\n\005shots\030\003 \003(\0132\016.MATCH.M_TShot\022\035\n\005balls"
  "\030\004 \003(\0132\016.MATCH.M_TBall\022$\n\014selectedBall\030\005"
  " \001(\0132\016.MATCH.M_TBall\022$\n\014selectedShot\030\006 \001"
  "(\0132\016.MATCH.M_TShot\022\030\n\020over_ball_number\030\007"
  " \001(\005\"\262\002\n\tM_Innings\022 \n\006inning\030\001 \001(\0162\020.PAY"
  "LOAD.Innings\022\014\n\004runs\030\002 \001(\005\022\r\n\005balls\030\003 \001("
  "\005\022\017\n\007wickets\030\004 \001(\005\022\023\n\013over_number\030\005 \001(\005\022"
  "\032\n\022max_balls_per_over\030\006 \001(\005\022\021\n\tmax_overs"
  "\030\007 \001(\005\022\030\n\020boundary_counter\030\010 \001(\005\022!\n\031gree"
  "n_shot_missed_counter\030\t \001(\005\022\"\n\032yellow_sh"
  "ot_missed_counter\030\n \001(\005\022\027\n\017user_on_batti"
  "ng\030\013 \001(\t\022\027\n\017user_on_bowling\030\014 \001(\t\"\371\001\n\010IO"
  "utcome\022\022\n\ntotal_runs\030\001 \001(\005\022\023\n\013total_ball"
  "s\030\002 \001(\005\022\025\n\rwickets_taken\030\003 \001(\005\022\023\n\013runs_s"
  "cored\030\004 \001(\005\022\034\n\024original_runs_scored\030\005 \001("
  "\005\022#\n\nbracket_id\030\006 \001(\0162\017.MATCH.Brackets\022\030"
  "\n\020over_ball_number\030\007 \001(\005\022\023\n\013over_number\030"
  "\010 \001(\005\022&\n\007outcome\030\t \001(\0162\025.PAYLOAD.ShotOut"
  "comes\"\360\001\n\013MatchPlayer\022\024\n\014character_id\030\001 "
  "\001(\005\022\020\n\010nickname\030\002 \001(\t\022\024\n\014image_number\030\003 "
  "\001(\005\022\r\n\005power\030\004 \001(\005\022\025\n\rlineup_number\030\005 \001("
  "\005\022\016\n\006is_out\030\006 \001(\010\022\014\n\004used\030\007 \001(\010\022\014\n\004hits\030"
  "\010 \001(\005\022\016\n\006misses\030\t \001(\005\022\016\n\006lhbrhb\030\n \001(\001\022\022\n"
  "\nconfidence\030\013 \001(\001\022\035\n\006strike\030\014 \001(\0162\r.MATC"
  "H.Strike\"\237\005\n\nMatchModel\022\017\n\007matchId\030\001 \001(\t"
  "\022 \n\005users\030\002 \003(\0132\021.MATCH.M_UserInfo\022\014\n\004ho"
  "me\030\003 \001(\t\022\014\n\004away\030\004 \001(\t\022$\n\tjoinState\030\005 \001("
  "\0162\021.MATCH.JoinStates\022(\n\nmatchState\030\006 \001(\016"
  "2\024.PAYLOAD.MatchStates\022(\n\016currentInnings"
  "\030\007 \001(\0132\020.MATCH.M_Innings\022)\n\017previousInni"
  "ngs\030\010 \001(\0132\020.MATCH.M_Innings\022\'\n\013home_line"
  "up\030\t \003(\0132\022.MATCH.MatchPlayer\022\'\n\013away_lin"
  "eup\030\n \003(\0132\022.MATCH.MatchPlayer\022)\n\013current"
  "Ball\030\013 \001(\0132\024.MATCH.M_CurrentBall\022+\n\rprev"
  "iousBalls\030\014 \003(\0132\024.MATCH.M_CurrentBall\0220\n"
  "\024selectedFirstBatsman\030\r \001(\0132\022.MATCH.Matc"
  "hPlayer\0221\n\025selectedSecondBatsman\030\016 \001(\0132\022"
  ".MATCH.MatchPlayer\022*\n\016selectedBowler\030\017 \001"
  "(\0132\022.MATCH.MatchPlayer\022&\n\rpreviousEvent\030"
  "\020 \001(\0162\017.PAYLOAD.Events\022\026\n\016stateStartTime"
  "\030\021 \001(\003\022\"\n\032both_disconnect_time_point\030\022 \001"
  "(\003*S\n\016IPCMessageType\022\014\n\010IPC_NONE\020\000\022\034\n\030IP"
  "C_CREATE_MATCH_REQUEST\020\001\022\025\n\021IPC_MATCH_RE"
  "QUEST\020\002*K\n\014M_PlayStates\022\020\n\014M_MatchMaked\020"
  "\000\022\013\n\007M_Ready\020\001\022\r\n\tM_Bowling\020\002\022\r\n\tM_Batti"
  "ng\020\003*V\n\017ConnectionState\022\020\n\014NotConnected\020"
  "\000\022\r\n\tConnected\020\001\022\020\n\014Disconnected\020\002\022\020\n\014Re"
  "connecting\020\003*\332\001\n\003ACK\022\010\n\004None\020\000\022\r\n\tUserRe"
  "ady\020\001\022\016\n\nMatchReady\020\002\022\020\n\014InningsReady\020\003\022"
  "\022\n\016PlayerSelected\020\004\022\027\n\023NextBowlerSelecti"
  "on\020\005\022\026\n\022NextBowlerSelected\020\006\022\021\n\rStartBal"
  "lSent\020\007\022\022\n\016StartBallAcked\020\010\022\013\n\007EndBall\020\t"
  "\022\016\n\nEndInnings\020\n\022\017\n\013Reconnected\020\013*G\n\nJoi"
  "nStates\022\013\n\007NoJoins\020\000\022\r\n\tFirstJoin\020\001\022\016\n\nS"
  "econdJoin\020\002\022\r\n\tBothJoins\020\003*[\n\nBallStates"
  "\022\017\n\013NoBallState\020\000\022\021\n\rBallPublished\020\001\022\021\n\r"
  "ShotPublished\020\002\022\013\n\007Outcome\020\003\022\t\n\005Ended\020\004*"
  "H\n\010Brackets\022\r\n\tNoBracket\020\000\022\010\n\004Zero\020\001\022\007\n\003"
  "One\020\002\022\007\n\003Two\020\003\022\010\n\004Four\020\004\022\007\n\003Six\020\005*5\n\006Sku"
  "lls\022\013\n\007NoSkull\020\000\022\t\n\005GREEN\020\001\022\n\n\006YELLOW\020\002\022"
  "\007\n\003RED\020\003*\237\002\n\002SA\022\n\n\006NoneSA\020\000\022\t\n\005Smash\020\001\022\010"
  "\n\004TwoX\020\002\022\017\n\013BowlerSteal\020\003\022\n\n\006Yorker\020\004\022\020\n"
  "\014BatsmanSteal\020\005\022\010\n\004Rage\020\006\022\r\n\tBoomerang\020\007"
  "\022\014\n\010HalfRuns\020\010\022\007\n\003Hex\020\t\022\014\n\010Immortal\020\n\022\010\n"
  "\004Doom\020\013\022\016\n\nFiftyFifty\020\014\022\t\n\005SAHit\020\r\022\t\n\005Ch"
  "oke\020\016\022\r\n\tFlashbang\020\017\022\013\n\007Assault\020\020\022\t\n\005All"
  "In\020\021\022\016\n\nPowersteal\020\022\022\013\n\007Triplet\020\023\022\014\n\010Ove"
  "rload\020\024\022\t\n\005Purge\020\025*3\n\006Strike\022\014\n\010NoStrike"
  "\020\000\022\014\n\010OnStrike\020\001\022\r\n\tOffStrike\020\002B%Z\020pb/mi"
  "tsuko/match\252\002\020Superstars.Matchb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_match_2eproto_deps[1] = {
  &::descriptor_table_payload_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_match_2eproto_sccs[16] = {
  &scc_info_BracketData_match_2eproto.base,
  &scc_info_CreateMatchRequest_match_2eproto.base,
  &scc_info_EndMatchRequest_match_2eproto.base,
  &scc_info_EndMatchUserData_match_2eproto.base,
  &scc_info_IOutcome_match_2eproto.base,
  &scc_info_IPCMessage_match_2eproto.base,
  &scc_info_M_CurrentBall_match_2eproto.base,
  &scc_info_M_Innings_match_2eproto.base,
  &scc_info_M_TBall_match_2eproto.base,
  &scc_info_M_TShot_match_2eproto.base,
  &scc_info_M_UserInfo_match_2eproto.base,
  &scc_info_MatchList_match_2eproto.base,
  &scc_info_MatchModel_match_2eproto.base,
  &scc_info_MatchPlayer_match_2eproto.base,
  &scc_info_SAInfo_match_2eproto.base,
  &scc_info_TOutcome_match_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_match_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_match_2eproto = {
  false, false, descriptor_table_protodef_match_2eproto, "match.proto", 4518,
  &descriptor_table_match_2eproto_once, descriptor_table_match_2eproto_sccs, descriptor_table_match_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_match_2eproto::offsets,
  file_level_metadata_match_2eproto, 16, file_level_enum_descriptors_match_2eproto, file_level_service_descriptors_match_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_match_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_match_2eproto)), true);
namespace MATCH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IPCMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[0];
}
bool IPCMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M_PlayStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[1];
}
bool M_PlayStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[2];
}
bool ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACK_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[3];
}
bool ACK_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[4];
}
bool JoinStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BallStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[5];
}
bool BallStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brackets_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[6];
}
bool Brackets_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Skulls_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[7];
}
bool Skulls_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SA_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[8];
}
bool SA_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Strike_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_match_2eproto);
  return file_level_enum_descriptors_match_2eproto[9];
}
bool Strike_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IPCMessage::InitAsDefaultInstance() {
}
class IPCMessage::_Internal {
 public:
};

IPCMessage::IPCMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.IPCMessage)
}
IPCMessage::IPCMessage(const IPCMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serializeddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serializeddata().empty()) {
    serializeddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serializeddata(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MATCH.IPCMessage)
}

void IPCMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPCMessage_match_2eproto.base);
  serializeddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

IPCMessage::~IPCMessage() {
  // @@protoc_insertion_point(destructor:MATCH.IPCMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPCMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serializeddata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPCMessage::ArenaDtor(void* object) {
  IPCMessage* _this = reinterpret_cast< IPCMessage* >(object);
  (void)_this;
}
void IPCMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPCMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPCMessage& IPCMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPCMessage_match_2eproto.base);
  return *internal_default_instance();
}


void IPCMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.IPCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serializeddata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPCMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MATCH.IPCMessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MATCH::IPCMessageType>(val));
        } else goto handle_unusual;
        continue;
      // bytes serializedData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serializeddata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPCMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.IPCMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MATCH.IPCMessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes serializedData = 2;
  if (this->serializeddata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serializeddata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.IPCMessage)
  return target;
}

size_t IPCMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.IPCMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes serializedData = 2;
  if (this->serializeddata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serializeddata());
  }

  // .MATCH.IPCMessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPCMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.IPCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const IPCMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPCMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.IPCMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.IPCMessage)
    MergeFrom(*source);
  }
}

void IPCMessage::MergeFrom(const IPCMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.IPCMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serializeddata().size() > 0) {
    _internal_set_serializeddata(from._internal_serializeddata());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void IPCMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.IPCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCMessage::CopyFrom(const IPCMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.IPCMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCMessage::IsInitialized() const {
  return true;
}

void IPCMessage::InternalSwap(IPCMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serializeddata_.Swap(&other->serializeddata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPCMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateMatchRequest::InitAsDefaultInstance() {
}
class CreateMatchRequest::_Internal {
 public:
};

void CreateMatchRequest::clear_home_lineup() {
  home_lineup_.Clear();
}
void CreateMatchRequest::clear_away_lineup() {
  away_lineup_.Clear();
}
CreateMatchRequest::CreateMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  home_lineup_(arena),
  away_lineup_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.CreateMatchRequest)
}
CreateMatchRequest::CreateMatchRequest(const CreateMatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      home_lineup_(from.home_lineup_),
      away_lineup_(from.away_lineup_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchid().empty()) {
    matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_matchid(),
      GetArena());
  }
  homeuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_homeuserid().empty()) {
    homeuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_homeuserid(),
      GetArena());
  }
  awayuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_awayuserid().empty()) {
    awayuserid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_awayuserid(),
      GetArena());
  }
  firstbattinguser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firstbattinguser().empty()) {
    firstbattinguser_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firstbattinguser(),
      GetArena());
  }
  ::memcpy(&batsmanmanarequired_, &from.batsmanmanarequired_,
    static_cast<size_t>(reinterpret_cast<char*>(&isftuematch_) -
    reinterpret_cast<char*>(&batsmanmanarequired_)) + sizeof(isftuematch_));
  // @@protoc_insertion_point(copy_constructor:MATCH.CreateMatchRequest)
}

void CreateMatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateMatchRequest_match_2eproto.base);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homeuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awayuserid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firstbattinguser_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&batsmanmanarequired_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isftuematch_) -
      reinterpret_cast<char*>(&batsmanmanarequired_)) + sizeof(isftuematch_));
}

CreateMatchRequest::~CreateMatchRequest() {
  // @@protoc_insertion_point(destructor:MATCH.CreateMatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateMatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  matchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homeuserid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awayuserid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firstbattinguser_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateMatchRequest::ArenaDtor(void* object) {
  CreateMatchRequest* _this = reinterpret_cast< CreateMatchRequest* >(object);
  (void)_this;
}
void CreateMatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateMatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateMatchRequest& CreateMatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateMatchRequest_match_2eproto.base);
  return *internal_default_instance();
}


void CreateMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.CreateMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  home_lineup_.Clear();
  away_lineup_.Clear();
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  homeuserid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  awayuserid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firstbattinguser_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&batsmanmanarequired_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isftuematch_) -
      reinterpret_cast<char*>(&batsmanmanarequired_)) + sizeof(isftuematch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_matchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.CreateMatchRequest.matchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string homeUserId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_homeuserid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.CreateMatchRequest.homeUserId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string awayUserId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_awayuserid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.CreateMatchRequest.awayUserId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.Player home_lineup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_home_lineup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PAYLOAD.Player away_lineup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_away_lineup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string firstBattingUser = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_firstbattinguser();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.CreateMatchRequest.firstBattingUser"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isHomeBot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ishomebot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isAwayBot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isawaybot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 batsmanManaRequired = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          batsmanmanarequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bowlerManaRequired = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bowlermanarequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isRPSEnabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          isrpsenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isPassivesEnabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ispassivesenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxOvers = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          maxovers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFtueMatch = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          isftuematch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.CreateMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchid().data(), static_cast<int>(this->_internal_matchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.CreateMatchRequest.matchId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_matchid(), target);
  }

  // string homeUserId = 2;
  if (this->homeuserid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_homeuserid().data(), static_cast<int>(this->_internal_homeuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.CreateMatchRequest.homeUserId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_homeuserid(), target);
  }

  // string awayUserId = 3;
  if (this->awayuserid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_awayuserid().data(), static_cast<int>(this->_internal_awayuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.CreateMatchRequest.awayUserId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_awayuserid(), target);
  }

  // repeated .PAYLOAD.Player home_lineup = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_home_lineup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_home_lineup(i), target, stream);
  }

  // repeated .PAYLOAD.Player away_lineup = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_away_lineup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_away_lineup(i), target, stream);
  }

  // string firstBattingUser = 6;
  if (this->firstbattinguser().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firstbattinguser().data(), static_cast<int>(this->_internal_firstbattinguser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.CreateMatchRequest.firstBattingUser");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_firstbattinguser(), target);
  }

  // bool isHomeBot = 7;
  if (this->ishomebot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ishomebot(), target);
  }

  // bool isAwayBot = 8;
  if (this->isawaybot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_isawaybot(), target);
  }

  // int32 batsmanManaRequired = 9;
  if (this->batsmanmanarequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_batsmanmanarequired(), target);
  }

  // int32 bowlerManaRequired = 10;
  if (this->bowlermanarequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_bowlermanarequired(), target);
  }

  // bool isRPSEnabled = 11;
  if (this->isrpsenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_isrpsenabled(), target);
  }

  // bool isPassivesEnabled = 12;
  if (this->ispassivesenabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_ispassivesenabled(), target);
  }

  // int32 maxOvers = 13;
  if (this->maxovers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_maxovers(), target);
  }

  // bool isFtueMatch = 14;
  if (this->isftuematch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_isftuematch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.CreateMatchRequest)
  return target;
}

size_t CreateMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.CreateMatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PAYLOAD.Player home_lineup = 4;
  total_size += 1UL * this->_internal_home_lineup_size();
  for (const auto& msg : this->home_lineup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PAYLOAD.Player away_lineup = 5;
  total_size += 1UL * this->_internal_away_lineup_size();
  for (const auto& msg : this->away_lineup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchid());
  }

  // string homeUserId = 2;
  if (this->homeuserid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_homeuserid());
  }

  // string awayUserId = 3;
  if (this->awayuserid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_awayuserid());
  }

  // string firstBattingUser = 6;
  if (this->firstbattinguser().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firstbattinguser());
  }

  // int32 batsmanManaRequired = 9;
  if (this->batsmanmanarequired() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_batsmanmanarequired());
  }

  // bool isHomeBot = 7;
  if (this->ishomebot() != 0) {
    total_size += 1 + 1;
  }

  // bool isAwayBot = 8;
  if (this->isawaybot() != 0) {
    total_size += 1 + 1;
  }

  // bool isRPSEnabled = 11;
  if (this->isrpsenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool isPassivesEnabled = 12;
  if (this->ispassivesenabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 bowlerManaRequired = 10;
  if (this->bowlermanarequired() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bowlermanarequired());
  }

  // int32 maxOvers = 13;
  if (this->maxovers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxovers());
  }

  // bool isFtueMatch = 14;
  if (this->isftuematch() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateMatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.CreateMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateMatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateMatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.CreateMatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.CreateMatchRequest)
    MergeFrom(*source);
  }
}

void CreateMatchRequest::MergeFrom(const CreateMatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.CreateMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  home_lineup_.MergeFrom(from.home_lineup_);
  away_lineup_.MergeFrom(from.away_lineup_);
  if (from.matchid().size() > 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from.homeuserid().size() > 0) {
    _internal_set_homeuserid(from._internal_homeuserid());
  }
  if (from.awayuserid().size() > 0) {
    _internal_set_awayuserid(from._internal_awayuserid());
  }
  if (from.firstbattinguser().size() > 0) {
    _internal_set_firstbattinguser(from._internal_firstbattinguser());
  }
  if (from.batsmanmanarequired() != 0) {
    _internal_set_batsmanmanarequired(from._internal_batsmanmanarequired());
  }
  if (from.ishomebot() != 0) {
    _internal_set_ishomebot(from._internal_ishomebot());
  }
  if (from.isawaybot() != 0) {
    _internal_set_isawaybot(from._internal_isawaybot());
  }
  if (from.isrpsenabled() != 0) {
    _internal_set_isrpsenabled(from._internal_isrpsenabled());
  }
  if (from.ispassivesenabled() != 0) {
    _internal_set_ispassivesenabled(from._internal_ispassivesenabled());
  }
  if (from.bowlermanarequired() != 0) {
    _internal_set_bowlermanarequired(from._internal_bowlermanarequired());
  }
  if (from.maxovers() != 0) {
    _internal_set_maxovers(from._internal_maxovers());
  }
  if (from.isftuematch() != 0) {
    _internal_set_isftuematch(from._internal_isftuematch());
  }
}

void CreateMatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.CreateMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMatchRequest::CopyFrom(const CreateMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.CreateMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMatchRequest::IsInitialized() const {
  return true;
}

void CreateMatchRequest::InternalSwap(CreateMatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  home_lineup_.InternalSwap(&other->home_lineup_);
  away_lineup_.InternalSwap(&other->away_lineup_);
  matchid_.Swap(&other->matchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  homeuserid_.Swap(&other->homeuserid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  awayuserid_.Swap(&other->awayuserid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firstbattinguser_.Swap(&other->firstbattinguser_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateMatchRequest, isftuematch_)
      + sizeof(CreateMatchRequest::isftuematch_)
      - PROTOBUF_FIELD_OFFSET(CreateMatchRequest, batsmanmanarequired_)>(
          reinterpret_cast<char*>(&batsmanmanarequired_),
          reinterpret_cast<char*>(&other->batsmanmanarequired_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndMatchRequest::InitAsDefaultInstance() {
  ::MATCH::_EndMatchRequest_default_instance_._instance.get_mutable()->team1_data_ = const_cast< ::MATCH::EndMatchUserData*>(
      ::MATCH::EndMatchUserData::internal_default_instance());
  ::MATCH::_EndMatchRequest_default_instance_._instance.get_mutable()->team2_data_ = const_cast< ::MATCH::EndMatchUserData*>(
      ::MATCH::EndMatchUserData::internal_default_instance());
}
class EndMatchRequest::_Internal {
 public:
  static const ::MATCH::EndMatchUserData& team1_data(const EndMatchRequest* msg);
  static const ::MATCH::EndMatchUserData& team2_data(const EndMatchRequest* msg);
};

const ::MATCH::EndMatchUserData&
EndMatchRequest::_Internal::team1_data(const EndMatchRequest* msg) {
  return *msg->team1_data_;
}
const ::MATCH::EndMatchUserData&
EndMatchRequest::_Internal::team2_data(const EndMatchRequest* msg) {
  return *msg->team2_data_;
}
EndMatchRequest::EndMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.EndMatchRequest)
}
EndMatchRequest::EndMatchRequest(const EndMatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchid().empty()) {
    matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_matchid(),
      GetArena());
  }
  winnerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_winnerid().empty()) {
    winnerid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_winnerid(),
      GetArena());
  }
  if (from._internal_has_team1_data()) {
    team1_data_ = new ::MATCH::EndMatchUserData(*from.team1_data_);
  } else {
    team1_data_ = nullptr;
  }
  if (from._internal_has_team2_data()) {
    team2_data_ = new ::MATCH::EndMatchUserData(*from.team2_data_);
  } else {
    team2_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MATCH.EndMatchRequest)
}

void EndMatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndMatchRequest_match_2eproto.base);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  winnerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&team1_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team2_data_) -
      reinterpret_cast<char*>(&team1_data_)) + sizeof(team2_data_));
}

EndMatchRequest::~EndMatchRequest() {
  // @@protoc_insertion_point(destructor:MATCH.EndMatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndMatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  matchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  winnerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete team1_data_;
  if (this != internal_default_instance()) delete team2_data_;
}

void EndMatchRequest::ArenaDtor(void* object) {
  EndMatchRequest* _this = reinterpret_cast< EndMatchRequest* >(object);
  (void)_this;
}
void EndMatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndMatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndMatchRequest& EndMatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndMatchRequest_match_2eproto.base);
  return *internal_default_instance();
}


void EndMatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.EndMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  winnerid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && team1_data_ != nullptr) {
    delete team1_data_;
  }
  team1_data_ = nullptr;
  if (GetArena() == nullptr && team2_data_ != nullptr) {
    delete team2_data_;
  }
  team2_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndMatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_matchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.EndMatchRequest.matchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.EndMatchUserData team1_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team1_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.EndMatchUserData team2_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_team2_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string winnerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_winnerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.EndMatchRequest.winnerId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndMatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.EndMatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchid().data(), static_cast<int>(this->_internal_matchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.EndMatchRequest.matchId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_matchid(), target);
  }

  // .MATCH.EndMatchUserData team1_data = 2;
  if (this->has_team1_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::team1_data(this), target, stream);
  }

  // .MATCH.EndMatchUserData team2_data = 3;
  if (this->has_team2_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::team2_data(this), target, stream);
  }

  // string winnerId = 4;
  if (this->winnerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_winnerid().data(), static_cast<int>(this->_internal_winnerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.EndMatchRequest.winnerId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_winnerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.EndMatchRequest)
  return target;
}

size_t EndMatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.EndMatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchid());
  }

  // string winnerId = 4;
  if (this->winnerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_winnerid());
  }

  // .MATCH.EndMatchUserData team1_data = 2;
  if (this->has_team1_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team1_data_);
  }

  // .MATCH.EndMatchUserData team2_data = 3;
  if (this->has_team2_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team2_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndMatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.EndMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EndMatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndMatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.EndMatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.EndMatchRequest)
    MergeFrom(*source);
  }
}

void EndMatchRequest::MergeFrom(const EndMatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.EndMatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.matchid().size() > 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from.winnerid().size() > 0) {
    _internal_set_winnerid(from._internal_winnerid());
  }
  if (from.has_team1_data()) {
    _internal_mutable_team1_data()->::MATCH::EndMatchUserData::MergeFrom(from._internal_team1_data());
  }
  if (from.has_team2_data()) {
    _internal_mutable_team2_data()->::MATCH::EndMatchUserData::MergeFrom(from._internal_team2_data());
  }
}

void EndMatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.EndMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndMatchRequest::CopyFrom(const EndMatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.EndMatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndMatchRequest::IsInitialized() const {
  return true;
}

void EndMatchRequest::InternalSwap(EndMatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matchid_.Swap(&other->matchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  winnerid_.Swap(&other->winnerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndMatchRequest, team2_data_)
      + sizeof(EndMatchRequest::team2_data_)
      - PROTOBUF_FIELD_OFFSET(EndMatchRequest, team1_data_)>(
          reinterpret_cast<char*>(&team1_data_),
          reinterpret_cast<char*>(&other->team1_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndMatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndMatchUserData::InitAsDefaultInstance() {
}
class EndMatchUserData::_Internal {
 public:
};

EndMatchUserData::EndMatchUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.EndMatchUserData)
}
EndMatchUserData::EndMatchUserData(const EndMatchUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&quit_) -
    reinterpret_cast<char*>(&total_)) + sizeof(quit_));
  // @@protoc_insertion_point(copy_constructor:MATCH.EndMatchUserData)
}

void EndMatchUserData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndMatchUserData_match_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quit_) -
      reinterpret_cast<char*>(&total_)) + sizeof(quit_));
}

EndMatchUserData::~EndMatchUserData() {
  // @@protoc_insertion_point(destructor:MATCH.EndMatchUserData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndMatchUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndMatchUserData::ArenaDtor(void* object) {
  EndMatchUserData* _this = reinterpret_cast< EndMatchUserData* >(object);
  (void)_this;
}
void EndMatchUserData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndMatchUserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndMatchUserData& EndMatchUserData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndMatchUserData_match_2eproto.base);
  return *internal_default_instance();
}


void EndMatchUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.EndMatchUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quit_) -
      reinterpret_cast<char*>(&total_)) + sizeof(quit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndMatchUserData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.EndMatchUserData.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wickets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wickets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 balls_faced = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          balls_faced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool quit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          quit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndMatchUserData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.EndMatchUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.EndMatchUserData.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int32 total = 2;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  // int32 wickets = 3;
  if (this->wickets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wickets(), target);
  }

  // int32 balls_faced = 4;
  if (this->balls_faced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_balls_faced(), target);
  }

  // bool quit = 5;
  if (this->quit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_quit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.EndMatchUserData)
  return target;
}

size_t EndMatchUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.EndMatchUserData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 total = 2;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  // int32 wickets = 3;
  if (this->wickets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wickets());
  }

  // int32 balls_faced = 4;
  if (this->balls_faced() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_balls_faced());
  }

  // bool quit = 5;
  if (this->quit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndMatchUserData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.EndMatchUserData)
  GOOGLE_DCHECK_NE(&from, this);
  const EndMatchUserData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndMatchUserData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.EndMatchUserData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.EndMatchUserData)
    MergeFrom(*source);
  }
}

void EndMatchUserData::MergeFrom(const EndMatchUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.EndMatchUserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
  if (from.wickets() != 0) {
    _internal_set_wickets(from._internal_wickets());
  }
  if (from.balls_faced() != 0) {
    _internal_set_balls_faced(from._internal_balls_faced());
  }
  if (from.quit() != 0) {
    _internal_set_quit(from._internal_quit());
  }
}

void EndMatchUserData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.EndMatchUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndMatchUserData::CopyFrom(const EndMatchUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.EndMatchUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndMatchUserData::IsInitialized() const {
  return true;
}

void EndMatchUserData::InternalSwap(EndMatchUserData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndMatchUserData, quit_)
      + sizeof(EndMatchUserData::quit_)
      - PROTOBUF_FIELD_OFFSET(EndMatchUserData, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndMatchUserData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchList::InitAsDefaultInstance() {
}
class MatchList::_Internal {
 public:
};

MatchList::MatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matchid_(arena),
  home_(arena),
  away_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.MatchList)
}
MatchList::MatchList(const MatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matchid_(from.matchid_),
      home_(from.home_),
      away_(from.away_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MATCH.MatchList)
}

void MatchList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchList_match_2eproto.base);
}

MatchList::~MatchList() {
  // @@protoc_insertion_point(destructor:MATCH.MatchList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchList::ArenaDtor(void* object) {
  MatchList* _this = reinterpret_cast< MatchList* >(object);
  (void)_this;
}
void MatchList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchList& MatchList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchList_match_2eproto.base);
  return *internal_default_instance();
}


void MatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchid_.Clear();
  home_.Clear();
  away_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string MatchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_matchid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.MatchList.MatchId"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string Home = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_home();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.MatchList.Home"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string Away = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_away();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.MatchList.Away"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.MatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string MatchId = 1;
  for (int i = 0, n = this->_internal_matchid_size(); i < n; i++) {
    const auto& s = this->_internal_matchid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.MatchList.MatchId");
    target = stream->WriteString(1, s, target);
  }

  // repeated string Home = 2;
  for (int i = 0, n = this->_internal_home_size(); i < n; i++) {
    const auto& s = this->_internal_home(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.MatchList.Home");
    target = stream->WriteString(2, s, target);
  }

  // repeated string Away = 3;
  for (int i = 0, n = this->_internal_away_size(); i < n; i++) {
    const auto& s = this->_internal_away(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.MatchList.Away");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.MatchList)
  return target;
}

size_t MatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.MatchList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string MatchId = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(matchid_.size());
  for (int i = 0, n = matchid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      matchid_.Get(i));
  }

  // repeated string Home = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(home_.size());
  for (int i = 0, n = home_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      home_.Get(i));
  }

  // repeated string Away = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(away_.size());
  for (int i = 0, n = away_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      away_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.MatchList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.MatchList)
    MergeFrom(*source);
  }
}

void MatchList::MergeFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.MatchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchid_.MergeFrom(from.matchid_);
  home_.MergeFrom(from.home_);
  away_.MergeFrom(from.away_);
}

void MatchList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchList::CopyFrom(const MatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchList::IsInitialized() const {
  return true;
}

void MatchList::InternalSwap(MatchList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matchid_.InternalSwap(&other->matchid_);
  home_.InternalSwap(&other->home_);
  away_.InternalSwap(&other->away_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAInfo::InitAsDefaultInstance() {
}
class SAInfo::_Internal {
 public:
};

SAInfo::SAInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.SAInfo)
}
SAInfo::SAInfo(const SAInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_duration_) -
    reinterpret_cast<char*>(&type_)) + sizeof(max_duration_));
  // @@protoc_insertion_point(copy_constructor:MATCH.SAInfo)
}

void SAInfo::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_duration_) -
      reinterpret_cast<char*>(&type_)) + sizeof(max_duration_));
}

SAInfo::~SAInfo() {
  // @@protoc_insertion_point(destructor:MATCH.SAInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAInfo::ArenaDtor(void* object) {
  SAInfo* _this = reinterpret_cast< SAInfo* >(object);
  (void)_this;
}
void SAInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAInfo& SAInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAInfo_match_2eproto.base);
  return *internal_default_instance();
}


void SAInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.SAInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_duration_) -
      reinterpret_cast<char*>(&type_)) + sizeof(max_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MATCH.SA type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MATCH::SA>(val));
        } else goto handle_unusual;
        continue;
      // int32 duration_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool applied_for_current_ball = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          applied_for_current_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.SAInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MATCH.SA type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 duration_left = 2;
  if (this->duration_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration_left(), target);
  }

  // bool applied_for_current_ball = 3;
  if (this->applied_for_current_ball() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_applied_for_current_ball(), target);
  }

  // int32 max_duration = 4;
  if (this->max_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.SAInfo)
  return target;
}

size_t SAInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.SAInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MATCH.SA type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 duration_left = 2;
  if (this->duration_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration_left());
  }

  // bool applied_for_current_ball = 3;
  if (this->applied_for_current_ball() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_duration = 4;
  if (this->max_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.SAInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SAInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.SAInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.SAInfo)
    MergeFrom(*source);
  }
}

void SAInfo::MergeFrom(const SAInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.SAInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.duration_left() != 0) {
    _internal_set_duration_left(from._internal_duration_left());
  }
  if (from.applied_for_current_ball() != 0) {
    _internal_set_applied_for_current_ball(from._internal_applied_for_current_ball());
  }
  if (from.max_duration() != 0) {
    _internal_set_max_duration(from._internal_max_duration());
  }
}

void SAInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.SAInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAInfo::CopyFrom(const SAInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.SAInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAInfo::IsInitialized() const {
  return true;
}

void SAInfo::InternalSwap(SAInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SAInfo, max_duration_)
      + sizeof(SAInfo::max_duration_)
      - PROTOBUF_FIELD_OFFSET(SAInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SAInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M_UserInfo::InitAsDefaultInstance() {
  ::MATCH::_M_UserInfo_default_instance_._instance.get_mutable()->sa_info_ = const_cast< ::MATCH::SAInfo*>(
      ::MATCH::SAInfo::internal_default_instance());
}
class M_UserInfo::_Internal {
 public:
  static const ::MATCH::SAInfo& sa_info(const M_UserInfo* msg);
};

const ::MATCH::SAInfo&
M_UserInfo::_Internal::sa_info(const M_UserInfo* msg) {
  return *msg->sa_info_;
}
M_UserInfo::M_UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.M_UserInfo)
}
M_UserInfo::M_UserInfo(const M_UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opponentuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_opponentuid().empty()) {
    opponentuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opponentuid(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_sa_info()) {
    sa_info_ = new ::MATCH::SAInfo(*from.sa_info_);
  } else {
    sa_info_ = nullptr;
  }
  ::memcpy(&playstate_, &from.playstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&mana_fill_) -
    reinterpret_cast<char*>(&playstate_)) + sizeof(mana_fill_));
  // @@protoc_insertion_point(copy_constructor:MATCH.M_UserInfo)
}

void M_UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M_UserInfo_match_2eproto.base);
  opponentuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sa_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mana_fill_) -
      reinterpret_cast<char*>(&sa_info_)) + sizeof(mana_fill_));
}

M_UserInfo::~M_UserInfo() {
  // @@protoc_insertion_point(destructor:MATCH.M_UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void M_UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  opponentuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sa_info_;
}

void M_UserInfo::ArenaDtor(void* object) {
  M_UserInfo* _this = reinterpret_cast< M_UserInfo* >(object);
  (void)_this;
}
void M_UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M_UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M_UserInfo& M_UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M_UserInfo_match_2eproto.base);
  return *internal_default_instance();
}


void M_UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.M_UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opponentuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sa_info_ != nullptr) {
    delete sa_info_;
  }
  sa_info_ = nullptr;
  ::memset(&playstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mana_fill_) -
      reinterpret_cast<char*>(&playstate_)) + sizeof(mana_fill_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* M_UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MATCH.M_PlayStates playState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playstate(static_cast<::MATCH::M_PlayStates>(val));
        } else goto handle_unusual;
        continue;
      // .MATCH.ConnectionState connectionState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectionstate(static_cast<::MATCH::ConnectionState>(val));
        } else goto handle_unusual;
        continue;
      // string opponentUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_opponentuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.M_UserInfo.opponentUID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.ACK ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ack(static_cast<::MATCH::ACK>(val));
        } else goto handle_unusual;
        continue;
      // bool auto_play = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          auto_play_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mana_fill = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          mana_fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.SAInfo sa_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sa_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.M_UserInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M_UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.M_UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MATCH.M_PlayStates playState = 1;
  if (this->playstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_playstate(), target);
  }

  // .MATCH.ConnectionState connectionState = 2;
  if (this->connectionstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connectionstate(), target);
  }

  // string opponentUID = 3;
  if (this->opponentuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opponentuid().data(), static_cast<int>(this->_internal_opponentuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.M_UserInfo.opponentUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_opponentuid(), target);
  }

  // .MATCH.ACK ack = 4;
  if (this->ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_ack(), target);
  }

  // bool auto_play = 5;
  if (this->auto_play() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_auto_play(), target);
  }

  // int32 mana_fill = 6;
  if (this->mana_fill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mana_fill(), target);
  }

  // .MATCH.SAInfo sa_info = 7;
  if (this->has_sa_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sa_info(this), target, stream);
  }

  // string id = 8;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.M_UserInfo.id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.M_UserInfo)
  return target;
}

size_t M_UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.M_UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string opponentUID = 3;
  if (this->opponentuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opponentuid());
  }

  // string id = 8;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .MATCH.SAInfo sa_info = 7;
  if (this->has_sa_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sa_info_);
  }

  // .MATCH.M_PlayStates playState = 1;
  if (this->playstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playstate());
  }

  // .MATCH.ConnectionState connectionState = 2;
  if (this->connectionstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectionstate());
  }

  // .MATCH.ACK ack = 4;
  if (this->ack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ack());
  }

  // bool auto_play = 5;
  if (this->auto_play() != 0) {
    total_size += 1 + 1;
  }

  // int32 mana_fill = 6;
  if (this->mana_fill() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mana_fill());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M_UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.M_UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const M_UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M_UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.M_UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.M_UserInfo)
    MergeFrom(*source);
  }
}

void M_UserInfo::MergeFrom(const M_UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.M_UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opponentuid().size() > 0) {
    _internal_set_opponentuid(from._internal_opponentuid());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_sa_info()) {
    _internal_mutable_sa_info()->::MATCH::SAInfo::MergeFrom(from._internal_sa_info());
  }
  if (from.playstate() != 0) {
    _internal_set_playstate(from._internal_playstate());
  }
  if (from.connectionstate() != 0) {
    _internal_set_connectionstate(from._internal_connectionstate());
  }
  if (from.ack() != 0) {
    _internal_set_ack(from._internal_ack());
  }
  if (from.auto_play() != 0) {
    _internal_set_auto_play(from._internal_auto_play());
  }
  if (from.mana_fill() != 0) {
    _internal_set_mana_fill(from._internal_mana_fill());
  }
}

void M_UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.M_UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M_UserInfo::CopyFrom(const M_UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.M_UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M_UserInfo::IsInitialized() const {
  return true;
}

void M_UserInfo::InternalSwap(M_UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  opponentuid_.Swap(&other->opponentuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(M_UserInfo, mana_fill_)
      + sizeof(M_UserInfo::mana_fill_)
      - PROTOBUF_FIELD_OFFSET(M_UserInfo, sa_info_)>(
          reinterpret_cast<char*>(&sa_info_),
          reinterpret_cast<char*>(&other->sa_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata M_UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M_TShot::InitAsDefaultInstance() {
}
class M_TShot::_Internal {
 public:
};

M_TShot::M_TShot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.M_TShot)
}
M_TShot::M_TShot(const M_TShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_hidden_) -
    reinterpret_cast<char*>(&id_)) + sizeof(probability_hidden_));
  // @@protoc_insertion_point(copy_constructor:MATCH.M_TShot)
}

void M_TShot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M_TShot_match_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_hidden_) -
      reinterpret_cast<char*>(&id_)) + sizeof(probability_hidden_));
}

M_TShot::~M_TShot() {
  // @@protoc_insertion_point(destructor:MATCH.M_TShot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void M_TShot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M_TShot::ArenaDtor(void* object) {
  M_TShot* _this = reinterpret_cast< M_TShot* >(object);
  (void)_this;
}
void M_TShot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M_TShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M_TShot& M_TShot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M_TShot_match_2eproto.base);
  return *internal_default_instance();
}


void M_TShot::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.M_TShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_hidden_) -
      reinterpret_cast<char*>(&id_)) + sizeof(probability_hidden_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* M_TShot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.M_TShot.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 run = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.Brackets bracket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bracket(static_cast<::MATCH::Brackets>(val));
        } else goto handle_unusual;
        continue;
      // float probability = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wicket_chance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          wicket_chance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double ball_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ball_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double shot_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          shot_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool locked = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shot_hidden = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          shot_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool probability_hidden = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          probability_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M_TShot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.M_TShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.M_TShot.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 run = 3;
  if (this->run() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_run(), target);
  }

  // .MATCH.Brackets bracket = 4;
  if (this->bracket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_bracket(), target);
  }

  // float probability = 5;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_probability(), target);
  }

  // float wicket_chance = 6;
  if (!(this->wicket_chance() <= 0 && this->wicket_chance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_wicket_chance(), target);
  }

  // double ball_value = 7;
  if (!(this->ball_value() <= 0 && this->ball_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ball_value(), target);
  }

  // double shot_value = 8;
  if (!(this->shot_value() <= 0 && this->shot_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_shot_value(), target);
  }

  // bool locked = 9;
  if (this->locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_locked(), target);
  }

  // bool shot_hidden = 10;
  if (this->shot_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_shot_hidden(), target);
  }

  // bool probability_hidden = 11;
  if (this->probability_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_probability_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.M_TShot)
  return target;
}

size_t M_TShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.M_TShot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 run = 3;
  if (this->run() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_run());
  }

  // .MATCH.Brackets bracket = 4;
  if (this->bracket() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bracket());
  }

  // float probability = 5;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 4;
  }

  // double ball_value = 7;
  if (!(this->ball_value() <= 0 && this->ball_value() >= 0)) {
    total_size += 1 + 8;
  }

  // double shot_value = 8;
  if (!(this->shot_value() <= 0 && this->shot_value() >= 0)) {
    total_size += 1 + 8;
  }

  // float wicket_chance = 6;
  if (!(this->wicket_chance() <= 0 && this->wicket_chance() >= 0)) {
    total_size += 1 + 4;
  }

  // bool locked = 9;
  if (this->locked() != 0) {
    total_size += 1 + 1;
  }

  // bool shot_hidden = 10;
  if (this->shot_hidden() != 0) {
    total_size += 1 + 1;
  }

  // bool probability_hidden = 11;
  if (this->probability_hidden() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M_TShot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.M_TShot)
  GOOGLE_DCHECK_NE(&from, this);
  const M_TShot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M_TShot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.M_TShot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.M_TShot)
    MergeFrom(*source);
  }
}

void M_TShot::MergeFrom(const M_TShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.M_TShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.run() != 0) {
    _internal_set_run(from._internal_run());
  }
  if (from.bracket() != 0) {
    _internal_set_bracket(from._internal_bracket());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    _internal_set_probability(from._internal_probability());
  }
  if (!(from.ball_value() <= 0 && from.ball_value() >= 0)) {
    _internal_set_ball_value(from._internal_ball_value());
  }
  if (!(from.shot_value() <= 0 && from.shot_value() >= 0)) {
    _internal_set_shot_value(from._internal_shot_value());
  }
  if (!(from.wicket_chance() <= 0 && from.wicket_chance() >= 0)) {
    _internal_set_wicket_chance(from._internal_wicket_chance());
  }
  if (from.locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
  if (from.shot_hidden() != 0) {
    _internal_set_shot_hidden(from._internal_shot_hidden());
  }
  if (from.probability_hidden() != 0) {
    _internal_set_probability_hidden(from._internal_probability_hidden());
  }
}

void M_TShot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.M_TShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M_TShot::CopyFrom(const M_TShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.M_TShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M_TShot::IsInitialized() const {
  return true;
}

void M_TShot::InternalSwap(M_TShot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(M_TShot, probability_hidden_)
      + sizeof(M_TShot::probability_hidden_)
      - PROTOBUF_FIELD_OFFSET(M_TShot, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata M_TShot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BracketData::InitAsDefaultInstance() {
}
class BracketData::_Internal {
 public:
};

BracketData::BracketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.BracketData)
}
BracketData::BracketData(const BracketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bracket_id_, &from.bracket_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shot_id_) -
    reinterpret_cast<char*>(&bracket_id_)) + sizeof(shot_id_));
  // @@protoc_insertion_point(copy_constructor:MATCH.BracketData)
}

void BracketData::SharedCtor() {
  ::memset(&bracket_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shot_id_) -
      reinterpret_cast<char*>(&bracket_id_)) + sizeof(shot_id_));
}

BracketData::~BracketData() {
  // @@protoc_insertion_point(destructor:MATCH.BracketData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BracketData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BracketData::ArenaDtor(void* object) {
  BracketData* _this = reinterpret_cast< BracketData* >(object);
  (void)_this;
}
void BracketData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BracketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BracketData& BracketData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BracketData_match_2eproto.base);
  return *internal_default_instance();
}


void BracketData::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.BracketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bracket_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shot_id_) -
      reinterpret_cast<char*>(&bracket_id_)) + sizeof(shot_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BracketData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MATCH.Brackets bracket_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bracket_id(static_cast<::MATCH::Brackets>(val));
        } else goto handle_unusual;
        continue;
      // int32 shot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          shot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BracketData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.BracketData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MATCH.Brackets bracket_id = 1;
  if (this->bracket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_bracket_id(), target);
  }

  // int32 shot_id = 2;
  if (this->shot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.BracketData)
  return target;
}

size_t BracketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.BracketData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MATCH.Brackets bracket_id = 1;
  if (this->bracket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bracket_id());
  }

  // int32 shot_id = 2;
  if (this->shot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BracketData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.BracketData)
  GOOGLE_DCHECK_NE(&from, this);
  const BracketData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BracketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.BracketData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.BracketData)
    MergeFrom(*source);
  }
}

void BracketData::MergeFrom(const BracketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.BracketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bracket_id() != 0) {
    _internal_set_bracket_id(from._internal_bracket_id());
  }
  if (from.shot_id() != 0) {
    _internal_set_shot_id(from._internal_shot_id());
  }
}

void BracketData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.BracketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BracketData::CopyFrom(const BracketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.BracketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BracketData::IsInitialized() const {
  return true;
}

void BracketData::InternalSwap(BracketData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BracketData, shot_id_)
      + sizeof(BracketData::shot_id_)
      - PROTOBUF_FIELD_OFFSET(BracketData, bracket_id_)>(
          reinterpret_cast<char*>(&bracket_id_),
          reinterpret_cast<char*>(&other->bracket_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BracketData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M_TBall::InitAsDefaultInstance() {
}
class M_TBall::_Internal {
 public:
};

M_TBall::M_TBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shots_possible_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.M_TBall)
}
M_TBall::M_TBall(const M_TBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shots_possible_(from.shots_possible_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:MATCH.M_TBall)
}

void M_TBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M_TBall_match_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

M_TBall::~M_TBall() {
  // @@protoc_insertion_point(destructor:MATCH.M_TBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void M_TBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M_TBall::ArenaDtor(void* object) {
  M_TBall* _this = reinterpret_cast< M_TBall* >(object);
  (void)_this;
}
void M_TBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M_TBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M_TBall& M_TBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M_TBall_match_2eproto.base);
  return *internal_default_instance();
}


void M_TBall::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.M_TBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shots_possible_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* M_TBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.M_TBall.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .MATCH.Skulls skull = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skull(static_cast<::MATCH::Skulls>(val));
        } else goto handle_unusual;
        continue;
      // repeated .MATCH.BracketData shots_possible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shots_possible(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M_TBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.M_TBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.M_TBall.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  // .MATCH.Skulls skull = 4;
  if (this->skull() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_skull(), target);
  }

  // repeated .MATCH.BracketData shots_possible = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shots_possible_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shots_possible(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.M_TBall)
  return target;
}

size_t M_TBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.M_TBall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MATCH.BracketData shots_possible = 5;
  total_size += 1UL * this->_internal_shots_possible_size();
  for (const auto& msg : this->shots_possible_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .MATCH.Skulls skull = 4;
  if (this->skull() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_skull());
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M_TBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.M_TBall)
  GOOGLE_DCHECK_NE(&from, this);
  const M_TBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M_TBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.M_TBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.M_TBall)
    MergeFrom(*source);
  }
}

void M_TBall::MergeFrom(const M_TBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.M_TBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shots_possible_.MergeFrom(from.shots_possible_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.skull() != 0) {
    _internal_set_skull(from._internal_skull());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void M_TBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.M_TBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M_TBall::CopyFrom(const M_TBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.M_TBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M_TBall::IsInitialized() const {
  return true;
}

void M_TBall::InternalSwap(M_TBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shots_possible_.InternalSwap(&other->shots_possible_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(M_TBall, value_)
      + sizeof(M_TBall::value_)
      - PROTOBUF_FIELD_OFFSET(M_TBall, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata M_TBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TOutcome::InitAsDefaultInstance() {
}
class TOutcome::_Internal {
 public:
};

TOutcome::TOutcome(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.TOutcome)
}
TOutcome::TOutcome(const TOutcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&outcome_, &from.outcome_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_) -
    reinterpret_cast<char*>(&outcome_)) + sizeof(random_));
  // @@protoc_insertion_point(copy_constructor:MATCH.TOutcome)
}

void TOutcome::SharedCtor() {
  ::memset(&outcome_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_) -
      reinterpret_cast<char*>(&outcome_)) + sizeof(random_));
}

TOutcome::~TOutcome() {
  // @@protoc_insertion_point(destructor:MATCH.TOutcome)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TOutcome::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TOutcome::ArenaDtor(void* object) {
  TOutcome* _this = reinterpret_cast< TOutcome* >(object);
  (void)_this;
}
void TOutcome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TOutcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TOutcome& TOutcome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TOutcome_match_2eproto.base);
  return *internal_default_instance();
}


void TOutcome::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.TOutcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&outcome_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_) -
      reinterpret_cast<char*>(&outcome_)) + sizeof(random_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOutcome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PAYLOAD.ShotOutcomes outcome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_outcome(static_cast<::PAYLOAD::ShotOutcomes>(val));
        } else goto handle_unusual;
        continue;
      // int32 runs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          runs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double random = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          random_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TOutcome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.TOutcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PAYLOAD.ShotOutcomes outcome = 1;
  if (this->outcome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_outcome(), target);
  }

  // int32 runs = 2;
  if (this->runs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_runs(), target);
  }

  // double random = 3;
  if (!(this->random() <= 0 && this->random() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_random(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.TOutcome)
  return target;
}

size_t TOutcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.TOutcome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PAYLOAD.ShotOutcomes outcome = 1;
  if (this->outcome() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outcome());
  }

  // int32 runs = 2;
  if (this->runs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runs());
  }

  // double random = 3;
  if (!(this->random() <= 0 && this->random() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TOutcome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.TOutcome)
  GOOGLE_DCHECK_NE(&from, this);
  const TOutcome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TOutcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.TOutcome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.TOutcome)
    MergeFrom(*source);
  }
}

void TOutcome::MergeFrom(const TOutcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.TOutcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.outcome() != 0) {
    _internal_set_outcome(from._internal_outcome());
  }
  if (from.runs() != 0) {
    _internal_set_runs(from._internal_runs());
  }
  if (!(from.random() <= 0 && from.random() >= 0)) {
    _internal_set_random(from._internal_random());
  }
}

void TOutcome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.TOutcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOutcome::CopyFrom(const TOutcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.TOutcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOutcome::IsInitialized() const {
  return true;
}

void TOutcome::InternalSwap(TOutcome* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TOutcome, random_)
      + sizeof(TOutcome::random_)
      - PROTOBUF_FIELD_OFFSET(TOutcome, outcome_)>(
          reinterpret_cast<char*>(&outcome_),
          reinterpret_cast<char*>(&other->outcome_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TOutcome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M_CurrentBall::InitAsDefaultInstance() {
  ::MATCH::_M_CurrentBall_default_instance_._instance.get_mutable()->outcome_ = const_cast< ::MATCH::TOutcome*>(
      ::MATCH::TOutcome::internal_default_instance());
  ::MATCH::_M_CurrentBall_default_instance_._instance.get_mutable()->selectedball_ = const_cast< ::MATCH::M_TBall*>(
      ::MATCH::M_TBall::internal_default_instance());
  ::MATCH::_M_CurrentBall_default_instance_._instance.get_mutable()->selectedshot_ = const_cast< ::MATCH::M_TShot*>(
      ::MATCH::M_TShot::internal_default_instance());
}
class M_CurrentBall::_Internal {
 public:
  static const ::MATCH::TOutcome& outcome(const M_CurrentBall* msg);
  static const ::MATCH::M_TBall& selectedball(const M_CurrentBall* msg);
  static const ::MATCH::M_TShot& selectedshot(const M_CurrentBall* msg);
};

const ::MATCH::TOutcome&
M_CurrentBall::_Internal::outcome(const M_CurrentBall* msg) {
  return *msg->outcome_;
}
const ::MATCH::M_TBall&
M_CurrentBall::_Internal::selectedball(const M_CurrentBall* msg) {
  return *msg->selectedball_;
}
const ::MATCH::M_TShot&
M_CurrentBall::_Internal::selectedshot(const M_CurrentBall* msg) {
  return *msg->selectedshot_;
}
M_CurrentBall::M_CurrentBall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shots_(arena),
  balls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.M_CurrentBall)
}
M_CurrentBall::M_CurrentBall(const M_CurrentBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shots_(from.shots_),
      balls_(from.balls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outcome()) {
    outcome_ = new ::MATCH::TOutcome(*from.outcome_);
  } else {
    outcome_ = nullptr;
  }
  if (from._internal_has_selectedball()) {
    selectedball_ = new ::MATCH::M_TBall(*from.selectedball_);
  } else {
    selectedball_ = nullptr;
  }
  if (from._internal_has_selectedshot()) {
    selectedshot_ = new ::MATCH::M_TShot(*from.selectedshot_);
  } else {
    selectedshot_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&over_ball_number_) -
    reinterpret_cast<char*>(&state_)) + sizeof(over_ball_number_));
  // @@protoc_insertion_point(copy_constructor:MATCH.M_CurrentBall)
}

void M_CurrentBall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M_CurrentBall_match_2eproto.base);
  ::memset(&outcome_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&over_ball_number_) -
      reinterpret_cast<char*>(&outcome_)) + sizeof(over_ball_number_));
}

M_CurrentBall::~M_CurrentBall() {
  // @@protoc_insertion_point(destructor:MATCH.M_CurrentBall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void M_CurrentBall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete outcome_;
  if (this != internal_default_instance()) delete selectedball_;
  if (this != internal_default_instance()) delete selectedshot_;
}

void M_CurrentBall::ArenaDtor(void* object) {
  M_CurrentBall* _this = reinterpret_cast< M_CurrentBall* >(object);
  (void)_this;
}
void M_CurrentBall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M_CurrentBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M_CurrentBall& M_CurrentBall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M_CurrentBall_match_2eproto.base);
  return *internal_default_instance();
}


void M_CurrentBall::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.M_CurrentBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shots_.Clear();
  balls_.Clear();
  if (GetArena() == nullptr && outcome_ != nullptr) {
    delete outcome_;
  }
  outcome_ = nullptr;
  if (GetArena() == nullptr && selectedball_ != nullptr) {
    delete selectedball_;
  }
  selectedball_ = nullptr;
  if (GetArena() == nullptr && selectedshot_ != nullptr) {
    delete selectedshot_;
  }
  selectedshot_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&over_ball_number_) -
      reinterpret_cast<char*>(&state_)) + sizeof(over_ball_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* M_CurrentBall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MATCH.BallStates state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::MATCH::BallStates>(val));
        } else goto handle_unusual;
        continue;
      // .MATCH.TOutcome outcome = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_outcome(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MATCH.M_TShot shots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MATCH.M_TBall balls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .MATCH.M_TBall selectedBall = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.M_TShot selectedShot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 over_ball_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          over_ball_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M_CurrentBall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.M_CurrentBall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MATCH.BallStates state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .MATCH.TOutcome outcome = 2;
  if (this->has_outcome()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::outcome(this), target, stream);
  }

  // repeated .MATCH.M_TShot shots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_shots(i), target, stream);
  }

  // repeated .MATCH.M_TBall balls = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_balls(i), target, stream);
  }

  // .MATCH.M_TBall selectedBall = 5;
  if (this->has_selectedball()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::selectedball(this), target, stream);
  }

  // .MATCH.M_TShot selectedShot = 6;
  if (this->has_selectedshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::selectedshot(this), target, stream);
  }

  // int32 over_ball_number = 7;
  if (this->over_ball_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_over_ball_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.M_CurrentBall)
  return target;
}

size_t M_CurrentBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.M_CurrentBall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MATCH.M_TShot shots = 3;
  total_size += 1UL * this->_internal_shots_size();
  for (const auto& msg : this->shots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MATCH.M_TBall balls = 4;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .MATCH.TOutcome outcome = 2;
  if (this->has_outcome()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outcome_);
  }

  // .MATCH.M_TBall selectedBall = 5;
  if (this->has_selectedball()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedball_);
  }

  // .MATCH.M_TShot selectedShot = 6;
  if (this->has_selectedshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedshot_);
  }

  // .MATCH.BallStates state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 over_ball_number = 7;
  if (this->over_ball_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_ball_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M_CurrentBall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.M_CurrentBall)
  GOOGLE_DCHECK_NE(&from, this);
  const M_CurrentBall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M_CurrentBall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.M_CurrentBall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.M_CurrentBall)
    MergeFrom(*source);
  }
}

void M_CurrentBall::MergeFrom(const M_CurrentBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.M_CurrentBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shots_.MergeFrom(from.shots_);
  balls_.MergeFrom(from.balls_);
  if (from.has_outcome()) {
    _internal_mutable_outcome()->::MATCH::TOutcome::MergeFrom(from._internal_outcome());
  }
  if (from.has_selectedball()) {
    _internal_mutable_selectedball()->::MATCH::M_TBall::MergeFrom(from._internal_selectedball());
  }
  if (from.has_selectedshot()) {
    _internal_mutable_selectedshot()->::MATCH::M_TShot::MergeFrom(from._internal_selectedshot());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.over_ball_number() != 0) {
    _internal_set_over_ball_number(from._internal_over_ball_number());
  }
}

void M_CurrentBall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.M_CurrentBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M_CurrentBall::CopyFrom(const M_CurrentBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.M_CurrentBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M_CurrentBall::IsInitialized() const {
  return true;
}

void M_CurrentBall::InternalSwap(M_CurrentBall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shots_.InternalSwap(&other->shots_);
  balls_.InternalSwap(&other->balls_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(M_CurrentBall, over_ball_number_)
      + sizeof(M_CurrentBall::over_ball_number_)
      - PROTOBUF_FIELD_OFFSET(M_CurrentBall, outcome_)>(
          reinterpret_cast<char*>(&outcome_),
          reinterpret_cast<char*>(&other->outcome_));
}

::PROTOBUF_NAMESPACE_ID::Metadata M_CurrentBall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M_Innings::InitAsDefaultInstance() {
}
class M_Innings::_Internal {
 public:
};

M_Innings::M_Innings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.M_Innings)
}
M_Innings::M_Innings(const M_Innings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_on_batting_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_on_batting().empty()) {
    user_on_batting_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_on_batting(),
      GetArena());
  }
  user_on_bowling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_on_bowling().empty()) {
    user_on_bowling_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_on_bowling(),
      GetArena());
  }
  ::memcpy(&inning_, &from.inning_,
    static_cast<size_t>(reinterpret_cast<char*>(&yellow_shot_missed_counter_) -
    reinterpret_cast<char*>(&inning_)) + sizeof(yellow_shot_missed_counter_));
  // @@protoc_insertion_point(copy_constructor:MATCH.M_Innings)
}

void M_Innings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M_Innings_match_2eproto.base);
  user_on_batting_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_on_bowling_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yellow_shot_missed_counter_) -
      reinterpret_cast<char*>(&inning_)) + sizeof(yellow_shot_missed_counter_));
}

M_Innings::~M_Innings() {
  // @@protoc_insertion_point(destructor:MATCH.M_Innings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void M_Innings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_on_batting_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_on_bowling_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M_Innings::ArenaDtor(void* object) {
  M_Innings* _this = reinterpret_cast< M_Innings* >(object);
  (void)_this;
}
void M_Innings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M_Innings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M_Innings& M_Innings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M_Innings_match_2eproto.base);
  return *internal_default_instance();
}


void M_Innings::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.M_Innings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_on_batting_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_on_bowling_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&inning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yellow_shot_missed_counter_) -
      reinterpret_cast<char*>(&inning_)) + sizeof(yellow_shot_missed_counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* M_Innings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PAYLOAD.Innings inning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_inning(static_cast<::PAYLOAD::Innings>(val));
        } else goto handle_unusual;
        continue;
      // int32 runs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          runs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 balls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          balls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wickets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wickets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 over_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          over_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_balls_per_over = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_balls_per_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_overs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_overs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 boundary_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          boundary_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 green_shot_missed_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          green_shot_missed_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yellow_shot_missed_counter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          yellow_shot_missed_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_on_batting = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_user_on_batting();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.M_Innings.user_on_batting"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_on_bowling = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_user_on_bowling();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.M_Innings.user_on_bowling"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M_Innings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.M_Innings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PAYLOAD.Innings inning = 1;
  if (this->inning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_inning(), target);
  }

  // int32 runs = 2;
  if (this->runs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_runs(), target);
  }

  // int32 balls = 3;
  if (this->balls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_balls(), target);
  }

  // int32 wickets = 4;
  if (this->wickets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wickets(), target);
  }

  // int32 over_number = 5;
  if (this->over_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_over_number(), target);
  }

  // int32 max_balls_per_over = 6;
  if (this->max_balls_per_over() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_balls_per_over(), target);
  }

  // int32 max_overs = 7;
  if (this->max_overs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_overs(), target);
  }

  // int32 boundary_counter = 8;
  if (this->boundary_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_boundary_counter(), target);
  }

  // int32 green_shot_missed_counter = 9;
  if (this->green_shot_missed_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_green_shot_missed_counter(), target);
  }

  // int32 yellow_shot_missed_counter = 10;
  if (this->yellow_shot_missed_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_yellow_shot_missed_counter(), target);
  }

  // string user_on_batting = 11;
  if (this->user_on_batting().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_on_batting().data(), static_cast<int>(this->_internal_user_on_batting().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.M_Innings.user_on_batting");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_user_on_batting(), target);
  }

  // string user_on_bowling = 12;
  if (this->user_on_bowling().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_on_bowling().data(), static_cast<int>(this->_internal_user_on_bowling().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.M_Innings.user_on_bowling");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_user_on_bowling(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.M_Innings)
  return target;
}

size_t M_Innings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.M_Innings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_on_batting = 11;
  if (this->user_on_batting().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_on_batting());
  }

  // string user_on_bowling = 12;
  if (this->user_on_bowling().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_on_bowling());
  }

  // .PAYLOAD.Innings inning = 1;
  if (this->inning() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_inning());
  }

  // int32 runs = 2;
  if (this->runs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runs());
  }

  // int32 balls = 3;
  if (this->balls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_balls());
  }

  // int32 wickets = 4;
  if (this->wickets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wickets());
  }

  // int32 over_number = 5;
  if (this->over_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_number());
  }

  // int32 max_balls_per_over = 6;
  if (this->max_balls_per_over() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_balls_per_over());
  }

  // int32 max_overs = 7;
  if (this->max_overs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_overs());
  }

  // int32 boundary_counter = 8;
  if (this->boundary_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_boundary_counter());
  }

  // int32 green_shot_missed_counter = 9;
  if (this->green_shot_missed_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_green_shot_missed_counter());
  }

  // int32 yellow_shot_missed_counter = 10;
  if (this->yellow_shot_missed_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yellow_shot_missed_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M_Innings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.M_Innings)
  GOOGLE_DCHECK_NE(&from, this);
  const M_Innings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M_Innings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.M_Innings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.M_Innings)
    MergeFrom(*source);
  }
}

void M_Innings::MergeFrom(const M_Innings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.M_Innings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_on_batting().size() > 0) {
    _internal_set_user_on_batting(from._internal_user_on_batting());
  }
  if (from.user_on_bowling().size() > 0) {
    _internal_set_user_on_bowling(from._internal_user_on_bowling());
  }
  if (from.inning() != 0) {
    _internal_set_inning(from._internal_inning());
  }
  if (from.runs() != 0) {
    _internal_set_runs(from._internal_runs());
  }
  if (from.balls() != 0) {
    _internal_set_balls(from._internal_balls());
  }
  if (from.wickets() != 0) {
    _internal_set_wickets(from._internal_wickets());
  }
  if (from.over_number() != 0) {
    _internal_set_over_number(from._internal_over_number());
  }
  if (from.max_balls_per_over() != 0) {
    _internal_set_max_balls_per_over(from._internal_max_balls_per_over());
  }
  if (from.max_overs() != 0) {
    _internal_set_max_overs(from._internal_max_overs());
  }
  if (from.boundary_counter() != 0) {
    _internal_set_boundary_counter(from._internal_boundary_counter());
  }
  if (from.green_shot_missed_counter() != 0) {
    _internal_set_green_shot_missed_counter(from._internal_green_shot_missed_counter());
  }
  if (from.yellow_shot_missed_counter() != 0) {
    _internal_set_yellow_shot_missed_counter(from._internal_yellow_shot_missed_counter());
  }
}

void M_Innings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.M_Innings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M_Innings::CopyFrom(const M_Innings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.M_Innings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M_Innings::IsInitialized() const {
  return true;
}

void M_Innings::InternalSwap(M_Innings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_on_batting_.Swap(&other->user_on_batting_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_on_bowling_.Swap(&other->user_on_bowling_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(M_Innings, yellow_shot_missed_counter_)
      + sizeof(M_Innings::yellow_shot_missed_counter_)
      - PROTOBUF_FIELD_OFFSET(M_Innings, inning_)>(
          reinterpret_cast<char*>(&inning_),
          reinterpret_cast<char*>(&other->inning_));
}

::PROTOBUF_NAMESPACE_ID::Metadata M_Innings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IOutcome::InitAsDefaultInstance() {
}
class IOutcome::_Internal {
 public:
};

IOutcome::IOutcome(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.IOutcome)
}
IOutcome::IOutcome(const IOutcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_runs_, &from.total_runs_,
    static_cast<size_t>(reinterpret_cast<char*>(&outcome_) -
    reinterpret_cast<char*>(&total_runs_)) + sizeof(outcome_));
  // @@protoc_insertion_point(copy_constructor:MATCH.IOutcome)
}

void IOutcome::SharedCtor() {
  ::memset(&total_runs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outcome_) -
      reinterpret_cast<char*>(&total_runs_)) + sizeof(outcome_));
}

IOutcome::~IOutcome() {
  // @@protoc_insertion_point(destructor:MATCH.IOutcome)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IOutcome::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IOutcome::ArenaDtor(void* object) {
  IOutcome* _this = reinterpret_cast< IOutcome* >(object);
  (void)_this;
}
void IOutcome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IOutcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOutcome& IOutcome::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOutcome_match_2eproto.base);
  return *internal_default_instance();
}


void IOutcome::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.IOutcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_runs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outcome_) -
      reinterpret_cast<char*>(&total_runs_)) + sizeof(outcome_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOutcome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 total_runs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_runs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_balls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_balls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 wickets_taken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wickets_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 runs_scored = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          runs_scored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 original_runs_scored = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          original_runs_scored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.Brackets bracket_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bracket_id(static_cast<::MATCH::Brackets>(val));
        } else goto handle_unusual;
        continue;
      // int32 over_ball_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          over_ball_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 over_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          over_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.ShotOutcomes outcome = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_outcome(static_cast<::PAYLOAD::ShotOutcomes>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOutcome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.IOutcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_runs = 1;
  if (this->total_runs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_runs(), target);
  }

  // int32 total_balls = 2;
  if (this->total_balls() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_balls(), target);
  }

  // int32 wickets_taken = 3;
  if (this->wickets_taken() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wickets_taken(), target);
  }

  // int32 runs_scored = 4;
  if (this->runs_scored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_runs_scored(), target);
  }

  // int32 original_runs_scored = 5;
  if (this->original_runs_scored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_original_runs_scored(), target);
  }

  // .MATCH.Brackets bracket_id = 6;
  if (this->bracket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_bracket_id(), target);
  }

  // int32 over_ball_number = 7;
  if (this->over_ball_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_over_ball_number(), target);
  }

  // int32 over_number = 8;
  if (this->over_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_over_number(), target);
  }

  // .PAYLOAD.ShotOutcomes outcome = 9;
  if (this->outcome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_outcome(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.IOutcome)
  return target;
}

size_t IOutcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.IOutcome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 total_runs = 1;
  if (this->total_runs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_runs());
  }

  // int32 total_balls = 2;
  if (this->total_balls() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_balls());
  }

  // int32 wickets_taken = 3;
  if (this->wickets_taken() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wickets_taken());
  }

  // int32 runs_scored = 4;
  if (this->runs_scored() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_runs_scored());
  }

  // int32 original_runs_scored = 5;
  if (this->original_runs_scored() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_original_runs_scored());
  }

  // .MATCH.Brackets bracket_id = 6;
  if (this->bracket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bracket_id());
  }

  // int32 over_ball_number = 7;
  if (this->over_ball_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_ball_number());
  }

  // int32 over_number = 8;
  if (this->over_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_over_number());
  }

  // .PAYLOAD.ShotOutcomes outcome = 9;
  if (this->outcome() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outcome());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOutcome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.IOutcome)
  GOOGLE_DCHECK_NE(&from, this);
  const IOutcome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOutcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.IOutcome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.IOutcome)
    MergeFrom(*source);
  }
}

void IOutcome::MergeFrom(const IOutcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.IOutcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_runs() != 0) {
    _internal_set_total_runs(from._internal_total_runs());
  }
  if (from.total_balls() != 0) {
    _internal_set_total_balls(from._internal_total_balls());
  }
  if (from.wickets_taken() != 0) {
    _internal_set_wickets_taken(from._internal_wickets_taken());
  }
  if (from.runs_scored() != 0) {
    _internal_set_runs_scored(from._internal_runs_scored());
  }
  if (from.original_runs_scored() != 0) {
    _internal_set_original_runs_scored(from._internal_original_runs_scored());
  }
  if (from.bracket_id() != 0) {
    _internal_set_bracket_id(from._internal_bracket_id());
  }
  if (from.over_ball_number() != 0) {
    _internal_set_over_ball_number(from._internal_over_ball_number());
  }
  if (from.over_number() != 0) {
    _internal_set_over_number(from._internal_over_number());
  }
  if (from.outcome() != 0) {
    _internal_set_outcome(from._internal_outcome());
  }
}

void IOutcome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.IOutcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOutcome::CopyFrom(const IOutcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.IOutcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOutcome::IsInitialized() const {
  return true;
}

void IOutcome::InternalSwap(IOutcome* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOutcome, outcome_)
      + sizeof(IOutcome::outcome_)
      - PROTOBUF_FIELD_OFFSET(IOutcome, total_runs_)>(
          reinterpret_cast<char*>(&total_runs_),
          reinterpret_cast<char*>(&other->total_runs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IOutcome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchPlayer::InitAsDefaultInstance() {
}
class MatchPlayer::_Internal {
 public:
};

MatchPlayer::MatchPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.MatchPlayer)
}
MatchPlayer::MatchPlayer(const MatchPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nickname(),
      GetArena());
  }
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:MATCH.MatchPlayer)
}

void MatchPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchPlayer_match_2eproto.base);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(confidence_));
}

MatchPlayer::~MatchPlayer() {
  // @@protoc_insertion_point(destructor:MATCH.MatchPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchPlayer::ArenaDtor(void* object) {
  MatchPlayer* _this = reinterpret_cast< MatchPlayer* >(object);
  (void)_this;
}
void MatchPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchPlayer& MatchPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchPlayer_match_2eproto.base);
  return *internal_default_instance();
}


void MatchPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.MatchPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.MatchPlayer.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 image_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          image_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lineup_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lineup_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_out = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool used = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hits = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 misses = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lhbrhb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          lhbrhb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double confidence = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .MATCH.Strike strike = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strike(static_cast<::MATCH::Strike>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.MatchPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_character_id(), target);
  }

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.MatchPlayer.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // int32 image_number = 3;
  if (this->image_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_image_number(), target);
  }

  // int32 power = 4;
  if (this->power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_power(), target);
  }

  // int32 lineup_number = 5;
  if (this->lineup_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_lineup_number(), target);
  }

  // bool is_out = 6;
  if (this->is_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_out(), target);
  }

  // bool used = 7;
  if (this->used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_used(), target);
  }

  // int32 hits = 8;
  if (this->hits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_hits(), target);
  }

  // int32 misses = 9;
  if (this->misses() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_misses(), target);
  }

  // double lhbrhb = 10;
  if (!(this->lhbrhb() <= 0 && this->lhbrhb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_lhbrhb(), target);
  }

  // double confidence = 11;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_confidence(), target);
  }

  // .MATCH.Strike strike = 12;
  if (this->strike() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_strike(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.MatchPlayer)
  return target;
}

size_t MatchPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.MatchPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_character_id());
  }

  // int32 image_number = 3;
  if (this->image_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_image_number());
  }

  // int32 power = 4;
  if (this->power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power());
  }

  // int32 lineup_number = 5;
  if (this->lineup_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineup_number());
  }

  // bool is_out = 6;
  if (this->is_out() != 0) {
    total_size += 1 + 1;
  }

  // bool used = 7;
  if (this->used() != 0) {
    total_size += 1 + 1;
  }

  // int32 hits = 8;
  if (this->hits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hits());
  }

  // double lhbrhb = 10;
  if (!(this->lhbrhb() <= 0 && this->lhbrhb() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 misses = 9;
  if (this->misses() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_misses());
  }

  // .MATCH.Strike strike = 12;
  if (this->strike() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strike());
  }

  // double confidence = 11;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.MatchPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.MatchPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.MatchPlayer)
    MergeFrom(*source);
  }
}

void MatchPlayer::MergeFrom(const MatchPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.MatchPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.image_number() != 0) {
    _internal_set_image_number(from._internal_image_number());
  }
  if (from.power() != 0) {
    _internal_set_power(from._internal_power());
  }
  if (from.lineup_number() != 0) {
    _internal_set_lineup_number(from._internal_lineup_number());
  }
  if (from.is_out() != 0) {
    _internal_set_is_out(from._internal_is_out());
  }
  if (from.used() != 0) {
    _internal_set_used(from._internal_used());
  }
  if (from.hits() != 0) {
    _internal_set_hits(from._internal_hits());
  }
  if (!(from.lhbrhb() <= 0 && from.lhbrhb() >= 0)) {
    _internal_set_lhbrhb(from._internal_lhbrhb());
  }
  if (from.misses() != 0) {
    _internal_set_misses(from._internal_misses());
  }
  if (from.strike() != 0) {
    _internal_set_strike(from._internal_strike());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void MatchPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.MatchPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPlayer::CopyFrom(const MatchPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.MatchPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPlayer::IsInitialized() const {
  return true;
}

void MatchPlayer::InternalSwap(MatchPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchPlayer, confidence_)
      + sizeof(MatchPlayer::confidence_)
      - PROTOBUF_FIELD_OFFSET(MatchPlayer, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchModel::InitAsDefaultInstance() {
  ::MATCH::_MatchModel_default_instance_._instance.get_mutable()->currentinnings_ = const_cast< ::MATCH::M_Innings*>(
      ::MATCH::M_Innings::internal_default_instance());
  ::MATCH::_MatchModel_default_instance_._instance.get_mutable()->previousinnings_ = const_cast< ::MATCH::M_Innings*>(
      ::MATCH::M_Innings::internal_default_instance());
  ::MATCH::_MatchModel_default_instance_._instance.get_mutable()->currentball_ = const_cast< ::MATCH::M_CurrentBall*>(
      ::MATCH::M_CurrentBall::internal_default_instance());
  ::MATCH::_MatchModel_default_instance_._instance.get_mutable()->selectedfirstbatsman_ = const_cast< ::MATCH::MatchPlayer*>(
      ::MATCH::MatchPlayer::internal_default_instance());
  ::MATCH::_MatchModel_default_instance_._instance.get_mutable()->selectedsecondbatsman_ = const_cast< ::MATCH::MatchPlayer*>(
      ::MATCH::MatchPlayer::internal_default_instance());
  ::MATCH::_MatchModel_default_instance_._instance.get_mutable()->selectedbowler_ = const_cast< ::MATCH::MatchPlayer*>(
      ::MATCH::MatchPlayer::internal_default_instance());
}
class MatchModel::_Internal {
 public:
  static const ::MATCH::M_Innings& currentinnings(const MatchModel* msg);
  static const ::MATCH::M_Innings& previousinnings(const MatchModel* msg);
  static const ::MATCH::M_CurrentBall& currentball(const MatchModel* msg);
  static const ::MATCH::MatchPlayer& selectedfirstbatsman(const MatchModel* msg);
  static const ::MATCH::MatchPlayer& selectedsecondbatsman(const MatchModel* msg);
  static const ::MATCH::MatchPlayer& selectedbowler(const MatchModel* msg);
};

const ::MATCH::M_Innings&
MatchModel::_Internal::currentinnings(const MatchModel* msg) {
  return *msg->currentinnings_;
}
const ::MATCH::M_Innings&
MatchModel::_Internal::previousinnings(const MatchModel* msg) {
  return *msg->previousinnings_;
}
const ::MATCH::M_CurrentBall&
MatchModel::_Internal::currentball(const MatchModel* msg) {
  return *msg->currentball_;
}
const ::MATCH::MatchPlayer&
MatchModel::_Internal::selectedfirstbatsman(const MatchModel* msg) {
  return *msg->selectedfirstbatsman_;
}
const ::MATCH::MatchPlayer&
MatchModel::_Internal::selectedsecondbatsman(const MatchModel* msg) {
  return *msg->selectedsecondbatsman_;
}
const ::MATCH::MatchPlayer&
MatchModel::_Internal::selectedbowler(const MatchModel* msg) {
  return *msg->selectedbowler_;
}
MatchModel::MatchModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena),
  home_lineup_(arena),
  away_lineup_(arena),
  previousballs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MATCH.MatchModel)
}
MatchModel::MatchModel(const MatchModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_),
      home_lineup_(from.home_lineup_),
      away_lineup_(from.away_lineup_),
      previousballs_(from.previousballs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matchid().empty()) {
    matchid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_matchid(),
      GetArena());
  }
  home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_home().empty()) {
    home_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_home(),
      GetArena());
  }
  away_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_away().empty()) {
    away_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_away(),
      GetArena());
  }
  if (from._internal_has_currentinnings()) {
    currentinnings_ = new ::MATCH::M_Innings(*from.currentinnings_);
  } else {
    currentinnings_ = nullptr;
  }
  if (from._internal_has_previousinnings()) {
    previousinnings_ = new ::MATCH::M_Innings(*from.previousinnings_);
  } else {
    previousinnings_ = nullptr;
  }
  if (from._internal_has_currentball()) {
    currentball_ = new ::MATCH::M_CurrentBall(*from.currentball_);
  } else {
    currentball_ = nullptr;
  }
  if (from._internal_has_selectedfirstbatsman()) {
    selectedfirstbatsman_ = new ::MATCH::MatchPlayer(*from.selectedfirstbatsman_);
  } else {
    selectedfirstbatsman_ = nullptr;
  }
  if (from._internal_has_selectedsecondbatsman()) {
    selectedsecondbatsman_ = new ::MATCH::MatchPlayer(*from.selectedsecondbatsman_);
  } else {
    selectedsecondbatsman_ = nullptr;
  }
  if (from._internal_has_selectedbowler()) {
    selectedbowler_ = new ::MATCH::MatchPlayer(*from.selectedbowler_);
  } else {
    selectedbowler_ = nullptr;
  }
  ::memcpy(&joinstate_, &from.joinstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&previousevent_) -
    reinterpret_cast<char*>(&joinstate_)) + sizeof(previousevent_));
  // @@protoc_insertion_point(copy_constructor:MATCH.MatchModel)
}

void MatchModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchModel_match_2eproto.base);
  matchid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  home_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  away_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&currentinnings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previousevent_) -
      reinterpret_cast<char*>(&currentinnings_)) + sizeof(previousevent_));
}

MatchModel::~MatchModel() {
  // @@protoc_insertion_point(destructor:MATCH.MatchModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  matchid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  home_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  away_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete currentinnings_;
  if (this != internal_default_instance()) delete previousinnings_;
  if (this != internal_default_instance()) delete currentball_;
  if (this != internal_default_instance()) delete selectedfirstbatsman_;
  if (this != internal_default_instance()) delete selectedsecondbatsman_;
  if (this != internal_default_instance()) delete selectedbowler_;
}

void MatchModel::ArenaDtor(void* object) {
  MatchModel* _this = reinterpret_cast< MatchModel* >(object);
  (void)_this;
}
void MatchModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchModel& MatchModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchModel_match_2eproto.base);
  return *internal_default_instance();
}


void MatchModel::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH.MatchModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  home_lineup_.Clear();
  away_lineup_.Clear();
  previousballs_.Clear();
  matchid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  home_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  away_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && currentinnings_ != nullptr) {
    delete currentinnings_;
  }
  currentinnings_ = nullptr;
  if (GetArena() == nullptr && previousinnings_ != nullptr) {
    delete previousinnings_;
  }
  previousinnings_ = nullptr;
  if (GetArena() == nullptr && currentball_ != nullptr) {
    delete currentball_;
  }
  currentball_ = nullptr;
  if (GetArena() == nullptr && selectedfirstbatsman_ != nullptr) {
    delete selectedfirstbatsman_;
  }
  selectedfirstbatsman_ = nullptr;
  if (GetArena() == nullptr && selectedsecondbatsman_ != nullptr) {
    delete selectedsecondbatsman_;
  }
  selectedsecondbatsman_ = nullptr;
  if (GetArena() == nullptr && selectedbowler_ != nullptr) {
    delete selectedbowler_;
  }
  selectedbowler_ = nullptr;
  ::memset(&joinstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previousevent_) -
      reinterpret_cast<char*>(&joinstate_)) + sizeof(previousevent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string matchId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_matchid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.MatchModel.matchId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MATCH.M_UserInfo users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string home = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_home();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.MatchModel.home"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string away = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_away();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MATCH.MatchModel.away"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.JoinStates joinState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_joinstate(static_cast<::MATCH::JoinStates>(val));
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.MatchStates matchState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_matchstate(static_cast<::PAYLOAD::MatchStates>(val));
        } else goto handle_unusual;
        continue;
      // .MATCH.M_Innings currentInnings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentinnings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.M_Innings previousInnings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_previousinnings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MATCH.MatchPlayer home_lineup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_home_lineup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MATCH.MatchPlayer away_lineup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_away_lineup(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .MATCH.M_CurrentBall currentBall = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MATCH.M_CurrentBall previousBalls = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previousballs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .MATCH.MatchPlayer selectedFirstBatsman = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedfirstbatsman(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.MatchPlayer selectedSecondBatsman = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedsecondbatsman(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MATCH.MatchPlayer selectedBowler = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_selectedbowler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PAYLOAD.Events previousEvent = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_previousevent(static_cast<::PAYLOAD::Events>(val));
        } else goto handle_unusual;
        continue;
      // int64 stateStartTime = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          statestarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 both_disconnect_time_point = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          both_disconnect_time_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH.MatchModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_matchid().data(), static_cast<int>(this->_internal_matchid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.MatchModel.matchId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_matchid(), target);
  }

  // repeated .MATCH.M_UserInfo users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_users(i), target, stream);
  }

  // string home = 3;
  if (this->home().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.MatchModel.home");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_home(), target);
  }

  // string away = 4;
  if (this->away().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_away().data(), static_cast<int>(this->_internal_away().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MATCH.MatchModel.away");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_away(), target);
  }

  // .MATCH.JoinStates joinState = 5;
  if (this->joinstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_joinstate(), target);
  }

  // .PAYLOAD.MatchStates matchState = 6;
  if (this->matchstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_matchstate(), target);
  }

  // .MATCH.M_Innings currentInnings = 7;
  if (this->has_currentinnings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::currentinnings(this), target, stream);
  }

  // .MATCH.M_Innings previousInnings = 8;
  if (this->has_previousinnings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::previousinnings(this), target, stream);
  }

  // repeated .MATCH.MatchPlayer home_lineup = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_home_lineup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_home_lineup(i), target, stream);
  }

  // repeated .MATCH.MatchPlayer away_lineup = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_away_lineup_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_away_lineup(i), target, stream);
  }

  // .MATCH.M_CurrentBall currentBall = 11;
  if (this->has_currentball()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::currentball(this), target, stream);
  }

  // repeated .MATCH.M_CurrentBall previousBalls = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_previousballs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_previousballs(i), target, stream);
  }

  // .MATCH.MatchPlayer selectedFirstBatsman = 13;
  if (this->has_selectedfirstbatsman()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::selectedfirstbatsman(this), target, stream);
  }

  // .MATCH.MatchPlayer selectedSecondBatsman = 14;
  if (this->has_selectedsecondbatsman()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::selectedsecondbatsman(this), target, stream);
  }

  // .MATCH.MatchPlayer selectedBowler = 15;
  if (this->has_selectedbowler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::selectedbowler(this), target, stream);
  }

  // .PAYLOAD.Events previousEvent = 16;
  if (this->previousevent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_previousevent(), target);
  }

  // int64 stateStartTime = 17;
  if (this->statestarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_statestarttime(), target);
  }

  // int64 both_disconnect_time_point = 18;
  if (this->both_disconnect_time_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_both_disconnect_time_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH.MatchModel)
  return target;
}

size_t MatchModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH.MatchModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MATCH.M_UserInfo users = 2;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MATCH.MatchPlayer home_lineup = 9;
  total_size += 1UL * this->_internal_home_lineup_size();
  for (const auto& msg : this->home_lineup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MATCH.MatchPlayer away_lineup = 10;
  total_size += 1UL * this->_internal_away_lineup_size();
  for (const auto& msg : this->away_lineup_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MATCH.M_CurrentBall previousBalls = 12;
  total_size += 1UL * this->_internal_previousballs_size();
  for (const auto& msg : this->previousballs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string matchId = 1;
  if (this->matchid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_matchid());
  }

  // string home = 3;
  if (this->home().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  // string away = 4;
  if (this->away().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_away());
  }

  // .MATCH.M_Innings currentInnings = 7;
  if (this->has_currentinnings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentinnings_);
  }

  // .MATCH.M_Innings previousInnings = 8;
  if (this->has_previousinnings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previousinnings_);
  }

  // .MATCH.M_CurrentBall currentBall = 11;
  if (this->has_currentball()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentball_);
  }

  // .MATCH.MatchPlayer selectedFirstBatsman = 13;
  if (this->has_selectedfirstbatsman()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedfirstbatsman_);
  }

  // .MATCH.MatchPlayer selectedSecondBatsman = 14;
  if (this->has_selectedsecondbatsman()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedsecondbatsman_);
  }

  // .MATCH.MatchPlayer selectedBowler = 15;
  if (this->has_selectedbowler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selectedbowler_);
  }

  // .MATCH.JoinStates joinState = 5;
  if (this->joinstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_joinstate());
  }

  // .PAYLOAD.MatchStates matchState = 6;
  if (this->matchstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchstate());
  }

  // int64 stateStartTime = 17;
  if (this->statestarttime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_statestarttime());
  }

  // int64 both_disconnect_time_point = 18;
  if (this->both_disconnect_time_point() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_both_disconnect_time_point());
  }

  // .PAYLOAD.Events previousEvent = 16;
  if (this->previousevent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_previousevent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH.MatchModel)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH.MatchModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH.MatchModel)
    MergeFrom(*source);
  }
}

void MatchModel::MergeFrom(const MatchModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH.MatchModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  home_lineup_.MergeFrom(from.home_lineup_);
  away_lineup_.MergeFrom(from.away_lineup_);
  previousballs_.MergeFrom(from.previousballs_);
  if (from.matchid().size() > 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from.home().size() > 0) {
    _internal_set_home(from._internal_home());
  }
  if (from.away().size() > 0) {
    _internal_set_away(from._internal_away());
  }
  if (from.has_currentinnings()) {
    _internal_mutable_currentinnings()->::MATCH::M_Innings::MergeFrom(from._internal_currentinnings());
  }
  if (from.has_previousinnings()) {
    _internal_mutable_previousinnings()->::MATCH::M_Innings::MergeFrom(from._internal_previousinnings());
  }
  if (from.has_currentball()) {
    _internal_mutable_currentball()->::MATCH::M_CurrentBall::MergeFrom(from._internal_currentball());
  }
  if (from.has_selectedfirstbatsman()) {
    _internal_mutable_selectedfirstbatsman()->::MATCH::MatchPlayer::MergeFrom(from._internal_selectedfirstbatsman());
  }
  if (from.has_selectedsecondbatsman()) {
    _internal_mutable_selectedsecondbatsman()->::MATCH::MatchPlayer::MergeFrom(from._internal_selectedsecondbatsman());
  }
  if (from.has_selectedbowler()) {
    _internal_mutable_selectedbowler()->::MATCH::MatchPlayer::MergeFrom(from._internal_selectedbowler());
  }
  if (from.joinstate() != 0) {
    _internal_set_joinstate(from._internal_joinstate());
  }
  if (from.matchstate() != 0) {
    _internal_set_matchstate(from._internal_matchstate());
  }
  if (from.statestarttime() != 0) {
    _internal_set_statestarttime(from._internal_statestarttime());
  }
  if (from.both_disconnect_time_point() != 0) {
    _internal_set_both_disconnect_time_point(from._internal_both_disconnect_time_point());
  }
  if (from.previousevent() != 0) {
    _internal_set_previousevent(from._internal_previousevent());
  }
}

void MatchModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH.MatchModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchModel::CopyFrom(const MatchModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH.MatchModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchModel::IsInitialized() const {
  return true;
}

void MatchModel::InternalSwap(MatchModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  home_lineup_.InternalSwap(&other->home_lineup_);
  away_lineup_.InternalSwap(&other->away_lineup_);
  previousballs_.InternalSwap(&other->previousballs_);
  matchid_.Swap(&other->matchid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  home_.Swap(&other->home_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  away_.Swap(&other->away_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchModel, previousevent_)
      + sizeof(MatchModel::previousevent_)
      - PROTOBUF_FIELD_OFFSET(MatchModel, currentinnings_)>(
          reinterpret_cast<char*>(&currentinnings_),
          reinterpret_cast<char*>(&other->currentinnings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MATCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MATCH::IPCMessage* Arena::CreateMaybeMessage< ::MATCH::IPCMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::IPCMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::CreateMatchRequest* Arena::CreateMaybeMessage< ::MATCH::CreateMatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::CreateMatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::EndMatchRequest* Arena::CreateMaybeMessage< ::MATCH::EndMatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::EndMatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::EndMatchUserData* Arena::CreateMaybeMessage< ::MATCH::EndMatchUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::EndMatchUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::MatchList* Arena::CreateMaybeMessage< ::MATCH::MatchList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::MatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::SAInfo* Arena::CreateMaybeMessage< ::MATCH::SAInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::SAInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::M_UserInfo* Arena::CreateMaybeMessage< ::MATCH::M_UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::M_UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::M_TShot* Arena::CreateMaybeMessage< ::MATCH::M_TShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::M_TShot >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::BracketData* Arena::CreateMaybeMessage< ::MATCH::BracketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::BracketData >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::M_TBall* Arena::CreateMaybeMessage< ::MATCH::M_TBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::M_TBall >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::TOutcome* Arena::CreateMaybeMessage< ::MATCH::TOutcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::TOutcome >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::M_CurrentBall* Arena::CreateMaybeMessage< ::MATCH::M_CurrentBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::M_CurrentBall >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::M_Innings* Arena::CreateMaybeMessage< ::MATCH::M_Innings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::M_Innings >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::IOutcome* Arena::CreateMaybeMessage< ::MATCH::IOutcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::IOutcome >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::MatchPlayer* Arena::CreateMaybeMessage< ::MATCH::MatchPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::MatchPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH::MatchModel* Arena::CreateMaybeMessage< ::MATCH::MatchModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MATCH::MatchModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
